// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FiProtoEntity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from FiProtoEntity.proto</summary>
public static partial class FiProtoEntityReflection {

  #region Descriptor
  /// <summary>File descriptor for FiProtoEntity.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FiProtoEntityReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNGaVByb3RvRW50aXR5LnByb3RvIiYKDkJ1bGxldFBvc2l0aW9uEgkKAXgY",
          "ASABKAISCQoBeRgCIAEoAiKmAwoNT3RoZXJVc2VySW5mbxISCgpzZWF0X2lu",
          "ZGV4GAEgASgFEg4KBmdlbmRlchgCIAEoBRIQCghuaWNrbmFtZRgDIAEoCRIM",
          "CgRnb2xkGAQgASgDEg8KB2RpYW1vbmQYBSABKAMSHAoUY3VycmVudF9jYW5u",
          "b25fcmF0aW8YBiABKAUSDgoGYXZhdGFyGAcgASgJEg8KB3VzZXJfaWQYCCAB",
          "KAUSDQoFbGV2ZWwYCSABKAUSEgoKZXhwZXJpZW5jZRgKIAEoBRIRCgl2aXBf",
          "bGV2ZWwYCyABKAUSGwoTbWF4X2Nhbm5vbl9tdWx0aXBsZRgMIAEoBRIQCghw",
          "cmVwYXJlZBgNIAEoCBIUCgxjYW5ub25fc3R5bGUYDiABKAUSDwoHZ2FtZV9p",
          "ZBgPIAEoBRIXCg9tb250aGx5Q2FyZFR5cGUYECABKAUSGAoQY2Fubm9uQm90",
          "dG9tVHlwZRgRIAEoBRIRCgl0ZXN0X2NvaW4YEiABKAMSFAoMaXNfcm9vbV90",
          "ZXN0GBMgASgFEhkKEXVzZXJDaGFtcGlvbnNSYW5rGBQgASgFIj0KE1BCX0Vu",
          "dGVyUm9vbVJlcXVlc3QSEgoKZW50ZXJfdHlwZRgBIAEoBRISCgpyb29tX3Jh",
          "dGlvGAIgASgFInwKFFBCX0VudGVyUm9vbVJlc3BvbnNlEg4KBnJlc3VsdBgB",
          "IAEoBRISCgpyb29tX2luZGV4GAIgASgDEhIKCnNlYXRfaW5kZXgYAyABKAUS",
          "HgoGb3RoZXJzGAQgAygLMg4uT3RoZXJVc2VySW5mbxIMCgRnb2xkGAUgASgD",
          "IoABCg9QQl9Mb2dpblJlcXVlc3QSDwoHb3Blbl9pZBgBIAEoCRIUCgxhY2Nl",
          "c3NfdG9rZW4YAiABKAkSEAoIbmlja25hbWUYAyABKAkSEgoKYXZhdGFyX3Vy",
          "bBgEIAEoCRIOCgZnZW5kZXIYBSABKAUSEAoIcGxhdGZvcm0YBiABKAUivQcK",
          "EFBCX0xvZ2luUmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEhAKCG5pY2tuYW1l",
          "GAIgASgJEg4KBmF2YXRhchgDIAEoCRIRCgl2aXBfbGV2ZWwYBCABKAUSDQoF",
          "bGV2ZWwYCyABKAUSEgoKZXhwZXJpZW5jZRgFIAEoBRIPCgd1c2VyX2lkGAYg",
          "ASgNEgwKBGdvbGQYByABKAMSDwoHZGlhbW9uZBgIIAEoAxIRCgl0b3B1cF9z",
          "dW0YCSABKAUSGwoTbWF4X2Nhbm5vbl9tdWx0aXBsZRgKIAEoBRIQCghzYWls",
          "X2RheRgMIAEoBRIZChFyZWRfcGFja2V0X3RpY2tldBgNIAEoAxIUCgxjYW5u",
          "b25fc3R5bGUYDiABKAUSGwoHc2lnbl9pbhgPIAMoCzIKLlBCX1NpZ25JbhIW",
          "Cg5uZXh0X2xldmVsX2V4cBgQIAEoBRIZChFiZWdpbm5lcl9jdXJfdGFzaxgR",
          "IAEoBRIZChFiZWdpbm5lcl9wcm9ncmVzcxgSIAEoBRIRCglyb29tX2NhcmQY",
          "EyABKAMSHwoXbW9udGhseV9jYXJkX2V4cGlyeV9kYXkYFCABKAMSHgoWbW9u",
          "dGhseV9wYWNrX2dvdF90b2RheRgVIAEoBRIeChZwcmVmZXJlbmNlX3BhY2tf",
          "Ym91Z2h0GBYgASgFEhIKCmxvZ2luX2dvbGQYFyABKAMSGgoSZmlyc3RfcGF5",
          "X3Byb2R1Y3RzGBggAygFEhIKCmx1Y2t5X2dvbGQYGSABKAMSFgoObHVja3lf",
          "ZmlzaF9udW0YGiABKAUSDQoFY2hhcm0YGyABKAMSHAoUY2hhcm1fZXhjaGFu",
          "Z2VfdGltZXMYHCABKAUSEQoJYmFua19nb2xkGB0gASgDEhUKDWhhc19iYW5r",
          "X3Bzd2QYHiABKAgSEQoJZXJyb3JfbXNnGB8gASgJEg8KB2dhbWVfaWQYICAB",
          "KAMSDgoGZ2VuZGVyGCEgASgFEhEKCXRlc3RfY29pbhgiIAEoAxIUCgxpc190",
          "ZXN0X3Jvb20YIyABKAUSGgoSY2Fubm9uX2JvdHRvbV9zdGx5GCQgASgFEg8K",
          "B25NYW5tb24YJSABKAUSFwoPbkJvc3NNYXRjaFN0YXRlGCYgASgFEhEKCWlz",
          "TmV3VXNlchgnIAEoBRIcChRpc1JvbmdZdURpYW5UYW5nVXNlchgoIAEoBRIc",
          "ChRpc1BhaVdlaVRvcFVwSmlhQ2VuZxgpIAEoBRIaChJpc1Jlc3RlclVzZXJT",
          "dGVhdGUYKiABKAUiMQoLUEJfUHJvcGVydHkSFQoNcHJvcGVydHlfdHlwZRgB",
          "IAEoBRILCgNzdW0YAiABKAUiKgoaUEJfR2V0RmlzaEx1Y2t5RHJhd1JlcXVl",
          "c3QSDAoEdHlwZRgBIAEoBSJXChtQQl9HZXRGaXNoTHVja3lEcmF3UmVzcG9u",
          "c2USDgoGcmVzdWx0GAEgASgFEgwKBHR5cGUYAiABKAUSGgoEcHJvcBgDIAEo",
          "CzIMLlBCX1Byb3BlcnR5IlMKFlBCX05vdGlmeUZpc2hMdWNreURyYXcSDwoH",
          "dXNlcl9pZBgBIAEoBRIMCgR0eXBlGAIgASgFEhoKBHByb3AYAyABKAsyDC5Q",
          "Ql9Qcm9wZXJ0eSJRChNQQl9MZWF2ZVJvb21SZXF1ZXN0EhIKCmxlYXZlX3R5",
          "cGUYASABKAUSEgoKcm9vbV9yYXRpbxgCIAEoBRISCgpyb29tX2luZGV4GAMg",
          "ASgDIjQKFFBCX0xlYXZlUm9vbVJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIM",
          "CgRnb2xkGAIgASgDInQKF1BCX090aGVyRW50ZXJSb29tSW5mcm9tEhIKCmVu",
          "dGVyX3R5cGUYASABKAUSEgoKcm9vbV9yYXRpbxgCIAEoBRISCgpyb29tX2lu",
          "ZGV4GAMgASgDEh0KBW90aGVyGAQgASgLMg4uT3RoZXJVc2VySW5mbyI+ChdQ",
          "Ql9PdGhlckxlYXZlUm9vbUluZnJvbRISCgpzZWF0X2luZGV4GAEgASgFEg8K",
          "B3VzZXJfaWQYAiABKAUipQEKElBCX1VzZXJGaXJlUmVxdWVzdBIRCglidWxs",
          "ZXRfaWQYASABKAUSFAoMY2Fubm9uX3JhdGlvGAIgASgFEiEKCHBvc2l0aW9u",
          "GAMgASgLMg8uQnVsbGV0UG9zaXRpb24SDwoHdXNlcl9pZBgEIAEoBRIQCghn",
          "cm91cF9pZBgFIAEoBRIPCgdmaXNoX2lkGAYgASgFEg8KB3Zpb2xlbnQYByAB",
          "KAgihAEKElBCX0Zpc2hHcm91cEluZnJvbRIQCghncm91cF9pZBgBIAEoBRIR",
          "CglmaXNoX3R5cGUYAiABKAUSEAoIZmlzaF9udW0YAyABKAUSEAoIdHJhY2tf",
          "aWQYBCABKAUSEgoKdHJhY2tfdHlwZRgFIAEoBRIRCgl0aWRlX3R5cGUYBiAB",
          "KAUi+AEKEFBCX0Zpc2hIaXRJbmZyb20SEQoJYnVsbGV0X2lkGAEgASgFEhAK",
          "CGdyb3VwX2lkGAIgASgFEg8KB2Zpc2hfaWQYAyABKAUSDwoHdXNlcl9pZBgE",
          "IAEoBRIXCg9jYW5ub25fbXVsdGlwbGUYBSABKAUSIQoIcG9zaXRpb24YBiAB",
          "KAsyDy5CdWxsZXRQb3NpdGlvbhIgCgpwcm9wZXJ0aWVzGAcgAygLMgwuUEJf",
          "UHJvcGVydHkSDwoHdmlvbGVudBgIIAEoCBIXCg9sb25nTGl1U2h1aUdvbGQY",
          "CSABKAMSFQoNYmVpeW9uZ0Zpc2hJRBgKIAEoBSIjCg9QQl9GaXNoT3V0U2Nl",
          "bmUSEAoIZ3JvdXBfaWQYASABKAUiMQoWUEJfQ2hhbmdlQ2Fubm9uUmVxdWVz",
          "dBIXCg9jYW5ub25fbXVsdGlwbGUYASABKAUiQgoXUEJfQ2hhbmdlQ2Fubm9u",
          "UmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEhcKD2Nhbm5vbl9tdWx0aXBsZRgC",
          "IAEoBSJAChRQQl9PdGhlckNoYW5nZUNhbm5vbhIPCgd1c2VyX2lkGAEgASgF",
          "EhcKD2Nhbm5vbl9tdWx0aXBsZRgCIAEoBSInCglQQl9FZmZlY3QSCgoCaWQY",
          "ASABKAUSDgoGdGFyZ2V0GAIgAygFIj8KEFBCX0VmZmVjdFJlcXVlc3QSDwoH",
          "dXNlcl9pZBgBIAEoBRIaCgZlZmZlY3QYAiABKAsyCi5QQl9FZmZlY3QiPwoR",
          "UEJfRWZmZWN0UmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEhoKBmVmZmVjdBgC",
          "IAEoCzIKLlBCX0VmZmVjdCI9Cg5QQl9PdGhlckVmZmVjdBIPCgd1c2VyX2lk",
          "GAEgASgFEhoKBmVmZmVjdBgCIAEoCzIKLlBCX0VmZmVjdCIfCg1GcmVlemVU",
          "aW1lb3V0Eg4KBnRhcmdldBgBIAMoBSIpCgxUb3BVcFJlcXVlc3QSDAoEdHlw",
          "ZRgBIAEoBRILCgNSTUIYAiABKAMiOgoNVG9wVXBSZXNwb25zZRIOCgZyZXN1",
          "bHQYASABKAUSDAoEdHlwZRgCIAEoBRILCgNzdW0YAyABKAMirgEKEEJhY2tw",
          "YWNrUHJvcGVydHkSCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRIMCgR0eXBl",
          "GAMgASgFEhMKC2Rlc2NyaXB0aW9uGAQgASgJEg8KB3VzZWFibGUYBSABKAgS",
          "FQoNY2FuX2dpdmVfYXdheRgGIAEoCBIUCgxkaWFtb25kX2Nvc3QYByABKAMS",
          "DQoFY291bnQYCCABKAUSEAoIcHJvcFRpbWUYCSABKAMiVAobR2V0QmFja3Bh",
          "Y2tQcm9wZXJ0eVJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIlCgpwcm9wZXJ0",
          "aWVzGAIgAygLMhEuQmFja3BhY2tQcm9wZXJ0eSKbAQoNUEJfUEtSb29tSW5m",
          "bxISCgpyb29tX2luZGV4GAEgASgFEhEKCXJvb21fdHlwZRgCIAEoBRIRCgln",
          "b2xkX3R5cGUYAyABKAUSEQoJdGltZV90eXBlGAQgASgFEhIKCnJvdW5kX3R5",
          "cGUYBSABKAUSDQoFYmVndW4YBiABKAgSGgoSY3VycmVudF9wbGF5ZXJfbnVt",
          "GAcgASgFIj4KF1BCX0dldFBLUm9vbUxpc3RSZXF1ZXN0EhEKCXJvb21fdHlw",
          "ZRgBIAEoBRIQCghwYWdlX251bRgCIAEoBSJuChhQQl9HZXRQS1Jvb21MaXN0",
          "UmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEhEKCXJvb21fdHlwZRgCIAEoBRIQ",
          "CghwYWdlX251bRgDIAEoBRIdCgVyb29tcxgEIAMoCzIOLlBCX1BLUm9vbUlu",
          "Zm8ivQEKFlBCX0NyZWF0ZVBLUm9vbVJlcXVlc3QSEQoJcm9vbV90eXBlGAEg",
          "ASgFEhEKCWdvbGRfdHlwZRgCIAEoBRITCgtidWxsZXRfdHlwZRgDIAEoBRIR",
          "Cgl0aW1lX3R5cGUYBCABKAUSEgoKcG9pbnRfdHlwZRgFIAEoBRIXCg9wbGF5",
          "ZXJfbnVtX3R5cGUYBiABKAUSEQoJcm9vbV9uYW1lGAcgASgJEhUKDXJvb21f",
          "cGFzc3dvcmQYCCABKAkibgoXUEJfQ3JlYXRlUEtSb29tUmVzcG9uc2USDgoG",
          "cmVzdWx0GAEgASgFEhEKCXJvb21fdHlwZRgCIAEoBRISCgpzZWF0X2luZGV4",
          "GAMgASgFEhwKBHJvb20YBCABKAsyDi5QQl9QS1Jvb21JbmZvIj4KFVBCX1N0",
          "YXJ0UEtHYW1lUmVxdWVzdBIRCglyb29tX3R5cGUYASABKAUSEgoKcm9vbV9p",
          "bmRleBgCIAEoBSJPChZQQl9TdGFydFBLR2FtZVJlc3BvbnNlEg4KBnJlc3Vs",
          "dBgBIAEoBRIRCglyb29tX3R5cGUYAiABKAUSEgoKcm9vbV9pbmRleBgDIAEo",
          "BSI9ChRQQl9Ob3RpZnlQS0dhbWVTdGFydBIRCglyb29tX3R5cGUYASABKAUS",
          "EgoKcm9vbV9pbmRleBgCIAEoBSI9ChVQQl9FbnRlclBLUm9vbVJlcXVlc3QS",
          "EQoJcm9vbV90eXBlGAEgASgFEhEKCWdvbGRfdHlwZRgCIAEoBSKWAQoWUEJf",
          "RW50ZXJQS1Jvb21SZXNwb25zZRIOCgZyZXN1bHQYASABKAUSEQoJcm9vbV90",
          "eXBlGAIgASgFEhIKCnJvb21faW5kZXgYAyABKAUSEgoKc2VhdF9pbmRleBgE",
          "IAEoBRIRCglnb2xkX3R5cGUYBSABKAUSHgoGb3RoZXJzGAYgAygLMg4uT3Ro",
          "ZXJVc2VySW5mbyJ1ChlQQl9Ob3RpZnlPdGhlckVudGVyUEtSb29tEhIKCmVu",
          "dGVyX3R5cGUYASABKAUSEQoJZ29sZF90eXBlGAIgASgFEhIKCnJvb21faW5k",
          "ZXgYAyABKAMSHQoFb3RoZXIYBCABKAsyDi5PdGhlclVzZXJJbmZvIlEKFVBC",
          "X0xlYXZlUEtSb29tUmVxdWVzdBIRCglyb29tX3R5cGUYASABKAUSEQoJZ29s",
          "ZF90eXBlGAIgASgFEhIKCnJvb21faW5kZXgYAyABKAUiYgoWUEJfTGVhdmVQ",
          "S1Jvb21SZXNwb25zZRIOCgZyZXN1bHQYASABKAUSEQoJcm9vbV90eXBlGAIg",
          "ASgFEhEKCWdvbGRfdHlwZRgDIAEoBRISCgpyb29tX2luZGV4GAQgASgFIkYK",
          "GVBCX05vdGlmeU90aGVyTGVhdmVQS1Jvb20SEgoKc2VhdF9pbmRleBgBIAEo",
          "BRIVCg1sZWF2ZV91c2VyX2lkGAIgASgFImYKF1BCX0xhdW5jaFRvcnBlZG9S",
          "ZXF1ZXN0EhIKCnRvcnBlZG9faWQYASABKAUSFAoMdG9ycGVkb190eXBlGAIg",
          "ASgFEiEKCHBvc2l0aW9uGAMgASgLMg8uQnVsbGV0UG9zaXRpb24idwoYUEJf",
          "TGF1bmNoVG9ycGVkb1Jlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRISCgp0b3Jw",
          "ZWRvX2lkGAIgASgFEhQKDHRvcnBlZG9fdHlwZRgDIAEoBRIhCghwb3NpdGlv",
          "bhgEIAEoCzIPLkJ1bGxldFBvc2l0aW9uInsKG1BCX05vdGlmeU90aGVyTGF1",
          "bmNoVG9ycGVkbxIPCgd1c2VyX2lkGAEgASgFEhIKCnRvcnBlZG9faWQYAiAB",
          "KAUSFAoMdG9ycGVkb190eXBlGAMgASgFEiEKCHBvc2l0aW9uGAQgASgLMg8u",
          "QnVsbGV0UG9zaXRpb24iLAoHUEJfRmlzaBIQCghncm91cF9pZBgBIAEoBRIP",
          "CgdmaXNoX2lkGAIgASgFImUKGFBCX1RvcnBlZG9FeHBsb2RlUmVxdWVzdBIS",
          "Cgp0b3JwZWRvX2lkGAEgASgFEhQKDHRvcnBlZG9fdHlwZRgCIAEoBRIfCg10",
          "YXJnZXRfZmlzaGVzGAMgAygLMgguUEJfRmlzaCJUCg1QQl9GaXNoUmV3YXJk",
          "EhAKCGdyb3VwX2lkGAEgASgFEg8KB2Zpc2hfaWQYAiABKAUSIAoKcHJvcGVy",
          "dGllcxgDIAMoCzIMLlBCX1Byb3BlcnR5InYKGVBCX1RvcnBlZG9FeHBsb2Rl",
          "UmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEhIKCnRvcnBlZG9faWQYAiABKAUS",
          "FAoMdG9ycGVkb190eXBlGAMgASgFEh8KB3Jld2FyZHMYBCADKAsyDi5QQl9G",
          "aXNoUmV3YXJkInoKHFBCX05vdGlmeU90aGVyVG9ycGVkb0V4cGxvZGUSDwoH",
          "dXNlcl9pZBgBIAEoBRISCgp0b3JwZWRvX2lkGAIgASgFEhQKDHRvcnBlZG9f",
          "dHlwZRgDIAEoBRIfCgdyZXdhcmRzGAQgAygLMg4uUEJfRmlzaFJld2FyZCJK",
          "ChBQQl9QcmVwYXJlUEtHYW1lEg8KB3VzZXJfaWQYASABKAUSEQoJcm9vbV90",
          "eXBlGAIgASgFEhIKCnJvb21faW5kZXgYAyABKAUiUAoWUEJfQ2FuY2VsUHJl",
          "cGFyZVBLR2FtZRIPCgd1c2VyX2lkGAEgASgFEhEKCXJvb21fdHlwZRgCIAEo",
          "BRISCgpyb29tX2luZGV4GAMgASgFIikKFFBCX1ByZVN0YXJ0Q291bnRkb3du",
          "EhEKCWNvdW50ZG93bhgBIAEoBSJPChdQQl9EaXN0cmlidXRlUEtQcm9wZXJ0",
          "eRISCgpyb29tX2luZGV4GAEgASgFEiAKCnByb3BlcnRpZXMYAiADKAsyDC5Q",
          "Ql9Qcm9wZXJ0eSI9Cg1QQl9QbGF5ZXJJbmZvEg8KB3VzZXJfaWQYASABKAUS",
          "DQoFcG9pbnQYAiABKAUSDAoEZ29sZBgDIAEoAyIxChFQQl9Hb2xkR2FtZVJl",
          "c3VsdBIcCgRpbmZvGAEgAygLMg4uUEJfUGxheWVySW5mbyIsChJQQl9Qb2lu",
          "dEdhbWVSZXN1bHQSFgoOd2lubmVyX3VzZXJfaWQYASADKAUiQAoXUEJfUG9p",
          "bnRHYW1lUm91bmRSZXN1bHQSDQoFcm91bmQYASABKAUSFgoOd2lubmVyX3Vz",
          "ZXJfaWQYAiABKAUixQEKEFBCX090aGVyR2FtZUluZm8SEgoKc2VhdF9pbmRl",
          "eBgBIAEoBRIOCgZnZW5kZXIYAiABKAUSEAoIbmlja25hbWUYAyABKAkSDgoG",
          "YXZhdGFyGAQgASgJEg8KB3VzZXJfaWQYBSABKAUSEQoJdmlwX2xldmVsGAYg",
          "ASgFEiAKCnByb3BlcnRpZXMYByADKAsyDC5QQl9Qcm9wZXJ0eRIUCgxjYW5u",
          "b25fc3R5bGUYCCABKAUSDwoHZ2FtZV9pZBgJIAEoBSK9AQoYUEJfUmVjb25u",
          "ZWN0R2FtZVJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIRCglyb29tX3R5cGUY",
          "AiABKAUSEQoJZ29sZF90eXBlGAMgASgFEhIKCnJvb21faW5kZXgYBCABKAUS",
          "EgoKc2VhdF9pbmRleBgFIAEoBRIgCgpwcm9wZXJ0aWVzGAYgAygLMgwuUEJf",
          "UHJvcGVydHkSIQoGb3RoZXJzGAcgAygLMhEuUEJfT3RoZXJHYW1lSW5mbyJz",
          "ChVQQl9PdGhlclJlY29ubmVjdEdhbWUSEQoJcm9vbV90eXBlGAEgASgFEhEK",
          "CWdvbGRfdHlwZRgCIAEoBRISCgpyb29tX2luZGV4GAMgASgFEiAKBW90aGVy",
          "GAQgASgLMhEuUEJfT3RoZXJHYW1lSW5mbyJpChpQQl9DcmVhdGVGcmllbmRS",
          "b29tUmVxdWVzdBIRCglyb29tX3R5cGUYASABKAUSEQoJZ29sZF90eXBlGAIg",
          "ASgFEhEKCXRpbWVfdHlwZRgDIAEoBRISCgpyb3VuZF90eXBlGAQgASgFIl8K",
          "G1BCX0NyZWF0ZUZyaWVuZFJvb21SZXNwb25zZRIOCgZyZXN1bHQYASABKAUS",
          "EgoKc2VhdF9pbmRleBgCIAEoBRIcCgRyb29tGAMgASgLMg4uUEJfUEtSb29t",
          "SW5mbyIvChlQQl9FbnRlckZyaWVuZFJvb21SZXF1ZXN0EhIKCnJvb21faW5k",
          "ZXgYASABKAUimgEKGlBCX0VudGVyRnJpZW5kUm9vbVJlc3BvbnNlEg4KBnJl",
          "c3VsdBgBIAEoBRISCgpzZWF0X2luZGV4GAIgASgFEhoKEnJvb21fb3duZXJf",
          "dXNlcl9pZBgDIAEoBRIcCgRyb29tGAQgASgLMg4uUEJfUEtSb29tSW5mbxIe",
          "CgZvdGhlcnMYBSADKAsyDi5PdGhlclVzZXJJbmZvImUKHVBCX05vdGlmeU90",
          "aGVyRW50ZXJGcmllbmRSb29tEhEKCXJvb21fdHlwZRgBIAEoBRISCgpyb29t",
          "X2luZGV4GAIgASgDEh0KBW90aGVyGAMgASgLMg4uT3RoZXJVc2VySW5mbyJC",
          "ChlQQl9MZWF2ZUZyaWVuZFJvb21SZXF1ZXN0EhEKCXJvb21fdHlwZRgBIAEo",
          "BRISCgpyb29tX2luZGV4GAIgASgFIlMKGlBCX0xlYXZlRnJpZW5kUm9vbVJl",
          "c3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIRCglyb29tX3R5cGUYAiABKAUSEgoK",
          "cm9vbV9pbmRleBgDIAEoBSJKCh1QQl9Ob3RpZnlPdGhlckxlYXZlRnJpZW5k",
          "Um9vbRISCgpzZWF0X2luZGV4GAEgASgFEhUKDWxlYXZlX3VzZXJfaWQYAiAB",
          "KAUiRgoSUEJfVXNlclJvdW5kUmVzdWx0Eg8KB3VzZXJfaWQYASABKAUSCwoD",
          "c3VtGAIgASgDEhIKCnJvdW5kX251bXMYAyADKAUiUgoXUEJfRnJpZW5kUm9v",
          "bUdhbWVSZXN1bHQSEwoLcmVzdWx0X3R5cGUYASABKAUSIgoFdXNlcnMYAiAD",
          "KAsyEy5QQl9Vc2VyUm91bmRSZXN1bHQiRAobUEJfRGlzYmFuZEZyaWVuZFJv",
          "b21SZXF1ZXN0EhEKCXJvb21fdHlwZRgBIAEoBRISCgpyb29tX2luZGV4GAIg",
          "ASgFIlUKHFBCX0Rpc2JhbmRGcmllbmRSb29tUmVzcG9uc2USDgoGcmVzdWx0",
          "GAEgASgFEhEKCXJvb21fdHlwZRgCIAEoBRISCgpyb29tX2luZGV4GAMgASgF",
          "IkMKGlBCX05vdGlmeURpc2JhbmRGcmllbmRSb29tEhEKCXJvb21fdHlwZRgB",
          "IAEoBRISCgpyb29tX2luZGV4GAIgASgFIj4KElBCX05vdGlmeVJlZFBhY2tl",
          "dBIRCglwYWNrZXRfaWQYASABKAMSFQoNY29uc3VtZWRfZ29sZBgCIAEoAyIs",
          "ChdQQl9PcGVuUmVkUGFja2V0UmVxdWVzdBIRCglwYWNrZXRfaWQYASABKAMi",
          "WAoYUEJfT3BlblJlZFBhY2tldFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIR",
          "CglwYWNrZXRfaWQYAiABKAMSGQoRcmVkX3BhY2tldF90aWNrZXQYAyABKAMi",
          "PgobUEJfR2V0UmVkUGFja2V0TGlzdFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEo",
          "BRIPCgdwYWNrZXRzGAIgAygDIkkKG1BCX05vdGlmeU90aGVyT3BlblJlZFBh",
          "Y2tldBIPCgd1c2VyX2lkGAEgASgFEhkKEXJlZF9wYWNrZXRfdGlja2V0GAIg",
          "ASgDIjEKHFBCX0VudGVyUmVkUGFja2V0Um9vbVJlcXVlc3QSEQoJcm9vbV90",
          "eXBlGAEgASgFIrQBCh1QQl9FbnRlclJlZFBhY2tldFJvb21SZXNwb25zZRIO",
          "CgZyZXN1bHQYASABKAUSEQoJcm9vbV90eXBlGAIgASgFEhIKCnJvb21faW5k",
          "ZXgYAyABKAMSEgoKc2VhdF9pbmRleBgEIAEoBRIMCgRnb2xkGAUgASgDEh4K",
          "Bm90aGVycxgGIAMoCzIOLk90aGVyVXNlckluZm8SGgoScm9vbV9jb25zdW1l",
          "ZF9nb2xkGAcgASgDImgKIFBCX05vdGlmeU90aGVyRW50ZXJSZWRQYWNrZXRS",
          "b29tEhEKCXJvb21fdHlwZRgBIAEoBRISCgpyb29tX2luZGV4GAIgASgDEh0K",
          "BW90aGVyGAMgASgLMg4uT3RoZXJVc2VySW5mbyJGChxQQl9MZWF2ZVJlZFBh",
          "Y2tldFJvb21SZXF1ZXN0EhIKCmxlYXZlX3R5cGUYASABKAUSEgoKcm9vbV9p",
          "bmRleBgCIAEoBSJRCh1QQl9MZWF2ZVJlZFBhY2tldFJvb21SZXNwb25zZRIO",
          "CgZyZXN1bHQYASABKAUSDAoEZ29sZBgCIAEoAxISCgpyb29tX2luZGV4GAMg",
          "ASgFIkcKIFBCX05vdGlmeU90aGVyTGVhdmVSZWRQYWNrZXRSb29tEhIKCnNl",
          "YXRfaW5kZXgYASABKAUSDwoHdXNlcl9pZBgCIAEoBSJ3ChxQQl9PdGhlclVu",
          "bG9ja0Nhbm5vbk11bHRpcGxlEg8KB3VzZXJfaWQYASABKAUSGwoTbWF4X2Nh",
          "bm5vbl9tdWx0aXBsZRgCIAEoBRIUCgxuZWVkX2RpYW1vbmQYAyABKAUSEwoL",
          "cmV3YXJkX2dvbGQYBCABKAUiOQoeUEJfVW5sb2NrQ2Fubm9uTXVsdGlwbGVS",
          "ZXF1ZXN0EhcKD3RhcmdldF9tdWx0aXBsZRgBIAEoBSJ6Ch9QQl9VbmxvY2tD",
          "YW5ub25NdWx0aXBsZVJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIcChRjdXJy",
          "ZW50X21heF9tdWx0aXBsZRgCIAEoBRIUCgxuZWVkX2RpYW1vbmQYAyABKAUS",
          "EwoLcmV3YXJkX2dvbGQYBCABKAUiOQocUEJfQmVnaW5uZXJUYXNrUmV3YXJk",
          "UmVxdWVzdBIZChFiZWdpbm5lcl9jdXJfdGFzaxgBIAEoBSJqChxQQl9Ob3Rp",
          "ZnlPdGhlckJlZ2lubmVyUmV3YXJkEg8KB3VzZXJfaWQYASABKAUSGQoRYmVn",
          "aW5uZXJfY3VyX3Rhc2sYAiABKAUSHgoIcHJvcGVydHkYAyABKAsyDC5QQl9Q",
          "cm9wZXJ0eSJsCh1QQl9CZWdpbm5lclRhc2tSZXdhcmRSZXNwb25zZRIOCgZy",
          "ZXN1bHQYASABKAUSGQoRYmVnaW5uZXJfY3VyX3Rhc2sYAiABKAUSIAoKcHJv",
          "cGVydGllcxgDIAEoCzIMLlBCX1Byb3BlcnR5IloKHVBCX05vdGlmeUJlZ2lu",
          "bmVyVGFza1Byb2dyZXNzEhkKEWJlZ2lubmVyX2N1cl90YXNrGAEgASgFEh4K",
          "FmJlZ2lubmVyX3Rhc2tfcHJvZ3Jlc3MYAiABKAUiUwoXUEJfQmVnaW5uZXJU",
          "YXNrUmVzcG9uc2USHQoVYmVnaW5uZXJfdGFza19kaWFtb25kGAEgASgFEhkK",
          "EWJlZ2lubmVyX2N1cl90YXNrGAIgASgFIvMBCgtQQl9HYW1lUmFuaxIPCgd1",
          "c2VyX2lkGAEgASgDEgwKBGdvbGQYAiABKAMSCwoDdmlwGAMgASgFEhAKCG5p",
          "Y2tuYW1lGAQgASgJEhIKCmF2YXRhcl91cmwYBSABKAkSDQoFbGV2ZWwYBiAB",
          "KAUSDgoGZ2VuZGVyGAcgASgFEhQKDG1heF9tdWx0aXBsZRgIIAEoBRIPCgdn",
          "YW1lX2lkGAkgASgFEg8KB2R1YW53ZWkYCiABKAUSEwoLZHVhbndlaXJhbmsY",
          "CyABKAUSEAoIeGluZ3hpbmcYDCABKAUSFAoMc2hhbmdMaXVTaHVpGA0gASgD",
          "IkEKE1BCX0dhbWVSYW5rUmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEhoKBHJh",
          "bmsYAiADKAsyDC5QQl9HYW1lUmFuayIiChJQQl9HYW1lUmFua1JlcXVlc3QS",
          "DAoEdHlwZRgBIAEoBSKAAQoQUEJfTm90aWZ5TGV2ZWxVcBIPCgd1c2VyX2lk",
          "GAEgASgFEg0KBWxldmVsGAIgASgFEhIKCmV4cGVyaWVuY2UYAyABKAUSFgoO",
          "bmV4dF9sZXZlbF9leHAYBCABKAUSIAoKcHJvcGVydGllcxgFIAMoCzIMLlBC",
          "X1Byb3BlcnR5IkoKElBCX05vdGlmeVN0YXJ0R2lmdBISCgpkYXlfb2Zmc2V0",
          "GAEgASgFEiAKCnByb3BlcnRpZXMYAiADKAsyDC5QQl9Qcm9wZXJ0eSIsChZQ",
          "Ql9HZXRTdGFydEdpZnRSZXF1ZXN0EhIKCmRheV9vZmZzZXQYASABKAUiXwoX",
          "UEJfR2V0U3RhcnRHaWZ0UmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEhIKCmRh",
          "eV9vZmZzZXQYAiABKAUSIAoKcHJvcGVydGllcxgDIAMoCzIMLlBCX1Byb3Bl",
          "cnR5IikKFlBCX0FjY2VwdEZyaWVuZFJlcXVlc3QSDwoHdXNlcl9pZBgBIAEo",
          "BSI6ChdQQl9BY2NlcHRGcmllbmRSZXNwb25zZRIOCgZyZXN1bHQYASABKAUS",
          "DwoHdXNlcl9pZBgCIAEoBSImChNQQl9BZGRGcmllbmRSZXF1ZXN0Eg8KB3Vz",
          "ZXJfaWQYASABKAUiNwoUUEJfQWRkRnJpZW5kUmVzcG9uc2USDgoGcmVzdWx0",
          "GAEgASgFEg8KB3VzZXJfaWQYAiABKAUiKQoWUEJfRGVsZXRlRnJpZW5kUmVx",
          "dWVzdBIPCgd1c2VyX2lkGAEgASgFIjoKF1BCX0RlbGV0ZUZyaWVuZFJlc3Bv",
          "bnNlEg4KBnJlc3VsdBgBIAEoBRIPCgd1c2VyX2lkGAIgASgFIqkBCglQQl9G",
          "cmllbmQSDwoHdXNlcl9pZBgBIAEoBRIQCghuaWNrbmFtZRgCIAEoCRIOCgZh",
          "dmF0YXIYAyABKAkSDgoGZ2VuZGVyGAQgASgFEg0KBWxldmVsGAUgASgFEhEK",
          "CXZpcF9sZXZlbBgGIAEoBRIOCgZzdGF0dXMYByABKAUSFgoOaGFzX2dpdmVu",
          "X2dvbGQYCCABKAgSDwoHZ2FtZV9pZBgJIAEoBSJdChhQQl9HZXRGcmllbmRM",
          "aXN0UmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEhQKDGZyaWVuZF9saW1pdBgC",
          "IAEoBRIbCgdmcmllbmRzGAMgAygLMgouUEJfRnJpZW5kIkoKG1BCX0dldEFk",
          "ZEZyaWVuZExpc3RSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSGwoHZnJpZW5k",
          "cxgCIAMoCzIKLlBCX0ZyaWVuZCItChpQQl9FdmVyeWRheUFjdGl2aXR5UmVx",
          "dWVzdBIPCgd0YXNrX2lkGAEgAygFIlAKG1BCX0V2ZXJ5ZGF5QWN0aXZpdHlS",
          "ZXNwb25zZRIOCgZyZXN1bHQYASABKAUSDwoHdGFza19pZBgCIAMoBRIQCghh",
          "Y3Rpdml0eRgDIAEoBSIzCh9QQl9FdmVyeWRheUFjdGl2aXR5QXdhcmRSZXF1",
          "ZXN0EhAKCGFjdGl2aXR5GAEgASgFImQKIFBCX0V2ZXJ5ZGF5QWN0aXZpdHlB",
          "d2FyZFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIQCghhY3Rpdml0eRgCIAEo",
          "BRIeCghwcm9wZXJ0eRgDIAMoCzIMLlBCX1Byb3BlcnR5IjwKF1BCX0V2ZXJ5",
          "ZGF5VGFza1Byb2dyZXNzEg8KB3Rhc2tfaWQYASABKAUSEAoIcHJvZ3Jlc3MY",
          "AiABKAUiegofUEJfRXZlcnlkYXlUYXNrUHJvZ3Jlc3NSZXNwb25zZRIOCgZy",
          "ZXN1bHQYASABKAUSEAoIYWN0aXZpdHkYAiABKAUSDQoFc3RhdGUYAyADKAUS",
          "JgoEdGFzaxgEIAMoCzIYLlBCX0V2ZXJ5ZGF5VGFza1Byb2dyZXNzIk4KG1BC",
          "X0dpdmVPdGhlclByb3BlcnR5UmVxdWVzdBIPCgd1c2VyX2lkGAEgASgFEh4K",
          "CHByb3BlcnR5GAIgASgLMgwuUEJfUHJvcGVydHkiXwocUEJfR2l2ZU90aGVy",
          "UHJvcGVydHlSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSDwoHdXNlcl9pZBgC",
          "IAEoBRIeCghwcm9wZXJ0eRgDIAEoCzIMLlBCX1Byb3BlcnR5IjYKIVBCX1Jl",
          "ZFBhY2tldERpc3RyaWJ1dGlvbkNvdW50ZG93bhIRCgljb3VudGRvd24YASAB",
          "KAUiKgoXUEJfUmVqZWN0RnJpZW5kUmVzcG9uc2USDwoHdXNlcl9pZBgBIAEo",
          "BSIpChZQQl9SZWplY3RGcmllbmRSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAUi",
          "YwobUEJfUHVyY2hhc2VQcm9wZXJ0eVJlc3BvbnNlEg4KBnJlc3VsdBgBIAEo",
          "BRIeCghwcm9wZXJ0eRgCIAEoCzIMLlBCX1Byb3BlcnR5EhQKDGRpYW1vbmRf",
          "Y29zdBgDIAEoAyI8ChpQQl9QdXJjaGFzZVByb3BlcnR5UmVxdWVzdBIeCghw",
          "cm9wZXJ0eRgBIAEoCzIMLlBCX1Byb3BlcnR5Im0KB1BCX01haWwSDwoHbWFp",
          "bF9pZBgBIAEoAxINCgV0aXRsZRgCIAEoCRIPCgdjb250ZW50GAMgASgJEhEK",
          "CXNlbmRfdGltZRgEIAEoAxIeCghwcm9wZXJ0eRgFIAMoCzIMLlBCX1Byb3Bl",
          "cnR5IjwKElBCX0dldE1haWxSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSFgoE",
          "bWFpbBgCIAMoCzIILlBCX01haWwiLAoZUEJfRGVsTWFpbEdldEF3YXJkUmVx",
          "dWVzdBIPCgdtYWlsX2lkGAEgAygDIl0KGlBCX0RlbE1haWxHZXRBd2FyZFJl",
          "c3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIPCgdtYWlsX2lkGAIgAygDEh4KCHBy",
          "b3BlcnR5GAMgAygLMgwuUEJfUHJvcGVydHkiiQEKDVBCX0dpdmVSZWNvcmQS",
          "DwoHZ2l2ZV9pZBgBIAEoAxIOCgZ1c2VyaWQYAiABKAUSHgoIcHJvcGVydHkY",
          "AyABKAsyDC5QQl9Qcm9wZXJ0eRIRCgl0aW1lc3RhbXAYBCABKAMSEAoIbmlj",
          "a25hbWUYBSABKAkSEgoKYXZhdGFyX3VybBgGIAEoCSJHChVQQl9HaXZlUmVj",
          "b3JkUmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEh4KBnJlY29yZBgCIAMoCzIO",
          "LlBCX0dpdmVSZWNvcmQiJAoRUEJfR2V0R2l2ZVJlcXVlc3QSDwoHZ2l2ZV9p",
          "ZBgBIAMoAyJEChJQQl9HZXRHaXZlUmVzcG9uc2USDgoGcmVzdWx0GAEgASgF",
          "Eh4KCHByb3BlcnR5GAIgAygLMgwuUEJfUHJvcGVydHkiYAoZUEJfSW9zUGF5",
          "UHJvcGVydHlSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSHgoIcHJvcGVydHkY",
          "AiABKAsyDC5QQl9Qcm9wZXJ0eRITCgtmaXJzdF9hd2FyZBgDIAEoBSJfChhQ",
          "Ql9Jb3NQYXlQcm9wZXJ0eVJlcXVlc3QSDgoGcGF5X2lkGAEgASgDEhIKCnBy",
          "b2R1Y3RfaWQYAiABKAUSEQoJb3JkZXJfbnVtGAMgASgJEgwKBHBrZXkYBCAB",
          "KAkiKAoJUEJfU2lnbkluEgsKA2RheRgBIAEoBRIOCgZzdGF0dXMYAiABKAUi",
          "JAoVUEJfU2lnbkluQXdhcmRSZXF1ZXN0EgsKA2RheRgBIAEoBSJlChZQQl9T",
          "aWduSW5Bd2FyZFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIbCgdzaWduX2lu",
          "GAIgASgLMgouUEJfU2lnbkluEh4KCHByb3BlcnR5GAMgAygLMgwuUEJfUHJv",
          "cGVydHkiMwobUEJfQ2hhbmdlQ2Fubm9uU3R5bGVSZXF1ZXN0EhQKDGNhbm5v",
          "bl9zdHlsZRgBIAEoBSJMChxQQl9DaGFuZ2VDYW5ub25TdHlsZVJlc3BvbnNl",
          "Eg4KBnJlc3VsdBgBIAEoBRIcChRjdXJyZW50X2Nhbm5vbl9zdHlsZRgCIAEo",
          "BSJKChlQQl9PdGhlckNoYW5nZUNhbm5vblN0eWxlEg8KB3VzZXJfaWQYASAB",
          "KAUSHAoUY3VycmVudF9jYW5ub25fc3R5bGUYAiABKAUiNwodUEJfTm90aWZ5",
          "RGVjcmVhc2VDb25zdW1lZEdvbGQSFgoOZGVjcmVhc2VkX2dvbGQYASABKAMi",
          "KAoVUEJfR2V0VXNlckluZm9SZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAUiRgoW",
          "UEJfR2V0VXNlckluZm9SZXNwb25zZRIOCgZyZXN1bHQYASABKAUSHAoEdXNl",
          "chgCIAEoCzIOLk90aGVyVXNlckluZm8iOgoWUEJfU2VsbFByb3BlcnR5UmVx",
          "dWVzdBIgCgpwcm9wZXJ0aWVzGAEgAygLMgwuUEJfUHJvcGVydHkiWQoXUEJf",
          "U2VsbFByb3BlcnR5UmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEiAKCnByb3Bl",
          "cnRpZXMYAiADKAsyDC5QQl9Qcm9wZXJ0eRIMCgRnb2xkGAMgASgDImUKDlBC",
          "X05vdGlmeVRvcFVwEg8KB3VzZXJfaWQYASABKAUSDQoFbW9uZXkYAiABKAUS",
          "EwoLY3VycmVudF92aXAYAyABKAUSHgoIcHJvcGVydHkYBCABKAsyDC5QQl9Q",
          "cm9wZXJ0eSI8ChhQQl9Ob3RpZnlSb29tQ2hhdE1lc3NhZ2USDwoHdXNlcl9p",
          "ZBgBIAEoBRIPCgdtZXNzYWdlGAIgASgJIiUKElBCX09wZW5QYWNrUmVxdWVz",
          "dBIPCgdwYWNrX2lkGAEgASgFIlgKE1BCX09wZW5QYWNrUmVzcG9uc2USDgoG",
          "cmVzdWx0GAEgASgFEg8KB3BhY2tfaWQYAiABKAUSIAoKcHJvcGVydGllcxgD",
          "IAMoCzIMLlBCX1Byb3BlcnR5Ik0KGVBCX0dldE1vbnRobHlQYWNrUmVzcG9u",
          "c2USDgoGcmVzdWx0GAEgASgFEiAKCnByb3BlcnRpZXMYAiADKAsyDC5QQl9Q",
          "cm9wZXJ0eSIxCh5QQl9Ccm9hZGNhc3RVc2VyTWVzc2FnZVJlcXVlc3QSDwoH",
          "Y29udGVudBgBIAEoCSIxCh9QQl9Ccm9hZGNhc3RVc2VyTWVzc2FnZVJlc3Bv",
          "bnNlEg4KBnJlc3VsdBgBIAEoBSI7ChpQQl9Ob3RpZnlCcm9hZGNhc3RHYW1l",
          "SW5mbxIMCgR0eXBlGAEgASgFEg8KB2NvbnRlbnQYAiABKAkiQgodUEJfTm90",
          "aWZ5QnJvYWRjYXN0VXNlck1lc3NhZ2USEAoIbmlja25hbWUYASABKAkSDwoH",
          "Y29udGVudBgCIAEoCSJOChlQQl9HZXRCYW5rTWVzc2FnZVJlc3BvbnNlEg4K",
          "BnJlc3VsdBgBIAEoBRIhCghtZXNzYWdlcxgCIAMoCzIPLlBCX0JhbmtNZXNz",
          "YWdlIqgBCg5QQl9CYW5rTWVzc2FnZRIMCgR0eXBlGAEgASgFEg8KB3VzZXJf",
          "aWQYAiABKAMSEAoIbmlja25hbWUYAyABKAkSEQoJZ2lmdF9nb2xkGAQgASgD",
          "EhIKCmdpZnRfY291bnQYBSABKAUSFQoNY2hhcm1fY2hhbmdlZBgGIAEoAxIU",
          "CgxiYW5rX2NoYW5nZWQYByABKAMSEQoJZGF0ZV90aW1lGAggASgDIjQKFFBC",
          "X05vdGlmeUJhbmtNZXNzYWdlEhwKA21zZxgBIAEoCzIPLlBCX0JhbmtNZXNz",
          "YWdlIjoKF1BCX0V4Y2hhbmdlQ2hhcm1SZXF1ZXN0Eg0KBWNoYXJtGAEgASgD",
          "EhAKCHBhc3N3b3JkGAIgASgJIl0KGFBCX0V4Y2hhbmdlQ2hhcm1SZXNwb25z",
          "ZRIOCgZyZXN1bHQYASABKAUSDQoFY2hhcm0YAiABKAMSEQoJYmFua19nb2xk",
          "GAMgASgDEg8KB2Vycl9tc2cYBCABKAkiMgoUUEJfQmFua0FjY2Vzc1JlcXVl",
          "c3QSDAoEZ29sZBgBIAEoAxIMCgRwc3dkGAIgASgJIkYKFVBCX0JhbmtBY2Nl",
          "c3NSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSDAoEZ29sZBgCIAEoAxIPCgdl",
          "cnJfbXNnGAMgASgJIlsKE1BCX0dpdmVDaGFybVJlcXVlc3QSDwoHdXNlcl9p",
          "ZBgBIAEoAxIRCglnaWZ0X2dvbGQYAiABKAMSEgoKZ2lmdF9jb3VudBgDIAEo",
          "BRIMCgRwc3dkGAQgASgJIksKFFBCX0dpdmVDaGFybVJlc3BvbnNlEg4KBnJl",
          "c3VsdBgBIAEoBRIQCghnb2xkX2RlYxgCIAEoAxIRCgljaGFybV9pbmMYAyAB",
          "KAMiKQoVUEJfU2V0QmFua1Bzd2RSZXF1ZXN0EhAKCHBhc3N3b3JkGAEgASgJ",
          "IigKFlBCX1NldEJhbmtQc3dkUmVzcG9uc2USDgoGcmVzdWx0GAEgASgFIjIK",
          "ElBCX05vdGlmeUdpdmVDaGFybRIcCgNtc2cYASABKAsyDy5QQl9CYW5rTWVz",
          "c2FnZSKYAQoXUEJfQ0xMb2dpblBhc3N3ZFJlcXVlc3QSEAoIYWNjb3VudHMY",
          "ASABKAkSDgoGcGFzc3dkGAIgASgJEhYKDm1hY2hpbmVfc2VyaWFsGAMgASgJ",
          "EhMKC2RldmllY190eXBlGAQgASgFEhYKDnZlcnNpb25fbnVtYmVyGAUgASgD",
          "EhYKDmNoYW5uZWxfbnVtYmVyGAYgASgDIssBChZQQl9DTExvZ2luVG9rZW5S",
          "ZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAMSDQoFdG9rZW4YAiABKAkSEgoKdG9r",
          "ZW5fdHlwZRgDIAEoBRIWCg5tYWNoaW5lX3NlcmlhbBgEIAEoCRITCgtkZXZp",
          "ZWNfdHlwZRgFIAEoBRIWCg52ZXJzaW9uX251bWJlchgGIAEoAxIWCg5jaGFu",
          "bmVsX251bWJlchgHIAEoAxIQCgh1c2VybmFtZRgIIAEoCRIOCgZhdmF0YXIY",
          "CSABKAkicAoUUEJfQ0xHaXZlR2lmdFJlcXVlc3QSEQoJZ2l2ZV90eXBlGAEg",
          "ASgFEhoKBGdpZnQYAiABKAsyDC5QQl9Qcm9wZXJ0eRISCgp0b19nYW1lX2lk",
          "GAMgASgFEhUKDXNlY29uZF9wYXNzd2QYBCABKAwigAEKFVBCX0NMR2l2ZUdp",
          "ZnRSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSEQoJZXJyb3JfbXNnGAIgASgJ",
          "EhEKCWdpdmVfdHlwZRgDIAEoBRIaCgRnaWZ0GAQgASgLMgwuUEJfUHJvcGVy",
          "dHkSFQoNY3VycmVudF9jb3VudBgFIAEoAyJLChpQQl9SZWxvYWRBc3NldElu",
          "Zm9SZXNwb25zZRIOCgZyZXN1bHQYASABKAUSHQoFcHJvcHMYAiADKAsyDi5Q",
          "Ql9Qcm9wZXJ0eUVzIj0KElBCX1Njcm9sbGluZ05vdGljZRIPCgdjb250ZW50",
          "GAEgASgJEhYKDmN5Y2xlX2ludGVydmFsGAIgASgFIkcKH1BCX05vdGlmeVNj",
          "cm9sbGluZ05vdGljZXNVcGRhdGUSJAoHbm90aWNlcxgBIAMoCzITLlBCX1Nj",
          "cm9sbGluZ05vdGljZSIpChZFeGNoYW5nZURpYW1vbmRSZXF1ZXN0Eg8KB2Rp",
          "YW1vbmQYASABKAMiRwoVTm90aWZ5RXhjaGFuZ2VEaWFtb25kEg8KB3VzZXJf",
          "aWQYASABKAMSDwoHZGlhbW9uZBgCIAEoAxIMCgRnb2xkGAMgASgDIkgKF0V4",
          "Y2hhbmdlRGlhbW9uZFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIPCgdkaWFt",
          "b25kGAIgASgDEgwKBGdvbGQYAyABKAMiYgoYQ0xNb2RpZnlTZWNQYXNzd2RS",
          "ZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAMSDQoFdG9rZW4YAiABKAkSEgoKdG9r",
          "ZW5fdHlwZRgDIAEoBRISCgpuZXdfcGFzc3dkGAQgASgJIi4KFkdldFBheVN0",
          "YXRlQnlOb1JlcXVlc3QSFAoMdHJhZGVfbnVtYmVyGAEgASgJIk4KF0dldFBh",
          "eVN0YXRlQnlOb1Jlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIUCgx0cmFkZV9u",
          "dW1iZXIYAiABKAkSDQoFc3RhdGUYAyABKAUiSAoZR2V0Rmlyc3RQYXlSZXdh",
          "cmRSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSGwoFcHJvcHMYAiADKAsyDC5Q",
          "Ql9Qcm9wZXJ0eSLPAQoWQ0xMb2dpblRoYWlsYW5kUmVxdWVzdBIQCgh1bmlv",
          "bl9pZBgBIAEoCRIWCg5tYWNoaW5lX3NlcmlhbBgCIAEoCRITCgtkZXZpY2Vf",
          "dHlwZRgDIAEoBRIWCg52ZXJzaW9uX251bWJlchgEIAEoAxIWCg5jaGFubmVs",
          "X251bWJlchgFIAEoAxIQCghuaWNrbmFtZRgGIAEoCRISCgphdmF0YXJfdXJs",
          "GAcgASgJEg4KBmdlbmRlchgIIAEoBRIQCgh1c2VybmFtZRgJIAEoCSJZChdD",
          "TExvZ2luVGhhaWxhbmRSZXNwb25zZRIeCgNyZXMYASABKAsyES5QQl9Mb2dp",
          "blJlc3BvbnNlEg0KBXRva2VuGAIgASgMEg8KB2FjY291bnQYAyABKAwiJQoS",
          "UmV0dXJuUm9ib3RSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAUiQAoQR2V0Um9i",
          "b3RSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSHAoEdXNlchgCIAEoCzIOLk90",
          "aGVyVXNlckluZm8iZAobTm90aWZ5T3RoZXJQdXJjaGFzZVByb3BlcnR5Eg8K",
          "B3VzZXJfaWQYASABKAUSHgoIcHJvcGVydHkYAiABKAsyDC5QQl9Qcm9wZXJ0",
          "eRIUCgxkaWFtb25kX2Nvc3QYAyABKAMiSAoZUEJfQ29udmVyc2lvbkNvZGV0",
          "UmVxdWVzdBIbChNDb252ZXJzaW9uQ29kZXRfbXNnGAEgASgMEg4KBnVzZXJJ",
          "RBgCIAEoBSJMChpQQl9Db252ZXJzaW9uQ29kZXRSZXNwb25zZRIPCgdlcnJD",
          "b2RlGAEgASgFEg4KBnByb3BJRBgCIAEoBRINCgVjb3VudBgDIAEoBSKGAQoX",
          "UEJfQ29udmVydEZvcm1hbEFjY291bnQSDgoGdXNlcklEGAEgASgFEgwKBGNv",
          "ZGUYAiABKAkSDgoGbW9iaWxlGAMgASgJEgsKA3B3ZBgEIAEoCRINCgV0b2tl",
          "bhgFIAEoCRIOCgZwcm9wSUQYBiABKAUSEQoJcHJvcENvdW50GAcgASgFIlUK",
          "D1BCX1N5c3RlbVJld2FyZBISCgpyZXN1bHRDb2RlGAEgASgFEg4KBnByb3BJ",
          "RBgCIAEoBRIRCglwcm9wQ291bnQYAyABKAUSCwoDbXNnGAQgASgJImkKDVBC",
          "X01vZGlmeU5pY2sSDgoGdXNlcklEGAEgASgFEhEKCWxvZ2luVHlwZRgCIAEo",
          "BRIOCgZwcm9wSUQYAyABKAUSEQoJcHJvcENvdW50GAQgASgFEhIKCm1vZGlm",
          "eU5pY2sYBSABKAkiVQoUUEJfR2V0SGVscEdvZGxSZXdhcmQSDgoGdXNlcklE",
          "GAEgASgFEg4KBnRhc2tJRBgCIAEoBRIOCgZwcm9wSUQYAyABKAUSDQoFY291",
          "bnQYBCABKAUidQoTUEJfSGVscEdvbGRUYXNrRGF0YRISCgpyZXN1bHRDb2Rl",
          "GAEgASgFEg4KBnRhc2tJRBgCIAEoBRIOCgZuVmFsdWUYAyABKAUSDgoGcHJv",
          "cElEGAQgASgFEg0KBWNvdW50GAUgASgFEgsKA2RlYxgGIAEoCSJxChRQQl9S",
          "ZXRyb2FjdGl2ZVJlcXVlcxIOCgZ1c2VySUQYASABKAUSFwoPUmV0cm9hY3Rp",
          "dmVUeXBlGAIgASgFEg0KBXJlRGF5GAMgASgFEg4KBnByb3BJRBgEIAEoBRIR",
          "Cglwcm9wQ291bnQYBSABKAUiaQoaUEJfU2lnblJldHJvYWN0aXZlUmVzcG9u",
          "c2USDgoGcmVzdWx0GAEgASgFEhsKB3NpZ25faW4YAiABKAsyCi5QQl9TaWdu",
          "SW4SHgoIcHJvcGVydHkYAyADKAsyDC5QQl9Qcm9wZXJ0eSI9ChFHZXRCaW5k",
          "UGhvbmVTdGF0ZRITCgtpc0JpbmRQaG9uZRgBIAEoBRITCgtzdHJQaG9uZU51",
          "bRgCIAEoCSJnCgt1c2VQcm9wVGltZRIOCgZwcm9wSUQYASABKAUSEAoIcHJv",
          "cFR5cGUYAiABKAUSDwoHdXNlVGltZRgDIAEoAxISCgpyZW1haW5UaW1lGAQg",
          "ASgDEhEKCW5Qcm9wVGltZRgFIAEoBSIxChBVc2VQcm9wVGltZUFycmF5Eh0K",
          "B3VzZVByb3AYASADKAsyDC51c2VQcm9wVGltZSJSCg1Vc2VQcm9wVGltZUV4",
          "Eg4KBnVzZXJJRBgBIAEoBRISCgpyZXN1bHRDb2RlGAIgASgFEh0KB3VzZVBy",
          "b3AYAyABKAsyDC51c2VQcm9wVGltZSJaChVVc2VQcm9wVGltZUV4UmVzcG9u",
          "c2USDgoGdXNlcklEGAEgASgFEhIKCnJlc3VsdENvZGUYAiABKAUSHQoHdXNl",
          "UHJvcBgDIAEoCzIMLnVzZVByb3BUaW1lIkkKEERlbFVzZVByb3BUaW1lRXgS",
          "DgoGdXNlcklEGAEgASgFEhIKCnJlc3VsdENvZGUYAiABKAUSEQoJZGVsUHJv",
          "cElEGAMgASgFImwKElBCX1Jld2FyZFN0cnVjdHVyZRISCgpSZXdhcmRUeXBl",
          "GAEgASgFEg4KBlRhc2tJRBgCIAEoBRIRCglUYXNrVmFsdWUYAyABKAUSHwoJ",
          "cmV3YXJkUHJvGAQgAygLMgwuUEJfUHJvcGVydHkiNwoQUEJfUmV3YXJkQWxs",
          "RGF0YRIjCgZyZXdhcmQYASADKAsyEy5QQl9SZXdhcmRTdHJ1Y3R1cmUiSQoW",
          "REJHZXRNb250aGx5Q2FyZFJld2FyZBIZChFjYW5ub25tdWx0aXBsZW1heBgB",
          "IAEoBRIUCgxEcmFHb25yZXdhcmQYAiADKAUitgEKGkRCVG9wVXBNb250aGx5",
          "Q2FyZFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIWCg50b3RhbF9yZWNoYXJn",
          "ZRgCIAEoAxITCgtjdXJyZW50X3ZpcBgDIAEoBRIQCghjYXJkVHlwZRgEIAEo",
          "BRIOCgZ1c2VyaWQYBSABKAUSGQoRY2Fubm9ubXVsdGlwbGVtYXgYBiABKAUS",
          "HgoIcHJvcGVydHkYByADKAsyDC5QQl9Qcm9wZXJ0eSJKChdEQkdldFByZWZl",
          "cmVudGlhbFJld2FyZBIZChFjYW5ub25tdWx0aXBsZW1heBgBIAEoBRIUCgxE",
          "cmFHb25yZXdhcmQYAiADKAUitQEKGURCR2V0UHJlZmVyZW50aWFsUmVzcG9u",
          "c2USDgoGcmVzdWx0GAEgASgFEhYKDnRvdGFsX3JlY2hhcmdlGAIgASgDEhMK",
          "C2N1cnJlbnRfdmlwGAMgASgFEhAKCGNhcmRUeXBlGAQgASgFEg4KBnVzZXJp",
          "ZBgFIAEoBRIZChFjYW5ub25tdWx0aXBsZW1heBgGIAEoBRIeCghwcm9wZXJ0",
          "eRgHIAMoCzIMLlBCX1Byb3BlcnR5IkcKFnVzZUJ1eUNhbm5vbkJvdHRvbUlu",
          "Zm8SDwoHYnV5VHlwZRgBIAEoBRIMCgRnb2xkGAIgASgDEg4KBnJlc3VsdBgD",
          "IAEoBSJsChVFcXVpcG1lbnRDYW5ub25Cb3R0b20SFQoNRXF1aXBtZW50VHlw",
          "ZRgBIAEoBRIOCgZwcm9wSUQYAiABKAMSDgoGcmVzdWx0GAMgASgFEhwKFHJl",
          "bW92ZV9jYW5ub25fYm90dG9tGAQgASgFIkEKFUNoYW5nZV9GZW5TaGVuRmlz",
          "aF9JRBIKCgJpZBgBIAEoBRIcCgZ0YXJnZXQYAiADKAsyDC5QQl9Qcm9wZXJ0",
          "eSI0CgtNYW5tb25Db3VudBIPCgdsVXNlcklEGAEgASgDEhQKDG5NYW5tb25D",
          "b3VudBgCIAEoBSJuChFHZXRNYW5tb25DaGlwR29sZBIPCgdsVXNlcklEGAEg",
          "ASgDEg8KB2N1ckdvbGQYAiABKAMSDwoHblJlc3VsdBgDIAEoBRIQCghzaGlw",
          "R29sZBgEIAMoAxIUCgxuTWFubW9uQ291bnQYBSABKAUiwwEKDkNoaXBKZXR0",
          "b3JHb2xkEg8KB2xVc2VySUQYASABKAMSEAoIc2VsZkdvbGQYAiABKAMSEAoI",
          "bldpbkdvbGQYAyABKAMSEQoJY2hpcEluZGV4GAQgASgFEg8KB25SZXN1bHQY",
          "BSABKAUSEQoJbkNoYVZhbHVlGAYgASgDEgwKBG5UYXgYByABKAMSEAoIc2hv",
          "d3RpbWUYCCABKAUSFAoMbk1hbm1vbkNvdW50GAkgASgFEg8KB25CZWlTaHUY",
          "CiABKAEiaQoWR2V0TG9uZ1Jld2FyZFBvb2xDb3VudBIPCgdsVXNlcklEGAEg",
          "ASgDEg8KB25SZXN1bHQYAiABKAUSDQoFblR5cGUYAyABKAUSHgoWc2F2ZUxv",
          "bmdSZXdhcmRQb29sR29sZBgEIAMoAyJSChNHZXRNYW5tb25SZXdhcmRJbmZv",
          "Eg8KB25SZXN1bHQYASABKAUSKgoUc2F2ZU1hbm1vblJld2FyZEluZm8YAiAD",
          "KAsyDC5QQl9Qcm9wZXJ0eSLDAgoPTG9uZ0xpdVNodWlHb2xkEg8KB2xVc2Vy",
          "SUQYASABKAMSFAoMbExvbmdMaXVTaHVpGAIgASgDEhEKCWxUaW1lRGF0YRgD",
          "IAEoAxISCgpsTWFubW9uRXhwGAQgASgDEhcKD25TaGVuZ0ppRHVhbldlaRgF",
          "IAEoBRIZChFuSXNVc2VyVG9wVXBTdGF0ZRgGIAEoBRIfChduVHdvU2VsZWN0",
          "T25lVG9wVXBTdGF0ZRgHIAEoBRIgChhuVGhyZWVTZWxlY3RPbmVUb3BVcGRh",
          "dGUYCCABKAUSGQoRbkNoYW5nZUN1ckR1YW5XZWkYCSABKAUSEAoIbkN1clJh",
          "bmsYCiABKAUSDwoHbkN1ck1heBgLIAEoBRIUCgxuU2V2ZW5UYXNrSUQYDCAB",
          "KAUSFwoPblNldmVuVGFza1ZhbHVlGA0gASgDIlYKGEdldEZpc2hMdWNreURy",
          "YXdSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSDAoEdHlwZRgCIAEoBRIcCgRw",
          "cm9wGAMgAygLMg4uUEJfUHJvcGVydHlFeCJeChVMb25nQ2hhbmdlTGl1U2h1",
          "aVRpbWUSDwoHbFVzZXJJRBgBIAEoAxIQCghsRGlhbW9uZBgCIAEoBRIPCgdu",
          "UmV1c2x0GAMgASgFEhEKCW5UaW1lRGF0YRgEIAEoAyI/CgtDYW5jZWxTa2ls",
          "bBIPCgdsVXNlcklEGAEgASgDEg4KBm5TdGF0ZRgCIAEoBRIPCgdza2lsbElE",
          "GAMgASgFIoIBCgxVc2VyUmFua0luZm8SDwoHbFVzZXJJRBgBIAEoAxINCgVu",
          "UmFuaxgCIAEoBRILCgN2aXAYAyABKAUSEAoIbG9uZ0NhcmQYBCABKAUSDQoF",
          "bkdvbGQYBSABKAMSEgoKcmV3YXJkR29sZBgGIAEoAxIQCghuaWNrbmFtZRgH",
          "IAEoDCI4ChBNYW1vbk1heFdpbkNvdW50Eg8KB2x1c2VySUQYASABKAMSEwoL",
          "bWF4d2luQ291bnQYAiABKAUiMwoNUEJfUHJvcGVydHlFeBIVCg1wcm9wZXJ0",
          "eV90eXBlGAEgASgFEgsKA3N1bRgCIAEoAyJFCg5DaGFuZ2VVc2VyR29sZBIP",
          "CgdsVXNlcklEGAEgASgFEhIKCnByb3BlcnR5SUQYAiABKAUSDgoGbENvdW50",
          "GAMgASgDIjMKDVBCX1Byb3BlcnR5RXMSFQoNcHJvcGVydHlfdHlwZRgBIAEo",
          "BRILCgNzdW0YAiABKAMiYAoXTm90aWZ5Qm9zc1Jvb21NYXRjaEluZm8SDQoF",
          "blR5cGUYASABKAUSDwoHY29udGVudBgCIAEoDBIQCghzZWxmR29sZBgDIAEo",
          "AxITCgtyb29tQXJyYXlJRBgEIAMoBSJYCgxOb3RpZnlTaWduVXASDQoFblR5",
          "cGUYASABKAUSEgoKblJvb21JbmRleBgCIAEoBRIRCgluR2FtZVR5cGUYAyAB",
          "KAUSEgoKc2lnblVwR29sZBgEIAEoAyJTChpOb3RpZnlFbnRlckJvc3NSb29t",
          "TWVzc2FnZRINCgVuVHlwZRgBIAEoBRISCgpuUm9vbUluZGV4GAIgASgFEhIK",
          "Cm1vZGlmeU5pY2sYAyABKAwidgoUVXNlckJvc3NLaWxsUmFua0luZm8SDwoH",
          "bFVzZXJJRBgBIAEoAxINCgVuUmFuaxgCIAEoBRILCgN2aXAYAyABKAUSEAoI",
          "bG9uZ0NhcmQYBCABKAUSDQoFbkdvbGQYBSABKAMSEAoIbmlja25hbWUYBiAB",
          "KAwiXQoTVXBkYXRlQm9zc01hdGNoVGltZRIPCgdjaGFUaW1lGAEgASgDEhEK",
          "CXN0YXJ0VGltZRgCIAEoAxIPCgdlbmRUaW1lGAMgASgDEhEKCXJvb21JbmRl",
          "eBgEIAEoBSJKChFVc2VyUmFua0luZm9BcnJheRIkCg1yYW5rSW5mb0FycmF5",
          "GAEgAygLMg0uVXNlclJhbmtJbmZvEg8KB2NvbnRlbnQYAiABKAwigwIKEVBh",
          "aVdlaVNhaVJhbmtJbmZvEg4KBnJlc3VsdBgBIAEoBRIPCgdkdWFud2VpGAIg",
          "ASgFEg0KBW5yYW5rGAMgASgFEg8KB2lzVG9wVXAYBCABKAUSFQoNbW9udGhD",
          "YXJkdHlwZRgFIAEoBRIXCg9ib3NzbWF0Y2hkb3VibGUYBiABKAUSEgoKc2hl",
          "bnl1dGltZRgHIAEoAxIUCgxzaGFuZ1BhaU1pbmcYCCABKAUSEwoLbGlzaGl6",
          "dWlnYW8YCSABKAUSDQoFcWlTaHUYCiABKAUSEwoLYmVpcWl6dWlnYW8YCyAB",
          "KAUSGgoEcmFuaxgMIAMoCzIMLlBCX0dhbWVSYW5rIlcKE1JvbmdZdURpYW5U",
          "YW5na0luZm8SDgoGcmVzdWx0GAEgASgFEhQKDGhvdHByaXplcG9vbBgCIAEo",
          "AxIaCgRyYW5rGAMgAygLMgwuUEJfR2FtZVJhbmsikgEKEkdldFBhaVdlaVNh",
          "aVJld2FyZBITCgtyZXdhcmRJbmRleBgBIAEoBRITCgtyZXdhcmRTdGF0ZRgC",
          "IAEoBRIXCg9jdXJDYXRjaEZpc2hOdW0YAyABKAUSFwoPbWF4Q2F0Y2hGaXNo",
          "TnVtGAQgASgFEiAKCnJld2FyZERhdGEYBSADKAsyDC5QQl9Qcm9wZXJ0eSIv",
          "ChlQbGF5ZXJQYWlXZWlTYWlSZXdhcmRJbmZvEhIKCnJld2FyZExpc3QYASAD",
          "KAUidQoXR2V0VG9wVXBHaWZ0QmFnU3RhdGVOZXcSGAoQb25lX2dpZnRCYWdT",
          "dGF0ZRgBIAEoBRIeChZ0d29fc2VsZWN0X29uZUJhZ1N0YXRlGAIgASgFEiAK",
          "GHRocmVlX3NlbGVjdF9vbmVCYWdTdGF0ZRgDIAEoBSJaChFHZXRTZXZlbkRh",
          "eVJld2FyZBITCgtzZWxlY3RJbmRleBgBIAEoBRIPCgd1c2VyRGF5GAIgASgF",
          "Eh8KCXJld2FyZFBybxgDIAMoCzIMLlBCX1Byb3BlcnR5IsIBChBJbml0U2V2",
          "ZW5EYXlJbmZvEg4KBnJlc3VsdBgBIAEoBRIOCgZjdXJEYXkYAiABKAMSDwoH",
          "dXNlckRheRgDIAEoBRIUCgx1c2VyRGF5U3RhdGUYBCABKAUSDwoHdGFza0Rh",
          "eRgFIAEoBRIRCgl0YXNrVmFsdWUYBiABKAMSFAoMdGFza0RheVN0YXRlGAcg",
          "ASgFEhMKC3VzZXJHaWZ0RGF5GAggASgFEhgKEHVzZXJHaWZ0RHlhU3RhdGUY",
          "CSABKAUiPwoeUEJfTm90aWZ5QnJvYWRjYXN0U2V2ZW5EYXlpbmZvEgwKBHR5",
          "cGUYASABKAUSDwoHY29udGVudBgCIAEoCSI+ChJHZXRIaWRlQnV0dG9uU3Rh",
          "dGUSDQoFY291bnQYASABKAMSGQoRbkJ1dHRvblN0YXRlQXJyYXkYAiADKAVi",
          "BnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData, 
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BulletPosition), global::BulletPosition.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OtherUserInfo), global::OtherUserInfo.Parser, new[]{ "SeatIndex", "Gender", "Nickname", "Gold", "Diamond", "CurrentCannonRatio", "Avatar", "UserId", "Level", "Experience", "VipLevel", "MaxCannonMultiple", "Prepared", "CannonStyle", "GameId", "MonthlyCardType", "CannonBottomType", "TestCoin", "IsRoomTest", "UserChampionsRank" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EnterRoomRequest), global::PB_EnterRoomRequest.Parser, new[]{ "EnterType", "RoomRatio" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EnterRoomResponse), global::PB_EnterRoomResponse.Parser, new[]{ "Result", "RoomIndex", "SeatIndex", "Others", "Gold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LoginRequest), global::PB_LoginRequest.Parser, new[]{ "OpenId", "AccessToken", "Nickname", "AvatarUrl", "Gender", "Platform" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LoginResponse), global::PB_LoginResponse.Parser, new[]{ "Result", "Nickname", "Avatar", "VipLevel", "Level", "Experience", "UserId", "Gold", "Diamond", "TopupSum", "MaxCannonMultiple", "SailDay", "RedPacketTicket", "CannonStyle", "SignIn", "NextLevelExp", "BeginnerCurTask", "BeginnerProgress", "RoomCard", "MonthlyCardExpiryDay", "MonthlyPackGotToday", "PreferencePackBought", "LoginGold", "FirstPayProducts", "LuckyGold", "LuckyFishNum", "Charm", "CharmExchangeTimes", "BankGold", "HasBankPswd", "ErrorMsg", "GameId", "Gender", "TestCoin", "IsTestRoom", "CannonBottomStly", "NManmon", "NBossMatchState", "IsNewUser", "IsRongYuDianTangUser", "IsPaiWeiTopUpJiaCeng", "IsResterUserSteate" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_Property), global::PB_Property.Parser, new[]{ "PropertyType", "Sum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetFishLuckyDrawRequest), global::PB_GetFishLuckyDrawRequest.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetFishLuckyDrawResponse), global::PB_GetFishLuckyDrawResponse.Parser, new[]{ "Result", "Type", "Prop" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyFishLuckyDraw), global::PB_NotifyFishLuckyDraw.Parser, new[]{ "UserId", "Type", "Prop" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LeaveRoomRequest), global::PB_LeaveRoomRequest.Parser, new[]{ "LeaveType", "RoomRatio", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LeaveRoomResponse), global::PB_LeaveRoomResponse.Parser, new[]{ "Result", "Gold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OtherEnterRoomInfrom), global::PB_OtherEnterRoomInfrom.Parser, new[]{ "EnterType", "RoomRatio", "RoomIndex", "Other" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OtherLeaveRoomInfrom), global::PB_OtherLeaveRoomInfrom.Parser, new[]{ "SeatIndex", "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_UserFireRequest), global::PB_UserFireRequest.Parser, new[]{ "BulletId", "CannonRatio", "Position", "UserId", "GroupId", "FishId", "Violent" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_FishGroupInfrom), global::PB_FishGroupInfrom.Parser, new[]{ "GroupId", "FishType", "FishNum", "TrackId", "TrackType", "TideType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_FishHitInfrom), global::PB_FishHitInfrom.Parser, new[]{ "BulletId", "GroupId", "FishId", "UserId", "CannonMultiple", "Position", "Properties", "Violent", "LongLiuShuiGold", "BeiyongFishID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_FishOutScene), global::PB_FishOutScene.Parser, new[]{ "GroupId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ChangeCannonRequest), global::PB_ChangeCannonRequest.Parser, new[]{ "CannonMultiple" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ChangeCannonResponse), global::PB_ChangeCannonResponse.Parser, new[]{ "Result", "CannonMultiple" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OtherChangeCannon), global::PB_OtherChangeCannon.Parser, new[]{ "UserId", "CannonMultiple" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_Effect), global::PB_Effect.Parser, new[]{ "Id", "Target" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EffectRequest), global::PB_EffectRequest.Parser, new[]{ "UserId", "Effect" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EffectResponse), global::PB_EffectResponse.Parser, new[]{ "Result", "Effect" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OtherEffect), global::PB_OtherEffect.Parser, new[]{ "UserId", "Effect" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FreezeTimeout), global::FreezeTimeout.Parser, new[]{ "Target" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TopUpRequest), global::TopUpRequest.Parser, new[]{ "Type", "RMB" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TopUpResponse), global::TopUpResponse.Parser, new[]{ "Result", "Type", "Sum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BackpackProperty), global::BackpackProperty.Parser, new[]{ "Id", "Name", "Type", "Description", "Useable", "CanGiveAway", "DiamondCost", "Count", "PropTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetBackpackPropertyResponse), global::GetBackpackPropertyResponse.Parser, new[]{ "Result", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PKRoomInfo), global::PB_PKRoomInfo.Parser, new[]{ "RoomIndex", "RoomType", "GoldType", "TimeType", "RoundType", "Begun", "CurrentPlayerNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetPKRoomListRequest), global::PB_GetPKRoomListRequest.Parser, new[]{ "RoomType", "PageNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetPKRoomListResponse), global::PB_GetPKRoomListResponse.Parser, new[]{ "Result", "RoomType", "PageNum", "Rooms" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CreatePKRoomRequest), global::PB_CreatePKRoomRequest.Parser, new[]{ "RoomType", "GoldType", "BulletType", "TimeType", "PointType", "PlayerNumType", "RoomName", "RoomPassword" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CreatePKRoomResponse), global::PB_CreatePKRoomResponse.Parser, new[]{ "Result", "RoomType", "SeatIndex", "Room" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_StartPKGameRequest), global::PB_StartPKGameRequest.Parser, new[]{ "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_StartPKGameResponse), global::PB_StartPKGameResponse.Parser, new[]{ "Result", "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyPKGameStart), global::PB_NotifyPKGameStart.Parser, new[]{ "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EnterPKRoomRequest), global::PB_EnterPKRoomRequest.Parser, new[]{ "RoomType", "GoldType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EnterPKRoomResponse), global::PB_EnterPKRoomResponse.Parser, new[]{ "Result", "RoomType", "RoomIndex", "SeatIndex", "GoldType", "Others" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherEnterPKRoom), global::PB_NotifyOtherEnterPKRoom.Parser, new[]{ "EnterType", "GoldType", "RoomIndex", "Other" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LeavePKRoomRequest), global::PB_LeavePKRoomRequest.Parser, new[]{ "RoomType", "GoldType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LeavePKRoomResponse), global::PB_LeavePKRoomResponse.Parser, new[]{ "Result", "RoomType", "GoldType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherLeavePKRoom), global::PB_NotifyOtherLeavePKRoom.Parser, new[]{ "SeatIndex", "LeaveUserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LaunchTorpedoRequest), global::PB_LaunchTorpedoRequest.Parser, new[]{ "TorpedoId", "TorpedoType", "Position" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LaunchTorpedoResponse), global::PB_LaunchTorpedoResponse.Parser, new[]{ "Result", "TorpedoId", "TorpedoType", "Position" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherLaunchTorpedo), global::PB_NotifyOtherLaunchTorpedo.Parser, new[]{ "UserId", "TorpedoId", "TorpedoType", "Position" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_Fish), global::PB_Fish.Parser, new[]{ "GroupId", "FishId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_TorpedoExplodeRequest), global::PB_TorpedoExplodeRequest.Parser, new[]{ "TorpedoId", "TorpedoType", "TargetFishes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_FishReward), global::PB_FishReward.Parser, new[]{ "GroupId", "FishId", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_TorpedoExplodeResponse), global::PB_TorpedoExplodeResponse.Parser, new[]{ "Result", "TorpedoId", "TorpedoType", "Rewards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherTorpedoExplode), global::PB_NotifyOtherTorpedoExplode.Parser, new[]{ "UserId", "TorpedoId", "TorpedoType", "Rewards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PreparePKGame), global::PB_PreparePKGame.Parser, new[]{ "UserId", "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CancelPreparePKGame), global::PB_CancelPreparePKGame.Parser, new[]{ "UserId", "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PreStartCountdown), global::PB_PreStartCountdown.Parser, new[]{ "Countdown" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_DistributePKProperty), global::PB_DistributePKProperty.Parser, new[]{ "RoomIndex", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PlayerInfo), global::PB_PlayerInfo.Parser, new[]{ "UserId", "Point", "Gold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GoldGameResult), global::PB_GoldGameResult.Parser, new[]{ "Info" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PointGameResult), global::PB_PointGameResult.Parser, new[]{ "WinnerUserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PointGameRoundResult), global::PB_PointGameRoundResult.Parser, new[]{ "Round", "WinnerUserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OtherGameInfo), global::PB_OtherGameInfo.Parser, new[]{ "SeatIndex", "Gender", "Nickname", "Avatar", "UserId", "VipLevel", "Properties", "CannonStyle", "GameId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ReconnectGameResponse), global::PB_ReconnectGameResponse.Parser, new[]{ "Result", "RoomType", "GoldType", "RoomIndex", "SeatIndex", "Properties", "Others" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OtherReconnectGame), global::PB_OtherReconnectGame.Parser, new[]{ "RoomType", "GoldType", "RoomIndex", "Other" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CreateFriendRoomRequest), global::PB_CreateFriendRoomRequest.Parser, new[]{ "RoomType", "GoldType", "TimeType", "RoundType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CreateFriendRoomResponse), global::PB_CreateFriendRoomResponse.Parser, new[]{ "Result", "SeatIndex", "Room" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EnterFriendRoomRequest), global::PB_EnterFriendRoomRequest.Parser, new[]{ "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EnterFriendRoomResponse), global::PB_EnterFriendRoomResponse.Parser, new[]{ "Result", "SeatIndex", "RoomOwnerUserId", "Room", "Others" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherEnterFriendRoom), global::PB_NotifyOtherEnterFriendRoom.Parser, new[]{ "RoomType", "RoomIndex", "Other" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LeaveFriendRoomRequest), global::PB_LeaveFriendRoomRequest.Parser, new[]{ "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LeaveFriendRoomResponse), global::PB_LeaveFriendRoomResponse.Parser, new[]{ "Result", "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherLeaveFriendRoom), global::PB_NotifyOtherLeaveFriendRoom.Parser, new[]{ "SeatIndex", "LeaveUserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_UserRoundResult), global::PB_UserRoundResult.Parser, new[]{ "UserId", "Sum", "RoundNums" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_FriendRoomGameResult), global::PB_FriendRoomGameResult.Parser, new[]{ "ResultType", "Users" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_DisbandFriendRoomRequest), global::PB_DisbandFriendRoomRequest.Parser, new[]{ "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_DisbandFriendRoomResponse), global::PB_DisbandFriendRoomResponse.Parser, new[]{ "Result", "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyDisbandFriendRoom), global::PB_NotifyDisbandFriendRoom.Parser, new[]{ "RoomType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyRedPacket), global::PB_NotifyRedPacket.Parser, new[]{ "PacketId", "ConsumedGold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OpenRedPacketRequest), global::PB_OpenRedPacketRequest.Parser, new[]{ "PacketId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OpenRedPacketResponse), global::PB_OpenRedPacketResponse.Parser, new[]{ "Result", "PacketId", "RedPacketTicket" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetRedPacketListResponse), global::PB_GetRedPacketListResponse.Parser, new[]{ "Result", "Packets" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherOpenRedPacket), global::PB_NotifyOtherOpenRedPacket.Parser, new[]{ "UserId", "RedPacketTicket" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EnterRedPacketRoomRequest), global::PB_EnterRedPacketRoomRequest.Parser, new[]{ "RoomType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EnterRedPacketRoomResponse), global::PB_EnterRedPacketRoomResponse.Parser, new[]{ "Result", "RoomType", "RoomIndex", "SeatIndex", "Gold", "Others", "RoomConsumedGold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherEnterRedPacketRoom), global::PB_NotifyOtherEnterRedPacketRoom.Parser, new[]{ "RoomType", "RoomIndex", "Other" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LeaveRedPacketRoomRequest), global::PB_LeaveRedPacketRoomRequest.Parser, new[]{ "LeaveType", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LeaveRedPacketRoomResponse), global::PB_LeaveRedPacketRoomResponse.Parser, new[]{ "Result", "Gold", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherLeaveRedPacketRoom), global::PB_NotifyOtherLeaveRedPacketRoom.Parser, new[]{ "SeatIndex", "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OtherUnlockCannonMultiple), global::PB_OtherUnlockCannonMultiple.Parser, new[]{ "UserId", "MaxCannonMultiple", "NeedDiamond", "RewardGold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_UnlockCannonMultipleRequest), global::PB_UnlockCannonMultipleRequest.Parser, new[]{ "TargetMultiple" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_UnlockCannonMultipleResponse), global::PB_UnlockCannonMultipleResponse.Parser, new[]{ "Result", "CurrentMaxMultiple", "NeedDiamond", "RewardGold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_BeginnerTaskRewardRequest), global::PB_BeginnerTaskRewardRequest.Parser, new[]{ "BeginnerCurTask" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyOtherBeginnerReward), global::PB_NotifyOtherBeginnerReward.Parser, new[]{ "UserId", "BeginnerCurTask", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_BeginnerTaskRewardResponse), global::PB_BeginnerTaskRewardResponse.Parser, new[]{ "Result", "BeginnerCurTask", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyBeginnerTaskProgress), global::PB_NotifyBeginnerTaskProgress.Parser, new[]{ "BeginnerCurTask", "BeginnerTaskProgress" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_BeginnerTaskResponse), global::PB_BeginnerTaskResponse.Parser, new[]{ "BeginnerTaskDiamond", "BeginnerCurTask" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GameRank), global::PB_GameRank.Parser, new[]{ "UserId", "Gold", "Vip", "Nickname", "AvatarUrl", "Level", "Gender", "MaxMultiple", "GameId", "Duanwei", "Duanweirank", "Xingxing", "ShangLiuShui" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GameRankResponse), global::PB_GameRankResponse.Parser, new[]{ "Result", "Rank" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GameRankRequest), global::PB_GameRankRequest.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyLevelUp), global::PB_NotifyLevelUp.Parser, new[]{ "UserId", "Level", "Experience", "NextLevelExp", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyStartGift), global::PB_NotifyStartGift.Parser, new[]{ "DayOffset", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetStartGiftRequest), global::PB_GetStartGiftRequest.Parser, new[]{ "DayOffset" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetStartGiftResponse), global::PB_GetStartGiftResponse.Parser, new[]{ "Result", "DayOffset", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_AcceptFriendRequest), global::PB_AcceptFriendRequest.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_AcceptFriendResponse), global::PB_AcceptFriendResponse.Parser, new[]{ "Result", "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_AddFriendRequest), global::PB_AddFriendRequest.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_AddFriendResponse), global::PB_AddFriendResponse.Parser, new[]{ "Result", "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_DeleteFriendRequest), global::PB_DeleteFriendRequest.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_DeleteFriendResponse), global::PB_DeleteFriendResponse.Parser, new[]{ "Result", "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_Friend), global::PB_Friend.Parser, new[]{ "UserId", "Nickname", "Avatar", "Gender", "Level", "VipLevel", "Status", "HasGivenGold", "GameId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetFriendListResponse), global::PB_GetFriendListResponse.Parser, new[]{ "Result", "FriendLimit", "Friends" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetAddFriendListResponse), global::PB_GetAddFriendListResponse.Parser, new[]{ "Result", "Friends" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EverydayActivityRequest), global::PB_EverydayActivityRequest.Parser, new[]{ "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EverydayActivityResponse), global::PB_EverydayActivityResponse.Parser, new[]{ "Result", "TaskId", "Activity" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EverydayActivityAwardRequest), global::PB_EverydayActivityAwardRequest.Parser, new[]{ "Activity" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EverydayActivityAwardResponse), global::PB_EverydayActivityAwardResponse.Parser, new[]{ "Result", "Activity", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EverydayTaskProgress), global::PB_EverydayTaskProgress.Parser, new[]{ "TaskId", "Progress" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_EverydayTaskProgressResponse), global::PB_EverydayTaskProgressResponse.Parser, new[]{ "Result", "Activity", "State", "Task" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GiveOtherPropertyRequest), global::PB_GiveOtherPropertyRequest.Parser, new[]{ "UserId", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GiveOtherPropertyResponse), global::PB_GiveOtherPropertyResponse.Parser, new[]{ "Result", "UserId", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_RedPacketDistributionCountdown), global::PB_RedPacketDistributionCountdown.Parser, new[]{ "Countdown" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_RejectFriendResponse), global::PB_RejectFriendResponse.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_RejectFriendRequest), global::PB_RejectFriendRequest.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PurchasePropertyResponse), global::PB_PurchasePropertyResponse.Parser, new[]{ "Result", "Property", "DiamondCost" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PurchasePropertyRequest), global::PB_PurchasePropertyRequest.Parser, new[]{ "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_Mail), global::PB_Mail.Parser, new[]{ "MailId", "Title", "Content", "SendTime", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetMailResponse), global::PB_GetMailResponse.Parser, new[]{ "Result", "Mail" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_DelMailGetAwardRequest), global::PB_DelMailGetAwardRequest.Parser, new[]{ "MailId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_DelMailGetAwardResponse), global::PB_DelMailGetAwardResponse.Parser, new[]{ "Result", "MailId", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GiveRecord), global::PB_GiveRecord.Parser, new[]{ "GiveId", "Userid", "Property", "Timestamp", "Nickname", "AvatarUrl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GiveRecordResponse), global::PB_GiveRecordResponse.Parser, new[]{ "Result", "Record" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetGiveRequest), global::PB_GetGiveRequest.Parser, new[]{ "GiveId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetGiveResponse), global::PB_GetGiveResponse.Parser, new[]{ "Result", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_IosPayPropertyResponse), global::PB_IosPayPropertyResponse.Parser, new[]{ "Result", "Property", "FirstAward" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_IosPayPropertyRequest), global::PB_IosPayPropertyRequest.Parser, new[]{ "PayId", "ProductId", "OrderNum", "Pkey" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SignIn), global::PB_SignIn.Parser, new[]{ "Day", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SignInAwardRequest), global::PB_SignInAwardRequest.Parser, new[]{ "Day" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SignInAwardResponse), global::PB_SignInAwardResponse.Parser, new[]{ "Result", "SignIn", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ChangeCannonStyleRequest), global::PB_ChangeCannonStyleRequest.Parser, new[]{ "CannonStyle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ChangeCannonStyleResponse), global::PB_ChangeCannonStyleResponse.Parser, new[]{ "Result", "CurrentCannonStyle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OtherChangeCannonStyle), global::PB_OtherChangeCannonStyle.Parser, new[]{ "UserId", "CurrentCannonStyle" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyDecreaseConsumedGold), global::PB_NotifyDecreaseConsumedGold.Parser, new[]{ "DecreasedGold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetUserInfoRequest), global::PB_GetUserInfoRequest.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetUserInfoResponse), global::PB_GetUserInfoResponse.Parser, new[]{ "Result", "User" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SellPropertyRequest), global::PB_SellPropertyRequest.Parser, new[]{ "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SellPropertyResponse), global::PB_SellPropertyResponse.Parser, new[]{ "Result", "Properties", "Gold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyTopUp), global::PB_NotifyTopUp.Parser, new[]{ "UserId", "Money", "CurrentVip", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyRoomChatMessage), global::PB_NotifyRoomChatMessage.Parser, new[]{ "UserId", "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OpenPackRequest), global::PB_OpenPackRequest.Parser, new[]{ "PackId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_OpenPackResponse), global::PB_OpenPackResponse.Parser, new[]{ "Result", "PackId", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetMonthlyPackResponse), global::PB_GetMonthlyPackResponse.Parser, new[]{ "Result", "Properties" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_BroadcastUserMessageRequest), global::PB_BroadcastUserMessageRequest.Parser, new[]{ "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_BroadcastUserMessageResponse), global::PB_BroadcastUserMessageResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyBroadcastGameInfo), global::PB_NotifyBroadcastGameInfo.Parser, new[]{ "Type", "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyBroadcastUserMessage), global::PB_NotifyBroadcastUserMessage.Parser, new[]{ "Nickname", "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetBankMessageResponse), global::PB_GetBankMessageResponse.Parser, new[]{ "Result", "Messages" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_BankMessage), global::PB_BankMessage.Parser, new[]{ "Type", "UserId", "Nickname", "GiftGold", "GiftCount", "CharmChanged", "BankChanged", "DateTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyBankMessage), global::PB_NotifyBankMessage.Parser, new[]{ "Msg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ExchangeCharmRequest), global::PB_ExchangeCharmRequest.Parser, new[]{ "Charm", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ExchangeCharmResponse), global::PB_ExchangeCharmResponse.Parser, new[]{ "Result", "Charm", "BankGold", "ErrMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_BankAccessRequest), global::PB_BankAccessRequest.Parser, new[]{ "Gold", "Pswd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_BankAccessResponse), global::PB_BankAccessResponse.Parser, new[]{ "Result", "Gold", "ErrMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GiveCharmRequest), global::PB_GiveCharmRequest.Parser, new[]{ "UserId", "GiftGold", "GiftCount", "Pswd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GiveCharmResponse), global::PB_GiveCharmResponse.Parser, new[]{ "Result", "GoldDec", "CharmInc" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SetBankPswdRequest), global::PB_SetBankPswdRequest.Parser, new[]{ "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SetBankPswdResponse), global::PB_SetBankPswdResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyGiveCharm), global::PB_NotifyGiveCharm.Parser, new[]{ "Msg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CLLoginPasswdRequest), global::PB_CLLoginPasswdRequest.Parser, new[]{ "Accounts", "Passwd", "MachineSerial", "DeviecType", "VersionNumber", "ChannelNumber" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CLLoginTokenRequest), global::PB_CLLoginTokenRequest.Parser, new[]{ "UserId", "Token", "TokenType", "MachineSerial", "DeviecType", "VersionNumber", "ChannelNumber", "Username", "Avatar" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CLGiveGiftRequest), global::PB_CLGiveGiftRequest.Parser, new[]{ "GiveType", "Gift", "ToGameId", "SecondPasswd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_CLGiveGiftResponse), global::PB_CLGiveGiftResponse.Parser, new[]{ "Result", "ErrorMsg", "GiveType", "Gift", "CurrentCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ReloadAssetInfoResponse), global::PB_ReloadAssetInfoResponse.Parser, new[]{ "Result", "Props" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ScrollingNotice), global::PB_ScrollingNotice.Parser, new[]{ "Content", "CycleInterval" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyScrollingNoticesUpdate), global::PB_NotifyScrollingNoticesUpdate.Parser, new[]{ "Notices" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ExchangeDiamondRequest), global::ExchangeDiamondRequest.Parser, new[]{ "Diamond" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NotifyExchangeDiamond), global::NotifyExchangeDiamond.Parser, new[]{ "UserId", "Diamond", "Gold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ExchangeDiamondResponse), global::ExchangeDiamondResponse.Parser, new[]{ "Result", "Diamond", "Gold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLModifySecPasswdRequest), global::CLModifySecPasswdRequest.Parser, new[]{ "UserId", "Token", "TokenType", "NewPasswd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetPayStateByNoRequest), global::GetPayStateByNoRequest.Parser, new[]{ "TradeNumber" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetPayStateByNoResponse), global::GetPayStateByNoResponse.Parser, new[]{ "Result", "TradeNumber", "State" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetFirstPayRewardResponse), global::GetFirstPayRewardResponse.Parser, new[]{ "Result", "Props" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLLoginThailandRequest), global::CLLoginThailandRequest.Parser, new[]{ "UnionId", "MachineSerial", "DeviceType", "VersionNumber", "ChannelNumber", "Nickname", "AvatarUrl", "Gender", "Username" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLLoginThailandResponse), global::CLLoginThailandResponse.Parser, new[]{ "Res", "Token", "Account" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReturnRobotRequest), global::ReturnRobotRequest.Parser, new[]{ "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetRobotResponse), global::GetRobotResponse.Parser, new[]{ "Result", "User" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NotifyOtherPurchaseProperty), global::NotifyOtherPurchaseProperty.Parser, new[]{ "UserId", "Property", "DiamondCost" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ConversionCodetRequest), global::PB_ConversionCodetRequest.Parser, new[]{ "ConversionCodetMsg", "UserID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ConversionCodetResponse), global::PB_ConversionCodetResponse.Parser, new[]{ "ErrCode", "PropID", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ConvertFormalAccount), global::PB_ConvertFormalAccount.Parser, new[]{ "UserID", "Code", "Mobile", "Pwd", "Token", "PropID", "PropCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SystemReward), global::PB_SystemReward.Parser, new[]{ "ResultCode", "PropID", "PropCount", "Msg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ModifyNick), global::PB_ModifyNick.Parser, new[]{ "UserID", "LoginType", "PropID", "PropCount", "ModifyNick" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetHelpGodlReward), global::PB_GetHelpGodlReward.Parser, new[]{ "UserID", "TaskID", "PropID", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_HelpGoldTaskData), global::PB_HelpGoldTaskData.Parser, new[]{ "ResultCode", "TaskID", "NValue", "PropID", "Count", "Dec" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_RetroactiveReques), global::PB_RetroactiveReques.Parser, new[]{ "UserID", "RetroactiveType", "ReDay", "PropID", "PropCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SignRetroactiveResponse), global::PB_SignRetroactiveResponse.Parser, new[]{ "Result", "SignIn", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetBindPhoneState), global::GetBindPhoneState.Parser, new[]{ "IsBindPhone", "StrPhoneNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::usePropTime), global::usePropTime.Parser, new[]{ "PropID", "PropType", "UseTime", "RemainTime", "NPropTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UsePropTimeArray), global::UsePropTimeArray.Parser, new[]{ "UseProp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UsePropTimeEx), global::UsePropTimeEx.Parser, new[]{ "UserID", "ResultCode", "UseProp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UsePropTimeExResponse), global::UsePropTimeExResponse.Parser, new[]{ "UserID", "ResultCode", "UseProp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DelUsePropTimeEx), global::DelUsePropTimeEx.Parser, new[]{ "UserID", "ResultCode", "DelPropID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_RewardStructure), global::PB_RewardStructure.Parser, new[]{ "RewardType", "TaskID", "TaskValue", "RewardPro" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_RewardAllData), global::PB_RewardAllData.Parser, new[]{ "Reward" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DBGetMonthlyCardReward), global::DBGetMonthlyCardReward.Parser, new[]{ "Cannonmultiplemax", "DraGonreward" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DBTopUpMonthlyCardResponse), global::DBTopUpMonthlyCardResponse.Parser, new[]{ "Result", "TotalRecharge", "CurrentVip", "CardType", "Userid", "Cannonmultiplemax", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DBGetPreferentialReward), global::DBGetPreferentialReward.Parser, new[]{ "Cannonmultiplemax", "DraGonreward" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DBGetPreferentialResponse), global::DBGetPreferentialResponse.Parser, new[]{ "Result", "TotalRecharge", "CurrentVip", "CardType", "Userid", "Cannonmultiplemax", "Property" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::useBuyCannonBottomInfo), global::useBuyCannonBottomInfo.Parser, new[]{ "BuyType", "Gold", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EquipmentCannonBottom), global::EquipmentCannonBottom.Parser, new[]{ "EquipmentType", "PropID", "Result", "RemoveCannonBottom" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Change_FenShenFish_ID), global::Change_FenShenFish_ID.Parser, new[]{ "Id", "Target" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ManmonCount), global::ManmonCount.Parser, new[]{ "LUserID", "NManmonCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetManmonChipGold), global::GetManmonChipGold.Parser, new[]{ "LUserID", "CurGold", "NResult", "ShipGold", "NManmonCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChipJettorGold), global::ChipJettorGold.Parser, new[]{ "LUserID", "SelfGold", "NWinGold", "ChipIndex", "NResult", "NChaValue", "NTax", "Showtime", "NManmonCount", "NBeiShu" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetLongRewardPoolCount), global::GetLongRewardPoolCount.Parser, new[]{ "LUserID", "NResult", "NType", "SaveLongRewardPoolGold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetManmonRewardInfo), global::GetManmonRewardInfo.Parser, new[]{ "NResult", "SaveManmonRewardInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LongLiuShuiGold), global::LongLiuShuiGold.Parser, new[]{ "LUserID", "LLongLiuShui", "LTimeData", "LManmonExp", "NShengJiDuanWei", "NIsUserTopUpState", "NTwoSelectOneTopUpState", "NThreeSelectOneTopUpdate", "NChangeCurDuanWei", "NCurRank", "NCurMax", "NSevenTaskID", "NSevenTaskValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetFishLuckyDrawResponse), global::GetFishLuckyDrawResponse.Parser, new[]{ "Result", "Type", "Prop" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LongChangeLiuShuiTime), global::LongChangeLiuShuiTime.Parser, new[]{ "LUserID", "LDiamond", "NReuslt", "NTimeData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CancelSkill), global::CancelSkill.Parser, new[]{ "LUserID", "NState", "SkillID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserRankInfo), global::UserRankInfo.Parser, new[]{ "LUserID", "NRank", "Vip", "LongCard", "NGold", "RewardGold", "Nickname" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MamonMaxWinCount), global::MamonMaxWinCount.Parser, new[]{ "LuserID", "MaxwinCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PropertyEx), global::PB_PropertyEx.Parser, new[]{ "PropertyType", "Sum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeUserGold), global::ChangeUserGold.Parser, new[]{ "LUserID", "PropertyID", "LCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PropertyEs), global::PB_PropertyEs.Parser, new[]{ "PropertyType", "Sum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NotifyBossRoomMatchInfo), global::NotifyBossRoomMatchInfo.Parser, new[]{ "NType", "Content", "SelfGold", "RoomArrayID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NotifySignUp), global::NotifySignUp.Parser, new[]{ "NType", "NRoomIndex", "NGameType", "SignUpGold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NotifyEnterBossRoomMessage), global::NotifyEnterBossRoomMessage.Parser, new[]{ "NType", "NRoomIndex", "ModifyNick" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserBossKillRankInfo), global::UserBossKillRankInfo.Parser, new[]{ "LUserID", "NRank", "Vip", "LongCard", "NGold", "Nickname" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateBossMatchTime), global::UpdateBossMatchTime.Parser, new[]{ "ChaTime", "StartTime", "EndTime", "RoomIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserRankInfoArray), global::UserRankInfoArray.Parser, new[]{ "RankInfoArray", "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PaiWeiSaiRankInfo), global::PaiWeiSaiRankInfo.Parser, new[]{ "Result", "Duanwei", "Nrank", "IsTopUp", "MonthCardtype", "Bossmatchdouble", "Shenyutime", "ShangPaiMing", "Lishizuigao", "QiShu", "Beiqizuigao", "Rank" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RongYuDianTangkInfo), global::RongYuDianTangkInfo.Parser, new[]{ "Result", "Hotprizepool", "Rank" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetPaiWeiSaiReward), global::GetPaiWeiSaiReward.Parser, new[]{ "RewardIndex", "RewardState", "CurCatchFishNum", "MaxCatchFishNum", "RewardData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPaiWeiSaiRewardInfo), global::PlayerPaiWeiSaiRewardInfo.Parser, new[]{ "RewardList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetTopUpGiftBagStateNew), global::GetTopUpGiftBagStateNew.Parser, new[]{ "OneGiftBagState", "TwoSelectOneBagState", "ThreeSelectOneBagState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetSevenDayReward), global::GetSevenDayReward.Parser, new[]{ "SelectIndex", "UserDay", "RewardPro" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InitSevenDayInfo), global::InitSevenDayInfo.Parser, new[]{ "Result", "CurDay", "UserDay", "UserDayState", "TaskDay", "TaskValue", "TaskDayState", "UserGiftDay", "UserGiftDyaState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_NotifyBroadcastSevenDayinfo), global::PB_NotifyBroadcastSevenDayinfo.Parser, new[]{ "Type", "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetHideButtonState), global::GetHideButtonState.Parser, new[]{ "Count", "NButtonStateArray" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InitUpLevelInfo), global::InitUpLevelInfo.Parser, new[]{ "TaskID", "TaskCurValue", "TaskMaxValue", "RewardState", "ShowInfoMaxValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SendUpLevelReward), global::SendUpLevelReward.Parser, new[]{ "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetUpLevelReward), global::GetUpLevelReward.Parser, new[]{ "Result", "TaskId", "TaskLevel", "Gold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DBGetUpLevelActivityInfo), global::DBGetUpLevelActivityInfo.Parser, new[]{ "Rewarduplevleinfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ConvertFormalBindAccount), global::PB_ConvertFormalBindAccount.Parser, new[]{ "Result", "UserID", "StrPhoneNum", "StrCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PayInfo), global::PB_PayInfo.Parser, new[]{ "Payinfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InitPayInfo), global::InitPayInfo.Parser, new[]{ "ChangeNum", "PayType", "ID", "RMB", "AddGold" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InitPhoneAccountInfo), global::InitPhoneAccountInfo.Parser, new[]{ "Result", "AccountType", "UserID", "AccountName", "StrToken","Nickname"  }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_PhoneLogin), global::PB_PhoneLogin.Parser, new[]{ "Result", "AccountInfoArr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_GetIphonePassResp), global::PB_GetIphonePassResp.Parser, new[]{ "Result", "AccountInfoArr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_AssociateAccountLogin), global::PB_AssociateAccountLogin.Parser, new[]{ "Result", "AccountType", "UserID", "AccountName", "StrToken" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_ConvertFormalPhoneNumber), global::PB_ConvertFormalPhoneNumber.Parser, new[]{ "StrPhoneNum", "StrCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SetPhoneNumberPassword), global::PB_SetPhoneNumberPassword.Parser, new[]{ "StrPhoneNum", "Pass" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_SetPhoneLoginPass),global::PB_SetPhoneLoginPass.Parser,new[]{"PhoneNumber","Password","Nickname" },null,null,null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PB_LoginAccountNickChoice),global::PB_LoginAccountNickChoice.Parser,new[]{"LanguageType","NickArray" },null,null,null),
        })); 
  }
  #endregion
}

#region Messages
public sealed partial class BulletPosition : pb::IMessage<BulletPosition> {
  private static readonly pb::MessageParser<BulletPosition> _parser = new pb::MessageParser<BulletPosition>(() => new BulletPosition());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BulletPosition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BulletPosition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BulletPosition(BulletPosition other) : this() {
    x_ = other.x_;
    y_ = other.y_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BulletPosition Clone() {
    return new BulletPosition(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BulletPosition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BulletPosition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BulletPosition other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class OtherUserInfo : pb::IMessage<OtherUserInfo> {
  private static readonly pb::MessageParser<OtherUserInfo> _parser = new pb::MessageParser<OtherUserInfo>(() => new OtherUserInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OtherUserInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OtherUserInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OtherUserInfo(OtherUserInfo other) : this() {
    seatIndex_ = other.seatIndex_;
    gender_ = other.gender_;
    nickname_ = other.nickname_;
    gold_ = other.gold_;
    diamond_ = other.diamond_;
    currentCannonRatio_ = other.currentCannonRatio_;
    avatar_ = other.avatar_;
    userId_ = other.userId_;
    level_ = other.level_;
    experience_ = other.experience_;
    vipLevel_ = other.vipLevel_;
    maxCannonMultiple_ = other.maxCannonMultiple_;
    prepared_ = other.prepared_;
    cannonStyle_ = other.cannonStyle_;
    gameId_ = other.gameId_;
    monthlyCardType_ = other.monthlyCardType_;
    cannonBottomType_ = other.cannonBottomType_;
    testCoin_ = other.testCoin_;
    isRoomTest_ = other.isRoomTest_;
    userChampionsRank_ = other.userChampionsRank_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OtherUserInfo Clone() {
    return new OtherUserInfo(this);
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 1;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 2;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 4;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "diamond" field.</summary>
  public const int DiamondFieldNumber = 5;
  private long diamond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Diamond {
    get { return diamond_; }
    set {
      diamond_ = value;
    }
  }

  /// <summary>Field number for the "current_cannon_ratio" field.</summary>
  public const int CurrentCannonRatioFieldNumber = 6;
  private int currentCannonRatio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentCannonRatio {
    get { return currentCannonRatio_; }
    set {
      currentCannonRatio_ = value;
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 7;
  private string avatar_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 8;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 9;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "experience" field.</summary>
  public const int ExperienceFieldNumber = 10;
  private int experience_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Experience {
    get { return experience_; }
    set {
      experience_ = value;
    }
  }

  /// <summary>Field number for the "vip_level" field.</summary>
  public const int VipLevelFieldNumber = 11;
  private int vipLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VipLevel {
    get { return vipLevel_; }
    set {
      vipLevel_ = value;
    }
  }

  /// <summary>Field number for the "max_cannon_multiple" field.</summary>
  public const int MaxCannonMultipleFieldNumber = 12;
  private int maxCannonMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxCannonMultiple {
    get { return maxCannonMultiple_; }
    set {
      maxCannonMultiple_ = value;
    }
  }

  /// <summary>Field number for the "prepared" field.</summary>
  public const int PreparedFieldNumber = 13;
  private bool prepared_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Prepared {
    get { return prepared_; }
    set {
      prepared_ = value;
    }
  }

  /// <summary>Field number for the "cannon_style" field.</summary>
  public const int CannonStyleFieldNumber = 14;
  private int cannonStyle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonStyle {
    get { return cannonStyle_; }
    set {
      cannonStyle_ = value;
    }
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 15;
  private int gameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameId {
    get { return gameId_; }
    set {
      gameId_ = value;
    }
  }

  /// <summary>Field number for the "monthlyCardType" field.</summary>
  public const int MonthlyCardTypeFieldNumber = 16;
  private int monthlyCardType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonthlyCardType {
    get { return monthlyCardType_; }
    set {
      monthlyCardType_ = value;
    }
  }

  /// <summary>Field number for the "cannonBottomType" field.</summary>
  public const int CannonBottomTypeFieldNumber = 17;
  private int cannonBottomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonBottomType {
    get { return cannonBottomType_; }
    set {
      cannonBottomType_ = value;
    }
  }

  /// <summary>Field number for the "test_coin" field.</summary>
  public const int TestCoinFieldNumber = 18;
  private long testCoin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TestCoin {
    get { return testCoin_; }
    set {
      testCoin_ = value;
    }
  }

  /// <summary>Field number for the "is_room_test" field.</summary>
  public const int IsRoomTestFieldNumber = 19;
  private int isRoomTest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsRoomTest {
    get { return isRoomTest_; }
    set {
      isRoomTest_ = value;
    }
  }

  /// <summary>Field number for the "userChampionsRank" field.</summary>
  public const int UserChampionsRankFieldNumber = 20;
  private int userChampionsRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserChampionsRank {
    get { return userChampionsRank_; }
    set {
      userChampionsRank_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OtherUserInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OtherUserInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatIndex != other.SeatIndex) return false;
    if (Gender != other.Gender) return false;
    if (Nickname != other.Nickname) return false;
    if (Gold != other.Gold) return false;
    if (Diamond != other.Diamond) return false;
    if (CurrentCannonRatio != other.CurrentCannonRatio) return false;
    if (Avatar != other.Avatar) return false;
    if (UserId != other.UserId) return false;
    if (Level != other.Level) return false;
    if (Experience != other.Experience) return false;
    if (VipLevel != other.VipLevel) return false;
    if (MaxCannonMultiple != other.MaxCannonMultiple) return false;
    if (Prepared != other.Prepared) return false;
    if (CannonStyle != other.CannonStyle) return false;
    if (GameId != other.GameId) return false;
    if (MonthlyCardType != other.MonthlyCardType) return false;
    if (CannonBottomType != other.CannonBottomType) return false;
    if (TestCoin != other.TestCoin) return false;
    if (IsRoomTest != other.IsRoomTest) return false;
    if (UserChampionsRank != other.UserChampionsRank) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    if (Diamond != 0L) hash ^= Diamond.GetHashCode();
    if (CurrentCannonRatio != 0) hash ^= CurrentCannonRatio.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Experience != 0) hash ^= Experience.GetHashCode();
    if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
    if (MaxCannonMultiple != 0) hash ^= MaxCannonMultiple.GetHashCode();
    if (Prepared != false) hash ^= Prepared.GetHashCode();
    if (CannonStyle != 0) hash ^= CannonStyle.GetHashCode();
    if (GameId != 0) hash ^= GameId.GetHashCode();
    if (MonthlyCardType != 0) hash ^= MonthlyCardType.GetHashCode();
    if (CannonBottomType != 0) hash ^= CannonBottomType.GetHashCode();
    if (TestCoin != 0L) hash ^= TestCoin.GetHashCode();
    if (IsRoomTest != 0) hash ^= IsRoomTest.GetHashCode();
    if (UserChampionsRank != 0) hash ^= UserChampionsRank.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatIndex);
    }
    if (Gender != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Gender);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Gold != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Gold);
    }
    if (Diamond != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Diamond);
    }
    if (CurrentCannonRatio != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(CurrentCannonRatio);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Avatar);
    }
    if (UserId != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(UserId);
    }
    if (Level != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Level);
    }
    if (Experience != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Experience);
    }
    if (VipLevel != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(VipLevel);
    }
    if (MaxCannonMultiple != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(MaxCannonMultiple);
    }
    if (Prepared != false) {
      output.WriteRawTag(104);
      output.WriteBool(Prepared);
    }
    if (CannonStyle != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(CannonStyle);
    }
    if (GameId != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(GameId);
    }
    if (MonthlyCardType != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(MonthlyCardType);
    }
    if (CannonBottomType != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(CannonBottomType);
    }
    if (TestCoin != 0L) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(TestCoin);
    }
    if (IsRoomTest != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(IsRoomTest);
    }
    if (UserChampionsRank != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(UserChampionsRank);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (Gender != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    if (Diamond != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
    }
    if (CurrentCannonRatio != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentCannonRatio);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Experience != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
    }
    if (VipLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
    }
    if (MaxCannonMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCannonMultiple);
    }
    if (Prepared != false) {
      size += 1 + 1;
    }
    if (CannonStyle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonStyle);
    }
    if (GameId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
    }
    if (MonthlyCardType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MonthlyCardType);
    }
    if (CannonBottomType != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CannonBottomType);
    }
    if (TestCoin != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(TestCoin);
    }
    if (IsRoomTest != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsRoomTest);
    }
    if (UserChampionsRank != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(UserChampionsRank);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OtherUserInfo other) {
    if (other == null) {
      return;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    if (other.Diamond != 0L) {
      Diamond = other.Diamond;
    }
    if (other.CurrentCannonRatio != 0) {
      CurrentCannonRatio = other.CurrentCannonRatio;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Experience != 0) {
      Experience = other.Experience;
    }
    if (other.VipLevel != 0) {
      VipLevel = other.VipLevel;
    }
    if (other.MaxCannonMultiple != 0) {
      MaxCannonMultiple = other.MaxCannonMultiple;
    }
    if (other.Prepared != false) {
      Prepared = other.Prepared;
    }
    if (other.CannonStyle != 0) {
      CannonStyle = other.CannonStyle;
    }
    if (other.GameId != 0) {
      GameId = other.GameId;
    }
    if (other.MonthlyCardType != 0) {
      MonthlyCardType = other.MonthlyCardType;
    }
    if (other.CannonBottomType != 0) {
      CannonBottomType = other.CannonBottomType;
    }
    if (other.TestCoin != 0L) {
      TestCoin = other.TestCoin;
    }
    if (other.IsRoomTest != 0) {
      IsRoomTest = other.IsRoomTest;
    }
    if (other.UserChampionsRank != 0) {
      UserChampionsRank = other.UserChampionsRank;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 16: {
          Gender = input.ReadInt32();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 32: {
          Gold = input.ReadInt64();
          break;
        }
        case 40: {
          Diamond = input.ReadInt64();
          break;
        }
        case 48: {
          CurrentCannonRatio = input.ReadInt32();
          break;
        }
        case 58: {
          Avatar = input.ReadString();
          break;
        }
        case 64: {
          UserId = input.ReadInt32();
          break;
        }
        case 72: {
          Level = input.ReadInt32();
          break;
        }
        case 80: {
          Experience = input.ReadInt32();
          break;
        }
        case 88: {
          VipLevel = input.ReadInt32();
          break;
        }
        case 96: {
          MaxCannonMultiple = input.ReadInt32();
          break;
        }
        case 104: {
          Prepared = input.ReadBool();
          break;
        }
        case 112: {
          CannonStyle = input.ReadInt32();
          break;
        }
        case 120: {
          GameId = input.ReadInt32();
          break;
        }
        case 128: {
          MonthlyCardType = input.ReadInt32();
          break;
        }
        case 136: {
          CannonBottomType = input.ReadInt32();
          break;
        }
        case 144: {
          TestCoin = input.ReadInt64();
          break;
        }
        case 152: {
          IsRoomTest = input.ReadInt32();
          break;
        }
        case 160: {
          UserChampionsRank = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EnterRoomRequest : pb::IMessage<PB_EnterRoomRequest> {
  private static readonly pb::MessageParser<PB_EnterRoomRequest> _parser = new pb::MessageParser<PB_EnterRoomRequest>(() => new PB_EnterRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EnterRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRoomRequest(PB_EnterRoomRequest other) : this() {
    enterType_ = other.enterType_;
    roomRatio_ = other.roomRatio_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRoomRequest Clone() {
    return new PB_EnterRoomRequest(this);
  }

  /// <summary>Field number for the "enter_type" field.</summary>
  public const int EnterTypeFieldNumber = 1;
  private int enterType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EnterType {
    get { return enterType_; }
    set {
      enterType_ = value;
    }
  }

  /// <summary>Field number for the "room_ratio" field.</summary>
  public const int RoomRatioFieldNumber = 2;
  private int roomRatio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomRatio {
    get { return roomRatio_; }
    set {
      roomRatio_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EnterRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EnterRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EnterType != other.EnterType) return false;
    if (RoomRatio != other.RoomRatio) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EnterType != 0) hash ^= EnterType.GetHashCode();
    if (RoomRatio != 0) hash ^= RoomRatio.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EnterType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EnterType);
    }
    if (RoomRatio != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomRatio);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EnterType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnterType);
    }
    if (RoomRatio != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomRatio);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EnterRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.EnterType != 0) {
      EnterType = other.EnterType;
    }
    if (other.RoomRatio != 0) {
      RoomRatio = other.RoomRatio;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EnterType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomRatio = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EnterRoomResponse : pb::IMessage<PB_EnterRoomResponse> {
  private static readonly pb::MessageParser<PB_EnterRoomResponse> _parser = new pb::MessageParser<PB_EnterRoomResponse>(() => new PB_EnterRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EnterRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRoomResponse(PB_EnterRoomResponse other) : this() {
    result_ = other.result_;
    roomIndex_ = other.roomIndex_;
    seatIndex_ = other.seatIndex_;
    others_ = other.others_.Clone();
    gold_ = other.gold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRoomResponse Clone() {
    return new PB_EnterRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private long roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 3;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "others" field.</summary>
  public const int OthersFieldNumber = 4;
  private static readonly pb::FieldCodec<global::OtherUserInfo> _repeated_others_codec
      = pb::FieldCodec.ForMessage(34, global::OtherUserInfo.Parser);
  private readonly pbc::RepeatedField<global::OtherUserInfo> others_ = new pbc::RepeatedField<global::OtherUserInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OtherUserInfo> Others {
    get { return others_; }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 5;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EnterRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EnterRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (SeatIndex != other.SeatIndex) return false;
    if(!others_.Equals(other.others_)) return false;
    if (Gold != other.Gold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomIndex != 0L) hash ^= RoomIndex.GetHashCode();
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    hash ^= others_.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomIndex != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(RoomIndex);
    }
    if (SeatIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SeatIndex);
    }
    others_.WriteTo(output, _repeated_others_codec);
    if (Gold != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Gold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomIndex != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomIndex);
    }
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    size += others_.CalculateSize(_repeated_others_codec);
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EnterRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomIndex != 0L) {
      RoomIndex = other.RoomIndex;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    others_.Add(other.others_);
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt64();
          break;
        }
        case 24: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 34: {
          others_.AddEntriesFrom(input, _repeated_others_codec);
          break;
        }
        case 40: {
          Gold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LoginRequest : pb::IMessage<PB_LoginRequest> {
  private static readonly pb::MessageParser<PB_LoginRequest> _parser = new pb::MessageParser<PB_LoginRequest>(() => new PB_LoginRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LoginRequest(PB_LoginRequest other) : this() {
    openId_ = other.openId_;
    accessToken_ = other.accessToken_;
    nickname_ = other.nickname_;
    avatarUrl_ = other.avatarUrl_;
    gender_ = other.gender_;
    platform_ = other.platform_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LoginRequest Clone() {
    return new PB_LoginRequest(this);
  }

  /// <summary>Field number for the "open_id" field.</summary>
  public const int OpenIdFieldNumber = 1;
  private string openId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OpenId {
    get { return openId_; }
    set {
      openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "access_token" field.</summary>
  public const int AccessTokenFieldNumber = 2;
  private string accessToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar_url" field.</summary>
  public const int AvatarUrlFieldNumber = 4;
  private string avatarUrl_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AvatarUrl {
    get { return avatarUrl_; }
    set {
      avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 5;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 6;
  private int platform_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Platform {
    get { return platform_; }
    set {
      platform_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OpenId != other.OpenId) return false;
    if (AccessToken != other.AccessToken) return false;
    if (Nickname != other.Nickname) return false;
    if (AvatarUrl != other.AvatarUrl) return false;
    if (Gender != other.Gender) return false;
    if (Platform != other.Platform) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
    if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (Platform != 0) hash ^= Platform.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OpenId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OpenId);
    }
    if (AccessToken.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AccessToken);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (AvatarUrl.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(AvatarUrl);
    }
    if (Gender != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Gender);
    }
    if (Platform != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Platform);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OpenId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
    }
    if (AccessToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (AvatarUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
    }
    if (Gender != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (Platform != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.OpenId.Length != 0) {
      OpenId = other.OpenId;
    }
    if (other.AccessToken.Length != 0) {
      AccessToken = other.AccessToken;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.AvatarUrl.Length != 0) {
      AvatarUrl = other.AvatarUrl;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.Platform != 0) {
      Platform = other.Platform;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          OpenId = input.ReadString();
          break;
        }
        case 18: {
          AccessToken = input.ReadString();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 34: {
          AvatarUrl = input.ReadString();
          break;
        }
        case 40: {
          Gender = input.ReadInt32();
          break;
        }
        case 48: {
          Platform = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LoginResponse : pb::IMessage<PB_LoginResponse> {
  private static readonly pb::MessageParser<PB_LoginResponse> _parser = new pb::MessageParser<PB_LoginResponse>(() => new PB_LoginResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LoginResponse(PB_LoginResponse other) : this() {
    result_ = other.result_;
    nickname_ = other.nickname_;
    avatar_ = other.avatar_;
    vipLevel_ = other.vipLevel_;
    level_ = other.level_;
    experience_ = other.experience_;
    userId_ = other.userId_;
    gold_ = other.gold_;
    diamond_ = other.diamond_;
    topupSum_ = other.topupSum_;
    maxCannonMultiple_ = other.maxCannonMultiple_;
    sailDay_ = other.sailDay_;
    redPacketTicket_ = other.redPacketTicket_;
    cannonStyle_ = other.cannonStyle_;
    signIn_ = other.signIn_.Clone();
    nextLevelExp_ = other.nextLevelExp_;
    beginnerCurTask_ = other.beginnerCurTask_;
    beginnerProgress_ = other.beginnerProgress_;
    roomCard_ = other.roomCard_;
    monthlyCardExpiryDay_ = other.monthlyCardExpiryDay_;
    monthlyPackGotToday_ = other.monthlyPackGotToday_;
    preferencePackBought_ = other.preferencePackBought_;
    loginGold_ = other.loginGold_;
    firstPayProducts_ = other.firstPayProducts_.Clone();
    luckyGold_ = other.luckyGold_;
    luckyFishNum_ = other.luckyFishNum_;
    charm_ = other.charm_;
    charmExchangeTimes_ = other.charmExchangeTimes_;
    bankGold_ = other.bankGold_;
    hasBankPswd_ = other.hasBankPswd_;
    errorMsg_ = other.errorMsg_;
    gameId_ = other.gameId_;
    gender_ = other.gender_;
    testCoin_ = other.testCoin_;
    isTestRoom_ = other.isTestRoom_;
    cannonBottomStly_ = other.cannonBottomStly_;
    nManmon_ = other.nManmon_;
    nBossMatchState_ = other.nBossMatchState_;
    isNewUser_ = other.isNewUser_;
    isRongYuDianTangUser_ = other.isRongYuDianTangUser_;
    isPaiWeiTopUpJiaCeng_ = other.isPaiWeiTopUpJiaCeng_;
    isResterUserSteate_ = other.isResterUserSteate_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LoginResponse Clone() {
    return new PB_LoginResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 2;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 3;
  private string avatar_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "vip_level" field.</summary>
  public const int VipLevelFieldNumber = 4;
  private int vipLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VipLevel {
    get { return vipLevel_; }
    set {
      vipLevel_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 11;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "experience" field.</summary>
  public const int ExperienceFieldNumber = 5;
  private int experience_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Experience {
    get { return experience_; }
    set {
      experience_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 6;
  private uint userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 7;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "diamond" field.</summary>
  public const int DiamondFieldNumber = 8;
  private long diamond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Diamond {
    get { return diamond_; }
    set {
      diamond_ = value;
    }
  }

  /// <summary>Field number for the "topup_sum" field.</summary>
  public const int TopupSumFieldNumber = 9;
  private int topupSum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TopupSum {
    get { return topupSum_; }
    set {
      topupSum_ = value;
    }
  }

  /// <summary>Field number for the "max_cannon_multiple" field.</summary>
  public const int MaxCannonMultipleFieldNumber = 10;
  private int maxCannonMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxCannonMultiple {
    get { return maxCannonMultiple_; }
    set {
      maxCannonMultiple_ = value;
    }
  }

  /// <summary>Field number for the "sail_day" field.</summary>
  public const int SailDayFieldNumber = 12;
  private int sailDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SailDay {
    get { return sailDay_; }
    set {
      sailDay_ = value;
    }
  }

  /// <summary>Field number for the "red_packet_ticket" field.</summary>
  public const int RedPacketTicketFieldNumber = 13;
  private long redPacketTicket_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RedPacketTicket {
    get { return redPacketTicket_; }
    set {
      redPacketTicket_ = value;
    }
  }

  /// <summary>Field number for the "cannon_style" field.</summary>
  public const int CannonStyleFieldNumber = 14;
  private int cannonStyle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonStyle {
    get { return cannonStyle_; }
    set {
      cannonStyle_ = value;
    }
  }

  /// <summary>Field number for the "sign_in" field.</summary>
  public const int SignInFieldNumber = 15;
  private static readonly pb::FieldCodec<global::PB_SignIn> _repeated_signIn_codec
      = pb::FieldCodec.ForMessage(122, global::PB_SignIn.Parser);
  private readonly pbc::RepeatedField<global::PB_SignIn> signIn_ = new pbc::RepeatedField<global::PB_SignIn>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_SignIn> SignIn {
    get { return signIn_; }
  }

  /// <summary>Field number for the "next_level_exp" field.</summary>
  public const int NextLevelExpFieldNumber = 16;
  private int nextLevelExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextLevelExp {
    get { return nextLevelExp_; }
    set {
      nextLevelExp_ = value;
    }
  }

  /// <summary>Field number for the "beginner_cur_task" field.</summary>
  public const int BeginnerCurTaskFieldNumber = 17;
  private int beginnerCurTask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerCurTask {
    get { return beginnerCurTask_; }
    set {
      beginnerCurTask_ = value;
    }
  }

  /// <summary>Field number for the "beginner_progress" field.</summary>
  public const int BeginnerProgressFieldNumber = 18;
  private int beginnerProgress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerProgress {
    get { return beginnerProgress_; }
    set {
      beginnerProgress_ = value;
    }
  }

  /// <summary>Field number for the "room_card" field.</summary>
  public const int RoomCardFieldNumber = 19;
  private long roomCard_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomCard {
    get { return roomCard_; }
    set {
      roomCard_ = value;
    }
  }

  /// <summary>Field number for the "monthly_card_expiry_day" field.</summary>
  public const int MonthlyCardExpiryDayFieldNumber = 20;
  private long monthlyCardExpiryDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long MonthlyCardExpiryDay {
    get { return monthlyCardExpiryDay_; }
    set {
      monthlyCardExpiryDay_ = value;
    }
  }

  /// <summary>Field number for the "monthly_pack_got_today" field.</summary>
  public const int MonthlyPackGotTodayFieldNumber = 21;
  private int monthlyPackGotToday_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonthlyPackGotToday {
    get { return monthlyPackGotToday_; }
    set {
      monthlyPackGotToday_ = value;
    }
  }

  /// <summary>Field number for the "preference_pack_bought" field.</summary>
  public const int PreferencePackBoughtFieldNumber = 22;
  private int preferencePackBought_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PreferencePackBought {
    get { return preferencePackBought_; }
    set {
      preferencePackBought_ = value;
    }
  }

  /// <summary>Field number for the "login_gold" field.</summary>
  public const int LoginGoldFieldNumber = 23;
  private long loginGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LoginGold {
    get { return loginGold_; }
    set {
      loginGold_ = value;
    }
  }

  /// <summary>Field number for the "first_pay_products" field.</summary>
  public const int FirstPayProductsFieldNumber = 24;
  private static readonly pb::FieldCodec<int> _repeated_firstPayProducts_codec
      = pb::FieldCodec.ForInt32(194);
  private readonly pbc::RepeatedField<int> firstPayProducts_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> FirstPayProducts {
    get { return firstPayProducts_; }
  }

  /// <summary>Field number for the "lucky_gold" field.</summary>
  public const int LuckyGoldFieldNumber = 25;
  private long luckyGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LuckyGold {
    get { return luckyGold_; }
    set {
      luckyGold_ = value;
    }
  }

  /// <summary>Field number for the "lucky_fish_num" field.</summary>
  public const int LuckyFishNumFieldNumber = 26;
  private int luckyFishNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LuckyFishNum {
    get { return luckyFishNum_; }
    set {
      luckyFishNum_ = value;
    }
  }

  /// <summary>Field number for the "charm" field.</summary>
  public const int CharmFieldNumber = 27;
  private long charm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Charm {
    get { return charm_; }
    set {
      charm_ = value;
    }
  }

  /// <summary>Field number for the "charm_exchange_times" field.</summary>
  public const int CharmExchangeTimesFieldNumber = 28;
  private int charmExchangeTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CharmExchangeTimes {
    get { return charmExchangeTimes_; }
    set {
      charmExchangeTimes_ = value;
    }
  }

  /// <summary>Field number for the "bank_gold" field.</summary>
  public const int BankGoldFieldNumber = 29;
  private long bankGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BankGold {
    get { return bankGold_; }
    set {
      bankGold_ = value;
    }
  }

  /// <summary>Field number for the "has_bank_pswd" field.</summary>
  public const int HasBankPswdFieldNumber = 30;
  private bool hasBankPswd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBankPswd {
    get { return hasBankPswd_; }
    set {
      hasBankPswd_ = value;
    }
  }

  /// <summary>Field number for the "error_msg" field.</summary>
  public const int ErrorMsgFieldNumber = 31;
  private string errorMsg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMsg {
    get { return errorMsg_; }
    set {
      errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 32;
  private long gameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GameId {
    get { return gameId_; }
    set {
      gameId_ = value;
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 33;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "test_coin" field.</summary>
  public const int TestCoinFieldNumber = 34;
  private long testCoin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TestCoin {
    get { return testCoin_; }
    set {
      testCoin_ = value;
    }
  }

  /// <summary>Field number for the "is_test_room" field.</summary>
  public const int IsTestRoomFieldNumber = 35;
  private int isTestRoom_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsTestRoom {
    get { return isTestRoom_; }
    set {
      isTestRoom_ = value;
    }
  }

  /// <summary>Field number for the "cannon_bottom_stly" field.</summary>
  public const int CannonBottomStlyFieldNumber = 36;
  private int cannonBottomStly_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonBottomStly {
    get { return cannonBottomStly_; }
    set {
      cannonBottomStly_ = value;
    }
  }

  /// <summary>Field number for the "nManmon" field.</summary>
  public const int NManmonFieldNumber = 37;
  private int nManmon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NManmon {
    get { return nManmon_; }
    set {
      nManmon_ = value;
    }
  }

  /// <summary>Field number for the "nBossMatchState" field.</summary>
  public const int NBossMatchStateFieldNumber = 38;
  private int nBossMatchState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NBossMatchState {
    get { return nBossMatchState_; }
    set {
      nBossMatchState_ = value;
    }
  }

  /// <summary>Field number for the "isNewUser" field.</summary>
  public const int IsNewUserFieldNumber = 39;
  private int isNewUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsNewUser {
    get { return isNewUser_; }
    set {
      isNewUser_ = value;
    }
  }

  /// <summary>Field number for the "isRongYuDianTangUser" field.</summary>
  public const int IsRongYuDianTangUserFieldNumber = 40;
  private int isRongYuDianTangUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsRongYuDianTangUser {
    get { return isRongYuDianTangUser_; }
    set {
      isRongYuDianTangUser_ = value;
    }
  }

  /// <summary>Field number for the "isPaiWeiTopUpJiaCeng" field.</summary>
  public const int IsPaiWeiTopUpJiaCengFieldNumber = 41;
  private int isPaiWeiTopUpJiaCeng_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsPaiWeiTopUpJiaCeng {
    get { return isPaiWeiTopUpJiaCeng_; }
    set {
      isPaiWeiTopUpJiaCeng_ = value;
    }
  }

  /// <summary>Field number for the "isResterUserSteate" field.</summary>
  public const int IsResterUserSteateFieldNumber = 42;
  private int isResterUserSteate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsResterUserSteate {
    get { return isResterUserSteate_; }
    set {
      isResterUserSteate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Nickname != other.Nickname) return false;
    if (Avatar != other.Avatar) return false;
    if (VipLevel != other.VipLevel) return false;
    if (Level != other.Level) return false;
    if (Experience != other.Experience) return false;
    if (UserId != other.UserId) return false;
    if (Gold != other.Gold) return false;
    if (Diamond != other.Diamond) return false;
    if (TopupSum != other.TopupSum) return false;
    if (MaxCannonMultiple != other.MaxCannonMultiple) return false;
    if (SailDay != other.SailDay) return false;
    if (RedPacketTicket != other.RedPacketTicket) return false;
    if (CannonStyle != other.CannonStyle) return false;
    if(!signIn_.Equals(other.signIn_)) return false;
    if (NextLevelExp != other.NextLevelExp) return false;
    if (BeginnerCurTask != other.BeginnerCurTask) return false;
    if (BeginnerProgress != other.BeginnerProgress) return false;
    if (RoomCard != other.RoomCard) return false;
    if (MonthlyCardExpiryDay != other.MonthlyCardExpiryDay) return false;
    if (MonthlyPackGotToday != other.MonthlyPackGotToday) return false;
    if (PreferencePackBought != other.PreferencePackBought) return false;
    if (LoginGold != other.LoginGold) return false;
    if(!firstPayProducts_.Equals(other.firstPayProducts_)) return false;
    if (LuckyGold != other.LuckyGold) return false;
    if (LuckyFishNum != other.LuckyFishNum) return false;
    if (Charm != other.Charm) return false;
    if (CharmExchangeTimes != other.CharmExchangeTimes) return false;
    if (BankGold != other.BankGold) return false;
    if (HasBankPswd != other.HasBankPswd) return false;
    if (ErrorMsg != other.ErrorMsg) return false;
    if (GameId != other.GameId) return false;
    if (Gender != other.Gender) return false;
    if (TestCoin != other.TestCoin) return false;
    if (IsTestRoom != other.IsTestRoom) return false;
    if (CannonBottomStly != other.CannonBottomStly) return false;
    if (NManmon != other.NManmon) return false;
    if (NBossMatchState != other.NBossMatchState) return false;
    if (IsNewUser != other.IsNewUser) return false;
    if (IsRongYuDianTangUser != other.IsRongYuDianTangUser) return false;
    if (IsPaiWeiTopUpJiaCeng != other.IsPaiWeiTopUpJiaCeng) return false;
    if (IsResterUserSteate != other.IsResterUserSteate) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Experience != 0) hash ^= Experience.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    if (Diamond != 0L) hash ^= Diamond.GetHashCode();
    if (TopupSum != 0) hash ^= TopupSum.GetHashCode();
    if (MaxCannonMultiple != 0) hash ^= MaxCannonMultiple.GetHashCode();
    if (SailDay != 0) hash ^= SailDay.GetHashCode();
    if (RedPacketTicket != 0L) hash ^= RedPacketTicket.GetHashCode();
    if (CannonStyle != 0) hash ^= CannonStyle.GetHashCode();
    hash ^= signIn_.GetHashCode();
    if (NextLevelExp != 0) hash ^= NextLevelExp.GetHashCode();
    if (BeginnerCurTask != 0) hash ^= BeginnerCurTask.GetHashCode();
    if (BeginnerProgress != 0) hash ^= BeginnerProgress.GetHashCode();
    if (RoomCard != 0L) hash ^= RoomCard.GetHashCode();
    if (MonthlyCardExpiryDay != 0L) hash ^= MonthlyCardExpiryDay.GetHashCode();
    if (MonthlyPackGotToday != 0) hash ^= MonthlyPackGotToday.GetHashCode();
    if (PreferencePackBought != 0) hash ^= PreferencePackBought.GetHashCode();
    if (LoginGold != 0L) hash ^= LoginGold.GetHashCode();
    hash ^= firstPayProducts_.GetHashCode();
    if (LuckyGold != 0L) hash ^= LuckyGold.GetHashCode();
    if (LuckyFishNum != 0) hash ^= LuckyFishNum.GetHashCode();
    if (Charm != 0L) hash ^= Charm.GetHashCode();
    if (CharmExchangeTimes != 0) hash ^= CharmExchangeTimes.GetHashCode();
    if (BankGold != 0L) hash ^= BankGold.GetHashCode();
    if (HasBankPswd != false) hash ^= HasBankPswd.GetHashCode();
    if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
    if (GameId != 0L) hash ^= GameId.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (TestCoin != 0L) hash ^= TestCoin.GetHashCode();
    if (IsTestRoom != 0) hash ^= IsTestRoom.GetHashCode();
    if (CannonBottomStly != 0) hash ^= CannonBottomStly.GetHashCode();
    if (NManmon != 0) hash ^= NManmon.GetHashCode();
    if (NBossMatchState != 0) hash ^= NBossMatchState.GetHashCode();
    if (IsNewUser != 0) hash ^= IsNewUser.GetHashCode();
    if (IsRongYuDianTangUser != 0) hash ^= IsRongYuDianTangUser.GetHashCode();
    if (IsPaiWeiTopUpJiaCeng != 0) hash ^= IsPaiWeiTopUpJiaCeng.GetHashCode();
    if (IsResterUserSteate != 0) hash ^= IsResterUserSteate.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Nickname);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Avatar);
    }
    if (VipLevel != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(VipLevel);
    }
    if (Experience != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Experience);
    }
    if (UserId != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(UserId);
    }
    if (Gold != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(Gold);
    }
    if (Diamond != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(Diamond);
    }
    if (TopupSum != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(TopupSum);
    }
    if (MaxCannonMultiple != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(MaxCannonMultiple);
    }
    if (Level != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Level);
    }
    if (SailDay != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(SailDay);
    }
    if (RedPacketTicket != 0L) {
      output.WriteRawTag(104);
      output.WriteInt64(RedPacketTicket);
    }
    if (CannonStyle != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(CannonStyle);
    }
    signIn_.WriteTo(output, _repeated_signIn_codec);
    if (NextLevelExp != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(NextLevelExp);
    }
    if (BeginnerCurTask != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(BeginnerCurTask);
    }
    if (BeginnerProgress != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(BeginnerProgress);
    }
    if (RoomCard != 0L) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(RoomCard);
    }
    if (MonthlyCardExpiryDay != 0L) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(MonthlyCardExpiryDay);
    }
    if (MonthlyPackGotToday != 0) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(MonthlyPackGotToday);
    }
    if (PreferencePackBought != 0) {
      output.WriteRawTag(176, 1);
      output.WriteInt32(PreferencePackBought);
    }
    if (LoginGold != 0L) {
      output.WriteRawTag(184, 1);
      output.WriteInt64(LoginGold);
    }
    firstPayProducts_.WriteTo(output, _repeated_firstPayProducts_codec);
    if (LuckyGold != 0L) {
      output.WriteRawTag(200, 1);
      output.WriteInt64(LuckyGold);
    }
    if (LuckyFishNum != 0) {
      output.WriteRawTag(208, 1);
      output.WriteInt32(LuckyFishNum);
    }
    if (Charm != 0L) {
      output.WriteRawTag(216, 1);
      output.WriteInt64(Charm);
    }
    if (CharmExchangeTimes != 0) {
      output.WriteRawTag(224, 1);
      output.WriteInt32(CharmExchangeTimes);
    }
    if (BankGold != 0L) {
      output.WriteRawTag(232, 1);
      output.WriteInt64(BankGold);
    }
    if (HasBankPswd != false) {
      output.WriteRawTag(240, 1);
      output.WriteBool(HasBankPswd);
    }
    if (ErrorMsg.Length != 0) {
      output.WriteRawTag(250, 1);
      output.WriteString(ErrorMsg);
    }
    if (GameId != 0L) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(GameId);
    }
    if (Gender != 0) {
      output.WriteRawTag(136, 2);
      output.WriteInt32(Gender);
    }
    if (TestCoin != 0L) {
      output.WriteRawTag(144, 2);
      output.WriteInt64(TestCoin);
    }
    if (IsTestRoom != 0) {
      output.WriteRawTag(152, 2);
      output.WriteInt32(IsTestRoom);
    }
    if (CannonBottomStly != 0) {
      output.WriteRawTag(160, 2);
      output.WriteInt32(CannonBottomStly);
    }
    if (NManmon != 0) {
      output.WriteRawTag(168, 2);
      output.WriteInt32(NManmon);
    }
    if (NBossMatchState != 0) {
      output.WriteRawTag(176, 2);
      output.WriteInt32(NBossMatchState);
    }
    if (IsNewUser != 0) {
      output.WriteRawTag(184, 2);
      output.WriteInt32(IsNewUser);
    }
    if (IsRongYuDianTangUser != 0) {
      output.WriteRawTag(192, 2);
      output.WriteInt32(IsRongYuDianTangUser);
    }
    if (IsPaiWeiTopUpJiaCeng != 0) {
      output.WriteRawTag(200, 2);
      output.WriteInt32(IsPaiWeiTopUpJiaCeng);
    }
    if (IsResterUserSteate != 0) {
      output.WriteRawTag(208, 2);
      output.WriteInt32(IsResterUserSteate);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    if (VipLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Experience != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    if (Diamond != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
    }
    if (TopupSum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopupSum);
    }
    if (MaxCannonMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCannonMultiple);
    }
    if (SailDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SailDay);
    }
    if (RedPacketTicket != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RedPacketTicket);
    }
    if (CannonStyle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonStyle);
    }
    size += signIn_.CalculateSize(_repeated_signIn_codec);
    if (NextLevelExp != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NextLevelExp);
    }
    if (BeginnerCurTask != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BeginnerCurTask);
    }
    if (BeginnerProgress != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BeginnerProgress);
    }
    if (RoomCard != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RoomCard);
    }
    if (MonthlyCardExpiryDay != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MonthlyCardExpiryDay);
    }
    if (MonthlyPackGotToday != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MonthlyPackGotToday);
    }
    if (PreferencePackBought != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PreferencePackBought);
    }
    if (LoginGold != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LoginGold);
    }
    size += firstPayProducts_.CalculateSize(_repeated_firstPayProducts_codec);
    if (LuckyGold != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LuckyGold);
    }
    if (LuckyFishNum != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(LuckyFishNum);
    }
    if (Charm != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Charm);
    }
    if (CharmExchangeTimes != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CharmExchangeTimes);
    }
    if (BankGold != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(BankGold);
    }
    if (HasBankPswd != false) {
      size += 2 + 1;
    }
    if (ErrorMsg.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
    }
    if (GameId != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(GameId);
    }
    if (Gender != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (TestCoin != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(TestCoin);
    }
    if (IsTestRoom != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsTestRoom);
    }
    if (CannonBottomStly != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CannonBottomStly);
    }
    if (NManmon != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NManmon);
    }
    if (NBossMatchState != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(NBossMatchState);
    }
    if (IsNewUser != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsNewUser);
    }
    if (IsRongYuDianTangUser != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsRongYuDianTangUser);
    }
    if (IsPaiWeiTopUpJiaCeng != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsPaiWeiTopUpJiaCeng);
    }
    if (IsResterUserSteate != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsResterUserSteate);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.VipLevel != 0) {
      VipLevel = other.VipLevel;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Experience != 0) {
      Experience = other.Experience;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    if (other.Diamond != 0L) {
      Diamond = other.Diamond;
    }
    if (other.TopupSum != 0) {
      TopupSum = other.TopupSum;
    }
    if (other.MaxCannonMultiple != 0) {
      MaxCannonMultiple = other.MaxCannonMultiple;
    }
    if (other.SailDay != 0) {
      SailDay = other.SailDay;
    }
    if (other.RedPacketTicket != 0L) {
      RedPacketTicket = other.RedPacketTicket;
    }
    if (other.CannonStyle != 0) {
      CannonStyle = other.CannonStyle;
    }
    signIn_.Add(other.signIn_);
    if (other.NextLevelExp != 0) {
      NextLevelExp = other.NextLevelExp;
    }
    if (other.BeginnerCurTask != 0) {
      BeginnerCurTask = other.BeginnerCurTask;
    }
    if (other.BeginnerProgress != 0) {
      BeginnerProgress = other.BeginnerProgress;
    }
    if (other.RoomCard != 0L) {
      RoomCard = other.RoomCard;
    }
    if (other.MonthlyCardExpiryDay != 0L) {
      MonthlyCardExpiryDay = other.MonthlyCardExpiryDay;
    }
    if (other.MonthlyPackGotToday != 0) {
      MonthlyPackGotToday = other.MonthlyPackGotToday;
    }
    if (other.PreferencePackBought != 0) {
      PreferencePackBought = other.PreferencePackBought;
    }
    if (other.LoginGold != 0L) {
      LoginGold = other.LoginGold;
    }
    firstPayProducts_.Add(other.firstPayProducts_);
    if (other.LuckyGold != 0L) {
      LuckyGold = other.LuckyGold;
    }
    if (other.LuckyFishNum != 0) {
      LuckyFishNum = other.LuckyFishNum;
    }
    if (other.Charm != 0L) {
      Charm = other.Charm;
    }
    if (other.CharmExchangeTimes != 0) {
      CharmExchangeTimes = other.CharmExchangeTimes;
    }
    if (other.BankGold != 0L) {
      BankGold = other.BankGold;
    }
    if (other.HasBankPswd != false) {
      HasBankPswd = other.HasBankPswd;
    }
    if (other.ErrorMsg.Length != 0) {
      ErrorMsg = other.ErrorMsg;
    }
    if (other.GameId != 0L) {
      GameId = other.GameId;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.TestCoin != 0L) {
      TestCoin = other.TestCoin;
    }
    if (other.IsTestRoom != 0) {
      IsTestRoom = other.IsTestRoom;
    }
    if (other.CannonBottomStly != 0) {
      CannonBottomStly = other.CannonBottomStly;
    }
    if (other.NManmon != 0) {
      NManmon = other.NManmon;
    }
    if (other.NBossMatchState != 0) {
      NBossMatchState = other.NBossMatchState;
    }
    if (other.IsNewUser != 0) {
      IsNewUser = other.IsNewUser;
    }
    if (other.IsRongYuDianTangUser != 0) {
      IsRongYuDianTangUser = other.IsRongYuDianTangUser;
    }
    if (other.IsPaiWeiTopUpJiaCeng != 0) {
      IsPaiWeiTopUpJiaCeng = other.IsPaiWeiTopUpJiaCeng;
    }
    if (other.IsResterUserSteate != 0) {
      IsResterUserSteate = other.IsResterUserSteate;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          Nickname = input.ReadString();
          break;
        }
        case 26: {
          Avatar = input.ReadString();
          break;
        }
        case 32: {
          VipLevel = input.ReadInt32();
          break;
        }
        case 40: {
          Experience = input.ReadInt32();
          break;
        }
        case 48: {
          UserId = input.ReadUInt32();
          break;
        }
        case 56: {
          Gold = input.ReadInt64();
          break;
        }
        case 64: {
          Diamond = input.ReadInt64();
          break;
        }
        case 72: {
          TopupSum = input.ReadInt32();
          break;
        }
        case 80: {
          MaxCannonMultiple = input.ReadInt32();
          break;
        }
        case 88: {
          Level = input.ReadInt32();
          break;
        }
        case 96: {
          SailDay = input.ReadInt32();
          break;
        }
        case 104: {
          RedPacketTicket = input.ReadInt64();
          break;
        }
        case 112: {
          CannonStyle = input.ReadInt32();
          break;
        }
        case 122: {
          signIn_.AddEntriesFrom(input, _repeated_signIn_codec);
          break;
        }
        case 128: {
          NextLevelExp = input.ReadInt32();
          break;
        }
        case 136: {
          BeginnerCurTask = input.ReadInt32();
          break;
        }
        case 144: {
          BeginnerProgress = input.ReadInt32();
          break;
        }
        case 152: {
          RoomCard = input.ReadInt64();
          break;
        }
        case 160: {
          MonthlyCardExpiryDay = input.ReadInt64();
          break;
        }
        case 168: {
          MonthlyPackGotToday = input.ReadInt32();
          break;
        }
        case 176: {
          PreferencePackBought = input.ReadInt32();
          break;
        }
        case 184: {
          LoginGold = input.ReadInt64();
          break;
        }
        case 194:
        case 192: {
          firstPayProducts_.AddEntriesFrom(input, _repeated_firstPayProducts_codec);
          break;
        }
        case 200: {
          LuckyGold = input.ReadInt64();
          break;
        }
        case 208: {
          LuckyFishNum = input.ReadInt32();
          break;
        }
        case 216: {
          Charm = input.ReadInt64();
          break;
        }
        case 224: {
          CharmExchangeTimes = input.ReadInt32();
          break;
        }
        case 232: {
          BankGold = input.ReadInt64();
          break;
        }
        case 240: {
          HasBankPswd = input.ReadBool();
          break;
        }
        case 250: {
          ErrorMsg = input.ReadString();
          break;
        }
        case 256: {
          GameId = input.ReadInt64();
          break;
        }
        case 264: {
          Gender = input.ReadInt32();
          break;
        }
        case 272: {
          TestCoin = input.ReadInt64();
          break;
        }
        case 280: {
          IsTestRoom = input.ReadInt32();
          break;
        }
        case 288: {
          CannonBottomStly = input.ReadInt32();
          break;
        }
        case 296: {
          NManmon = input.ReadInt32();
          break;
        }
        case 304: {
          NBossMatchState = input.ReadInt32();
          break;
        }
        case 312: {
          IsNewUser = input.ReadInt32();
          break;
        }
        case 320: {
          IsRongYuDianTangUser = input.ReadInt32();
          break;
        }
        case 328: {
          IsPaiWeiTopUpJiaCeng = input.ReadInt32();
          break;
        }
        case 336: {
          IsResterUserSteate = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_Property : pb::IMessage<PB_Property> {
  private static readonly pb::MessageParser<PB_Property> _parser = new pb::MessageParser<PB_Property>(() => new PB_Property());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_Property> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Property() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Property(PB_Property other) : this() {
    propertyType_ = other.propertyType_;
    sum_ = other.sum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Property Clone() {
    return new PB_Property(this);
  }

  /// <summary>Field number for the "property_type" field.</summary>
  public const int PropertyTypeFieldNumber = 1;
  private int propertyType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropertyType {
    get { return propertyType_; }
    set {
      propertyType_ = value;
    }
  }

  /// <summary>Field number for the "sum" field.</summary>
  public const int SumFieldNumber = 2;
  private int sum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sum {
    get { return sum_; }
    set {
      sum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_Property);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_Property other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropertyType != other.PropertyType) return false;
    if (Sum != other.Sum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropertyType != 0) hash ^= PropertyType.GetHashCode();
    if (Sum != 0) hash ^= Sum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropertyType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PropertyType);
    }
    if (Sum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Sum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropertyType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyType);
    }
    if (Sum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_Property other) {
    if (other == null) {
      return;
    }
    if (other.PropertyType != 0) {
      PropertyType = other.PropertyType;
    }
    if (other.Sum != 0) {
      Sum = other.Sum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PropertyType = input.ReadInt32();
          break;
        }
        case 16: {
          Sum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetFishLuckyDrawRequest : pb::IMessage<PB_GetFishLuckyDrawRequest> {
  private static readonly pb::MessageParser<PB_GetFishLuckyDrawRequest> _parser = new pb::MessageParser<PB_GetFishLuckyDrawRequest>(() => new PB_GetFishLuckyDrawRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetFishLuckyDrawRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFishLuckyDrawRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFishLuckyDrawRequest(PB_GetFishLuckyDrawRequest other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFishLuckyDrawRequest Clone() {
    return new PB_GetFishLuckyDrawRequest(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetFishLuckyDrawRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetFishLuckyDrawRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetFishLuckyDrawRequest other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetFishLuckyDrawResponse : pb::IMessage<PB_GetFishLuckyDrawResponse> {
  private static readonly pb::MessageParser<PB_GetFishLuckyDrawResponse> _parser = new pb::MessageParser<PB_GetFishLuckyDrawResponse>(() => new PB_GetFishLuckyDrawResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetFishLuckyDrawResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFishLuckyDrawResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFishLuckyDrawResponse(PB_GetFishLuckyDrawResponse other) : this() {
    result_ = other.result_;
    type_ = other.type_;
    Prop = other.prop_ != null ? other.Prop.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFishLuckyDrawResponse Clone() {
    return new PB_GetFishLuckyDrawResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "prop" field.</summary>
  public const int PropFieldNumber = 3;
  private global::PB_Property prop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Prop {
    get { return prop_; }
    set {
      prop_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetFishLuckyDrawResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetFishLuckyDrawResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Type != other.Type) return false;
    if (!object.Equals(Prop, other.Prop)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (prop_ != null) hash ^= Prop.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (prop_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Prop);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (prop_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prop);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetFishLuckyDrawResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.prop_ != null) {
      if (prop_ == null) {
        prop_ = new global::PB_Property();
      }
      Prop.MergeFrom(other.Prop);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          if (prop_ == null) {
            prop_ = new global::PB_Property();
          }
          input.ReadMessage(prop_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyFishLuckyDraw : pb::IMessage<PB_NotifyFishLuckyDraw> {
  private static readonly pb::MessageParser<PB_NotifyFishLuckyDraw> _parser = new pb::MessageParser<PB_NotifyFishLuckyDraw>(() => new PB_NotifyFishLuckyDraw());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyFishLuckyDraw> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyFishLuckyDraw() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyFishLuckyDraw(PB_NotifyFishLuckyDraw other) : this() {
    userId_ = other.userId_;
    type_ = other.type_;
    Prop = other.prop_ != null ? other.Prop.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyFishLuckyDraw Clone() {
    return new PB_NotifyFishLuckyDraw(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "prop" field.</summary>
  public const int PropFieldNumber = 3;
  private global::PB_Property prop_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Prop {
    get { return prop_; }
    set {
      prop_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyFishLuckyDraw);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyFishLuckyDraw other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Type != other.Type) return false;
    if (!object.Equals(Prop, other.Prop)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (prop_ != null) hash ^= Prop.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (prop_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Prop);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (prop_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prop);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyFishLuckyDraw other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.prop_ != null) {
      if (prop_ == null) {
        prop_ = new global::PB_Property();
      }
      Prop.MergeFrom(other.Prop);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          if (prop_ == null) {
            prop_ = new global::PB_Property();
          }
          input.ReadMessage(prop_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LeaveRoomRequest : pb::IMessage<PB_LeaveRoomRequest> {
  private static readonly pb::MessageParser<PB_LeaveRoomRequest> _parser = new pb::MessageParser<PB_LeaveRoomRequest>(() => new PB_LeaveRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LeaveRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRoomRequest(PB_LeaveRoomRequest other) : this() {
    leaveType_ = other.leaveType_;
    roomRatio_ = other.roomRatio_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRoomRequest Clone() {
    return new PB_LeaveRoomRequest(this);
  }

  /// <summary>Field number for the "leave_type" field.</summary>
  public const int LeaveTypeFieldNumber = 1;
  private int leaveType_;
  /// <summary>
  ///the same as enter_type in @message EnterClassicalRoomRequest
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeaveType {
    get { return leaveType_; }
    set {
      leaveType_ = value;
    }
  }

  /// <summary>Field number for the "room_ratio" field.</summary>
  public const int RoomRatioFieldNumber = 2;
  private int roomRatio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomRatio {
    get { return roomRatio_; }
    set {
      roomRatio_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private long roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LeaveRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LeaveRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LeaveType != other.LeaveType) return false;
    if (RoomRatio != other.RoomRatio) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LeaveType != 0) hash ^= LeaveType.GetHashCode();
    if (RoomRatio != 0) hash ^= RoomRatio.GetHashCode();
    if (RoomIndex != 0L) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LeaveType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LeaveType);
    }
    if (RoomRatio != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomRatio);
    }
    if (RoomIndex != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LeaveType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveType);
    }
    if (RoomRatio != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomRatio);
    }
    if (RoomIndex != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LeaveRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.LeaveType != 0) {
      LeaveType = other.LeaveType;
    }
    if (other.RoomRatio != 0) {
      RoomRatio = other.RoomRatio;
    }
    if (other.RoomIndex != 0L) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LeaveType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomRatio = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LeaveRoomResponse : pb::IMessage<PB_LeaveRoomResponse> {
  private static readonly pb::MessageParser<PB_LeaveRoomResponse> _parser = new pb::MessageParser<PB_LeaveRoomResponse>(() => new PB_LeaveRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LeaveRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRoomResponse(PB_LeaveRoomResponse other) : this() {
    result_ = other.result_;
    gold_ = other.gold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRoomResponse Clone() {
    return new PB_LeaveRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 2;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LeaveRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LeaveRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Gold != other.Gold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Gold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Gold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LeaveRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Gold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OtherEnterRoomInfrom : pb::IMessage<PB_OtherEnterRoomInfrom> {
  private static readonly pb::MessageParser<PB_OtherEnterRoomInfrom> _parser = new pb::MessageParser<PB_OtherEnterRoomInfrom>(() => new PB_OtherEnterRoomInfrom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OtherEnterRoomInfrom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherEnterRoomInfrom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherEnterRoomInfrom(PB_OtherEnterRoomInfrom other) : this() {
    enterType_ = other.enterType_;
    roomRatio_ = other.roomRatio_;
    roomIndex_ = other.roomIndex_;
    Other = other.other_ != null ? other.Other.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherEnterRoomInfrom Clone() {
    return new PB_OtherEnterRoomInfrom(this);
  }

  /// <summary>Field number for the "enter_type" field.</summary>
  public const int EnterTypeFieldNumber = 1;
  private int enterType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EnterType {
    get { return enterType_; }
    set {
      enterType_ = value;
    }
  }

  /// <summary>Field number for the "room_ratio" field.</summary>
  public const int RoomRatioFieldNumber = 2;
  private int roomRatio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomRatio {
    get { return roomRatio_; }
    set {
      roomRatio_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private long roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "other" field.</summary>
  public const int OtherFieldNumber = 4;
  private global::OtherUserInfo other_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OtherUserInfo Other {
    get { return other_; }
    set {
      other_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OtherEnterRoomInfrom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OtherEnterRoomInfrom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EnterType != other.EnterType) return false;
    if (RoomRatio != other.RoomRatio) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (!object.Equals(Other, other.Other)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EnterType != 0) hash ^= EnterType.GetHashCode();
    if (RoomRatio != 0) hash ^= RoomRatio.GetHashCode();
    if (RoomIndex != 0L) hash ^= RoomIndex.GetHashCode();
    if (other_ != null) hash ^= Other.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EnterType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EnterType);
    }
    if (RoomRatio != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomRatio);
    }
    if (RoomIndex != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(RoomIndex);
    }
    if (other_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EnterType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnterType);
    }
    if (RoomRatio != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomRatio);
    }
    if (RoomIndex != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomIndex);
    }
    if (other_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OtherEnterRoomInfrom other) {
    if (other == null) {
      return;
    }
    if (other.EnterType != 0) {
      EnterType = other.EnterType;
    }
    if (other.RoomRatio != 0) {
      RoomRatio = other.RoomRatio;
    }
    if (other.RoomIndex != 0L) {
      RoomIndex = other.RoomIndex;
    }
    if (other.other_ != null) {
      if (other_ == null) {
        other_ = new global::OtherUserInfo();
      }
      Other.MergeFrom(other.Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EnterType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomRatio = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt64();
          break;
        }
        case 34: {
          if (other_ == null) {
            other_ = new global::OtherUserInfo();
          }
          input.ReadMessage(other_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OtherLeaveRoomInfrom : pb::IMessage<PB_OtherLeaveRoomInfrom> {
  private static readonly pb::MessageParser<PB_OtherLeaveRoomInfrom> _parser = new pb::MessageParser<PB_OtherLeaveRoomInfrom>(() => new PB_OtherLeaveRoomInfrom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OtherLeaveRoomInfrom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherLeaveRoomInfrom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherLeaveRoomInfrom(PB_OtherLeaveRoomInfrom other) : this() {
    seatIndex_ = other.seatIndex_;
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherLeaveRoomInfrom Clone() {
    return new PB_OtherLeaveRoomInfrom(this);
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 1;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OtherLeaveRoomInfrom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OtherLeaveRoomInfrom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatIndex != other.SeatIndex) return false;
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatIndex);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OtherLeaveRoomInfrom other) {
    if (other == null) {
      return;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_UserFireRequest : pb::IMessage<PB_UserFireRequest> {
  private static readonly pb::MessageParser<PB_UserFireRequest> _parser = new pb::MessageParser<PB_UserFireRequest>(() => new PB_UserFireRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_UserFireRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UserFireRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UserFireRequest(PB_UserFireRequest other) : this() {
    bulletId_ = other.bulletId_;
    cannonRatio_ = other.cannonRatio_;
    Position = other.position_ != null ? other.Position.Clone() : null;
    userId_ = other.userId_;
    groupId_ = other.groupId_;
    fishId_ = other.fishId_;
    violent_ = other.violent_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UserFireRequest Clone() {
    return new PB_UserFireRequest(this);
  }

  /// <summary>Field number for the "bullet_id" field.</summary>
  public const int BulletIdFieldNumber = 1;
  private int bulletId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BulletId {
    get { return bulletId_; }
    set {
      bulletId_ = value;
    }
  }

  /// <summary>Field number for the "cannon_ratio" field.</summary>
  public const int CannonRatioFieldNumber = 2;
  private int cannonRatio_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonRatio {
    get { return cannonRatio_; }
    set {
      cannonRatio_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private global::BulletPosition position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BulletPosition Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 4;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "group_id" field.</summary>
  public const int GroupIdFieldNumber = 5;
  private int groupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GroupId {
    get { return groupId_; }
    set {
      groupId_ = value;
    }
  }

  /// <summary>Field number for the "fish_id" field.</summary>
  public const int FishIdFieldNumber = 6;
  private int fishId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { return fishId_; }
    set {
      fishId_ = value;
    }
  }

  /// <summary>Field number for the "violent" field.</summary>
  public const int ViolentFieldNumber = 7;
  private bool violent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Violent {
    get { return violent_; }
    set {
      violent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_UserFireRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_UserFireRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BulletId != other.BulletId) return false;
    if (CannonRatio != other.CannonRatio) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (UserId != other.UserId) return false;
    if (GroupId != other.GroupId) return false;
    if (FishId != other.FishId) return false;
    if (Violent != other.Violent) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BulletId != 0) hash ^= BulletId.GetHashCode();
    if (CannonRatio != 0) hash ^= CannonRatio.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (GroupId != 0) hash ^= GroupId.GetHashCode();
    if (FishId != 0) hash ^= FishId.GetHashCode();
    if (Violent != false) hash ^= Violent.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BulletId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BulletId);
    }
    if (CannonRatio != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CannonRatio);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
    if (UserId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UserId);
    }
    if (GroupId != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GroupId);
    }
    if (FishId != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(FishId);
    }
    if (Violent != false) {
      output.WriteRawTag(56);
      output.WriteBool(Violent);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BulletId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletId);
    }
    if (CannonRatio != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonRatio);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (GroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
    }
    if (FishId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (Violent != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_UserFireRequest other) {
    if (other == null) {
      return;
    }
    if (other.BulletId != 0) {
      BulletId = other.BulletId;
    }
    if (other.CannonRatio != 0) {
      CannonRatio = other.CannonRatio;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::BulletPosition();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.GroupId != 0) {
      GroupId = other.GroupId;
    }
    if (other.FishId != 0) {
      FishId = other.FishId;
    }
    if (other.Violent != false) {
      Violent = other.Violent;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BulletId = input.ReadInt32();
          break;
        }
        case 16: {
          CannonRatio = input.ReadInt32();
          break;
        }
        case 26: {
          if (position_ == null) {
            position_ = new global::BulletPosition();
          }
          input.ReadMessage(position_);
          break;
        }
        case 32: {
          UserId = input.ReadInt32();
          break;
        }
        case 40: {
          GroupId = input.ReadInt32();
          break;
        }
        case 48: {
          FishId = input.ReadInt32();
          break;
        }
        case 56: {
          Violent = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_FishGroupInfrom : pb::IMessage<PB_FishGroupInfrom> {
  private static readonly pb::MessageParser<PB_FishGroupInfrom> _parser = new pb::MessageParser<PB_FishGroupInfrom>(() => new PB_FishGroupInfrom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_FishGroupInfrom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishGroupInfrom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishGroupInfrom(PB_FishGroupInfrom other) : this() {
    groupId_ = other.groupId_;
    fishType_ = other.fishType_;
    fishNum_ = other.fishNum_;
    trackId_ = other.trackId_;
    trackType_ = other.trackType_;
    tideType_ = other.tideType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishGroupInfrom Clone() {
    return new PB_FishGroupInfrom(this);
  }

  /// <summary>Field number for the "group_id" field.</summary>
  public const int GroupIdFieldNumber = 1;
  private int groupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GroupId {
    get { return groupId_; }
    set {
      groupId_ = value;
    }
  }

  /// <summary>Field number for the "fish_type" field.</summary>
  public const int FishTypeFieldNumber = 2;
  private int fishType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishType {
    get { return fishType_; }
    set {
      fishType_ = value;
    }
  }

  /// <summary>Field number for the "fish_num" field.</summary>
  public const int FishNumFieldNumber = 3;
  private int fishNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishNum {
    get { return fishNum_; }
    set {
      fishNum_ = value;
    }
  }

  /// <summary>Field number for the "track_id" field.</summary>
  public const int TrackIdFieldNumber = 4;
  private int trackId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TrackId {
    get { return trackId_; }
    set {
      trackId_ = value;
    }
  }

  /// <summary>Field number for the "track_type" field.</summary>
  public const int TrackTypeFieldNumber = 5;
  private int trackType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TrackType {
    get { return trackType_; }
    set {
      trackType_ = value;
    }
  }

  /// <summary>Field number for the "tide_type" field.</summary>
  public const int TideTypeFieldNumber = 6;
  private int tideType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TideType {
    get { return tideType_; }
    set {
      tideType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_FishGroupInfrom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_FishGroupInfrom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GroupId != other.GroupId) return false;
    if (FishType != other.FishType) return false;
    if (FishNum != other.FishNum) return false;
    if (TrackId != other.TrackId) return false;
    if (TrackType != other.TrackType) return false;
    if (TideType != other.TideType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GroupId != 0) hash ^= GroupId.GetHashCode();
    if (FishType != 0) hash ^= FishType.GetHashCode();
    if (FishNum != 0) hash ^= FishNum.GetHashCode();
    if (TrackId != 0) hash ^= TrackId.GetHashCode();
    if (TrackType != 0) hash ^= TrackType.GetHashCode();
    if (TideType != 0) hash ^= TideType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GroupId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GroupId);
    }
    if (FishType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FishType);
    }
    if (FishNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FishNum);
    }
    if (TrackId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TrackId);
    }
    if (TrackType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TrackType);
    }
    if (TideType != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TideType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
    }
    if (FishType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishType);
    }
    if (FishNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishNum);
    }
    if (TrackId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrackId);
    }
    if (TrackType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrackType);
    }
    if (TideType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TideType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_FishGroupInfrom other) {
    if (other == null) {
      return;
    }
    if (other.GroupId != 0) {
      GroupId = other.GroupId;
    }
    if (other.FishType != 0) {
      FishType = other.FishType;
    }
    if (other.FishNum != 0) {
      FishNum = other.FishNum;
    }
    if (other.TrackId != 0) {
      TrackId = other.TrackId;
    }
    if (other.TrackType != 0) {
      TrackType = other.TrackType;
    }
    if (other.TideType != 0) {
      TideType = other.TideType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GroupId = input.ReadInt32();
          break;
        }
        case 16: {
          FishType = input.ReadInt32();
          break;
        }
        case 24: {
          FishNum = input.ReadInt32();
          break;
        }
        case 32: {
          TrackId = input.ReadInt32();
          break;
        }
        case 40: {
          TrackType = input.ReadInt32();
          break;
        }
        case 48: {
          TideType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_FishHitInfrom : pb::IMessage<PB_FishHitInfrom> {
  private static readonly pb::MessageParser<PB_FishHitInfrom> _parser = new pb::MessageParser<PB_FishHitInfrom>(() => new PB_FishHitInfrom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_FishHitInfrom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishHitInfrom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishHitInfrom(PB_FishHitInfrom other) : this() {
    bulletId_ = other.bulletId_;
    groupId_ = other.groupId_;
    fishId_ = other.fishId_;
    userId_ = other.userId_;
    cannonMultiple_ = other.cannonMultiple_;
    Position = other.position_ != null ? other.Position.Clone() : null;
    properties_ = other.properties_.Clone();
    violent_ = other.violent_;
    longLiuShuiGold_ = other.longLiuShuiGold_;
    beiyongFishID_ = other.beiyongFishID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishHitInfrom Clone() {
    return new PB_FishHitInfrom(this);
  }

  /// <summary>Field number for the "bullet_id" field.</summary>
  public const int BulletIdFieldNumber = 1;
  private int bulletId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BulletId {
    get { return bulletId_; }
    set {
      bulletId_ = value;
    }
  }

  /// <summary>Field number for the "group_id" field.</summary>
  public const int GroupIdFieldNumber = 2;
  private int groupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GroupId {
    get { return groupId_; }
    set {
      groupId_ = value;
    }
  }

  /// <summary>Field number for the "fish_id" field.</summary>
  public const int FishIdFieldNumber = 3;
  private int fishId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { return fishId_; }
    set {
      fishId_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 4;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "cannon_multiple" field.</summary>
  public const int CannonMultipleFieldNumber = 5;
  private int cannonMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonMultiple {
    get { return cannonMultiple_; }
    set {
      cannonMultiple_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 6;
  private global::BulletPosition position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BulletPosition Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 7;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(58, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  /// <summary>Field number for the "violent" field.</summary>
  public const int ViolentFieldNumber = 8;
  private bool violent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Violent {
    get { return violent_; }
    set {
      violent_ = value;
    }
  }

  /// <summary>Field number for the "longLiuShuiGold" field.</summary>
  public const int LongLiuShuiGoldFieldNumber = 9;
  private long longLiuShuiGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LongLiuShuiGold {
    get { return longLiuShuiGold_; }
    set {
      longLiuShuiGold_ = value;
    }
  }

  /// <summary>Field number for the "beiyongFishID" field.</summary>
  public const int BeiyongFishIDFieldNumber = 10;
  private int beiyongFishID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeiyongFishID {
    get { return beiyongFishID_; }
    set {
      beiyongFishID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_FishHitInfrom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_FishHitInfrom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BulletId != other.BulletId) return false;
    if (GroupId != other.GroupId) return false;
    if (FishId != other.FishId) return false;
    if (UserId != other.UserId) return false;
    if (CannonMultiple != other.CannonMultiple) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if(!properties_.Equals(other.properties_)) return false;
    if (Violent != other.Violent) return false;
    if (LongLiuShuiGold != other.LongLiuShuiGold) return false;
    if (BeiyongFishID != other.BeiyongFishID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BulletId != 0) hash ^= BulletId.GetHashCode();
    if (GroupId != 0) hash ^= GroupId.GetHashCode();
    if (FishId != 0) hash ^= FishId.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (CannonMultiple != 0) hash ^= CannonMultiple.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    hash ^= properties_.GetHashCode();
    if (Violent != false) hash ^= Violent.GetHashCode();
    if (LongLiuShuiGold != 0L) hash ^= LongLiuShuiGold.GetHashCode();
    if (BeiyongFishID != 0) hash ^= BeiyongFishID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BulletId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BulletId);
    }
    if (GroupId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GroupId);
    }
    if (FishId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FishId);
    }
    if (UserId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UserId);
    }
    if (CannonMultiple != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CannonMultiple);
    }
    if (position_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Position);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
    if (Violent != false) {
      output.WriteRawTag(64);
      output.WriteBool(Violent);
    }
    if (LongLiuShuiGold != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(LongLiuShuiGold);
    }
    if (BeiyongFishID != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BeiyongFishID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BulletId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletId);
    }
    if (GroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
    }
    if (FishId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (CannonMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonMultiple);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    if (Violent != false) {
      size += 1 + 1;
    }
    if (LongLiuShuiGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongLiuShuiGold);
    }
    if (BeiyongFishID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeiyongFishID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_FishHitInfrom other) {
    if (other == null) {
      return;
    }
    if (other.BulletId != 0) {
      BulletId = other.BulletId;
    }
    if (other.GroupId != 0) {
      GroupId = other.GroupId;
    }
    if (other.FishId != 0) {
      FishId = other.FishId;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.CannonMultiple != 0) {
      CannonMultiple = other.CannonMultiple;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::BulletPosition();
      }
      Position.MergeFrom(other.Position);
    }
    properties_.Add(other.properties_);
    if (other.Violent != false) {
      Violent = other.Violent;
    }
    if (other.LongLiuShuiGold != 0L) {
      LongLiuShuiGold = other.LongLiuShuiGold;
    }
    if (other.BeiyongFishID != 0) {
      BeiyongFishID = other.BeiyongFishID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BulletId = input.ReadInt32();
          break;
        }
        case 16: {
          GroupId = input.ReadInt32();
          break;
        }
        case 24: {
          FishId = input.ReadInt32();
          break;
        }
        case 32: {
          UserId = input.ReadInt32();
          break;
        }
        case 40: {
          CannonMultiple = input.ReadInt32();
          break;
        }
        case 50: {
          if (position_ == null) {
            position_ = new global::BulletPosition();
          }
          input.ReadMessage(position_);
          break;
        }
        case 58: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
        case 64: {
          Violent = input.ReadBool();
          break;
        }
        case 72: {
          LongLiuShuiGold = input.ReadInt64();
          break;
        }
        case 80: {
          BeiyongFishID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_FishOutScene : pb::IMessage<PB_FishOutScene> {
  private static readonly pb::MessageParser<PB_FishOutScene> _parser = new pb::MessageParser<PB_FishOutScene>(() => new PB_FishOutScene());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_FishOutScene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishOutScene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishOutScene(PB_FishOutScene other) : this() {
    groupId_ = other.groupId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishOutScene Clone() {
    return new PB_FishOutScene(this);
  }

  /// <summary>Field number for the "group_id" field.</summary>
  public const int GroupIdFieldNumber = 1;
  private int groupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GroupId {
    get { return groupId_; }
    set {
      groupId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_FishOutScene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_FishOutScene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GroupId != other.GroupId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GroupId != 0) hash ^= GroupId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GroupId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GroupId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_FishOutScene other) {
    if (other == null) {
      return;
    }
    if (other.GroupId != 0) {
      GroupId = other.GroupId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GroupId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ChangeCannonRequest : pb::IMessage<PB_ChangeCannonRequest> {
  private static readonly pb::MessageParser<PB_ChangeCannonRequest> _parser = new pb::MessageParser<PB_ChangeCannonRequest>(() => new PB_ChangeCannonRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ChangeCannonRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonRequest(PB_ChangeCannonRequest other) : this() {
    cannonMultiple_ = other.cannonMultiple_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonRequest Clone() {
    return new PB_ChangeCannonRequest(this);
  }

  /// <summary>Field number for the "cannon_multiple" field.</summary>
  public const int CannonMultipleFieldNumber = 1;
  private int cannonMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonMultiple {
    get { return cannonMultiple_; }
    set {
      cannonMultiple_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ChangeCannonRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ChangeCannonRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CannonMultiple != other.CannonMultiple) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CannonMultiple != 0) hash ^= CannonMultiple.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CannonMultiple != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CannonMultiple);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CannonMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonMultiple);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ChangeCannonRequest other) {
    if (other == null) {
      return;
    }
    if (other.CannonMultiple != 0) {
      CannonMultiple = other.CannonMultiple;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CannonMultiple = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ChangeCannonResponse : pb::IMessage<PB_ChangeCannonResponse> {
  private static readonly pb::MessageParser<PB_ChangeCannonResponse> _parser = new pb::MessageParser<PB_ChangeCannonResponse>(() => new PB_ChangeCannonResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ChangeCannonResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonResponse(PB_ChangeCannonResponse other) : this() {
    result_ = other.result_;
    cannonMultiple_ = other.cannonMultiple_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonResponse Clone() {
    return new PB_ChangeCannonResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "cannon_multiple" field.</summary>
  public const int CannonMultipleFieldNumber = 2;
  private int cannonMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonMultiple {
    get { return cannonMultiple_; }
    set {
      cannonMultiple_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ChangeCannonResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ChangeCannonResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (CannonMultiple != other.CannonMultiple) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (CannonMultiple != 0) hash ^= CannonMultiple.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (CannonMultiple != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CannonMultiple);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (CannonMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonMultiple);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ChangeCannonResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.CannonMultiple != 0) {
      CannonMultiple = other.CannonMultiple;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          CannonMultiple = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OtherChangeCannon : pb::IMessage<PB_OtherChangeCannon> {
  private static readonly pb::MessageParser<PB_OtherChangeCannon> _parser = new pb::MessageParser<PB_OtherChangeCannon>(() => new PB_OtherChangeCannon());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OtherChangeCannon> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherChangeCannon() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherChangeCannon(PB_OtherChangeCannon other) : this() {
    userId_ = other.userId_;
    cannonMultiple_ = other.cannonMultiple_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherChangeCannon Clone() {
    return new PB_OtherChangeCannon(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "cannon_multiple" field.</summary>
  public const int CannonMultipleFieldNumber = 2;
  private int cannonMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonMultiple {
    get { return cannonMultiple_; }
    set {
      cannonMultiple_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OtherChangeCannon);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OtherChangeCannon other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (CannonMultiple != other.CannonMultiple) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (CannonMultiple != 0) hash ^= CannonMultiple.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (CannonMultiple != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CannonMultiple);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (CannonMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonMultiple);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OtherChangeCannon other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.CannonMultiple != 0) {
      CannonMultiple = other.CannonMultiple;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          CannonMultiple = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_Effect : pb::IMessage<PB_Effect> {
  private static readonly pb::MessageParser<PB_Effect> _parser = new pb::MessageParser<PB_Effect>(() => new PB_Effect());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_Effect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Effect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Effect(PB_Effect other) : this() {
    id_ = other.id_;
    target_ = other.target_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Effect Clone() {
    return new PB_Effect(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_target_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> target_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Target {
    get { return target_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_Effect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_Effect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!target_.Equals(other.target_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= target_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    target_.WriteTo(output, _repeated_target_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    size += target_.CalculateSize(_repeated_target_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_Effect other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    target_.Add(other.target_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          target_.AddEntriesFrom(input, _repeated_target_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EffectRequest : pb::IMessage<PB_EffectRequest> {
  private static readonly pb::MessageParser<PB_EffectRequest> _parser = new pb::MessageParser<PB_EffectRequest>(() => new PB_EffectRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EffectRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EffectRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EffectRequest(PB_EffectRequest other) : this() {
    userId_ = other.userId_;
    Effect = other.effect_ != null ? other.Effect.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EffectRequest Clone() {
    return new PB_EffectRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "effect" field.</summary>
  public const int EffectFieldNumber = 2;
  private global::PB_Effect effect_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Effect Effect {
    get { return effect_; }
    set {
      effect_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EffectRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EffectRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (!object.Equals(Effect, other.Effect)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (effect_ != null) hash ^= Effect.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (effect_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Effect);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (effect_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EffectRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.effect_ != null) {
      if (effect_ == null) {
        effect_ = new global::PB_Effect();
      }
      Effect.MergeFrom(other.Effect);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 18: {
          if (effect_ == null) {
            effect_ = new global::PB_Effect();
          }
          input.ReadMessage(effect_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EffectResponse : pb::IMessage<PB_EffectResponse> {
  private static readonly pb::MessageParser<PB_EffectResponse> _parser = new pb::MessageParser<PB_EffectResponse>(() => new PB_EffectResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EffectResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EffectResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EffectResponse(PB_EffectResponse other) : this() {
    result_ = other.result_;
    Effect = other.effect_ != null ? other.Effect.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EffectResponse Clone() {
    return new PB_EffectResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "effect" field.</summary>
  public const int EffectFieldNumber = 2;
  private global::PB_Effect effect_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Effect Effect {
    get { return effect_; }
    set {
      effect_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EffectResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EffectResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!object.Equals(Effect, other.Effect)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (effect_ != null) hash ^= Effect.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (effect_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Effect);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (effect_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EffectResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.effect_ != null) {
      if (effect_ == null) {
        effect_ = new global::PB_Effect();
      }
      Effect.MergeFrom(other.Effect);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          if (effect_ == null) {
            effect_ = new global::PB_Effect();
          }
          input.ReadMessage(effect_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OtherEffect : pb::IMessage<PB_OtherEffect> {
  private static readonly pb::MessageParser<PB_OtherEffect> _parser = new pb::MessageParser<PB_OtherEffect>(() => new PB_OtherEffect());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OtherEffect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherEffect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherEffect(PB_OtherEffect other) : this() {
    userId_ = other.userId_;
    Effect = other.effect_ != null ? other.Effect.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherEffect Clone() {
    return new PB_OtherEffect(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "effect" field.</summary>
  public const int EffectFieldNumber = 2;
  private global::PB_Effect effect_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Effect Effect {
    get { return effect_; }
    set {
      effect_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OtherEffect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OtherEffect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (!object.Equals(Effect, other.Effect)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (effect_ != null) hash ^= Effect.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (effect_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Effect);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (effect_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OtherEffect other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.effect_ != null) {
      if (effect_ == null) {
        effect_ = new global::PB_Effect();
      }
      Effect.MergeFrom(other.Effect);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 18: {
          if (effect_ == null) {
            effect_ = new global::PB_Effect();
          }
          input.ReadMessage(effect_);
          break;
        }
      }
    }
  }

}

public sealed partial class FreezeTimeout : pb::IMessage<FreezeTimeout> {
  private static readonly pb::MessageParser<FreezeTimeout> _parser = new pb::MessageParser<FreezeTimeout>(() => new FreezeTimeout());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FreezeTimeout> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FreezeTimeout() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FreezeTimeout(FreezeTimeout other) : this() {
    target_ = other.target_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FreezeTimeout Clone() {
    return new FreezeTimeout(this);
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_target_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> target_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Target {
    get { return target_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FreezeTimeout);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FreezeTimeout other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!target_.Equals(other.target_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= target_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    target_.WriteTo(output, _repeated_target_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += target_.CalculateSize(_repeated_target_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FreezeTimeout other) {
    if (other == null) {
      return;
    }
    target_.Add(other.target_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          target_.AddEntriesFrom(input, _repeated_target_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TopUpRequest : pb::IMessage<TopUpRequest> {
  private static readonly pb::MessageParser<TopUpRequest> _parser = new pb::MessageParser<TopUpRequest>(() => new TopUpRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TopUpRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TopUpRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TopUpRequest(TopUpRequest other) : this() {
    type_ = other.type_;
    rMB_ = other.rMB_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TopUpRequest Clone() {
    return new TopUpRequest(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "RMB" field.</summary>
  public const int RMBFieldNumber = 2;
  private long rMB_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RMB {
    get { return rMB_; }
    set {
      rMB_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TopUpRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TopUpRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (RMB != other.RMB) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (RMB != 0L) hash ^= RMB.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (RMB != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(RMB);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (RMB != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RMB);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TopUpRequest other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.RMB != 0L) {
      RMB = other.RMB;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          RMB = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class TopUpResponse : pb::IMessage<TopUpResponse> {
  private static readonly pb::MessageParser<TopUpResponse> _parser = new pb::MessageParser<TopUpResponse>(() => new TopUpResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TopUpResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TopUpResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TopUpResponse(TopUpResponse other) : this() {
    result_ = other.result_;
    type_ = other.type_;
    sum_ = other.sum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TopUpResponse Clone() {
    return new TopUpResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "sum" field.</summary>
  public const int SumFieldNumber = 3;
  private long sum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Sum {
    get { return sum_; }
    set {
      sum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TopUpResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TopUpResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Type != other.Type) return false;
    if (Sum != other.Sum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Sum != 0L) hash ^= Sum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Sum != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Sum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Sum != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TopUpResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Sum != 0L) {
      Sum = other.Sum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Sum = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class BackpackProperty : pb::IMessage<BackpackProperty> {
  private static readonly pb::MessageParser<BackpackProperty> _parser = new pb::MessageParser<BackpackProperty>(() => new BackpackProperty());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BackpackProperty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BackpackProperty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BackpackProperty(BackpackProperty other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    type_ = other.type_;
    description_ = other.description_;
    useable_ = other.useable_;
    canGiveAway_ = other.canGiveAway_;
    diamondCost_ = other.diamondCost_;
    count_ = other.count_;
    propTime_ = other.propTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BackpackProperty Clone() {
    return new BackpackProperty(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private string description_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "useable" field.</summary>
  public const int UseableFieldNumber = 5;
  private bool useable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Useable {
    get { return useable_; }
    set {
      useable_ = value;
    }
  }

  /// <summary>Field number for the "can_give_away" field.</summary>
  public const int CanGiveAwayFieldNumber = 6;
  private bool canGiveAway_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool CanGiveAway {
    get { return canGiveAway_; }
    set {
      canGiveAway_ = value;
    }
  }

  /// <summary>Field number for the "diamond_cost" field.</summary>
  public const int DiamondCostFieldNumber = 7;
  private long diamondCost_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DiamondCost {
    get { return diamondCost_; }
    set {
      diamondCost_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 8;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "propTime" field.</summary>
  public const int PropTimeFieldNumber = 9;
  private long propTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropTime {
    get { return propTime_; }
    set {
      propTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BackpackProperty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BackpackProperty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Type != other.Type) return false;
    if (Description != other.Description) return false;
    if (Useable != other.Useable) return false;
    if (CanGiveAway != other.CanGiveAway) return false;
    if (DiamondCost != other.DiamondCost) return false;
    if (Count != other.Count) return false;
    if (PropTime != other.PropTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    if (Useable != false) hash ^= Useable.GetHashCode();
    if (CanGiveAway != false) hash ^= CanGiveAway.GetHashCode();
    if (DiamondCost != 0L) hash ^= DiamondCost.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (PropTime != 0L) hash ^= PropTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (Useable != false) {
      output.WriteRawTag(40);
      output.WriteBool(Useable);
    }
    if (CanGiveAway != false) {
      output.WriteRawTag(48);
      output.WriteBool(CanGiveAway);
    }
    if (DiamondCost != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(DiamondCost);
    }
    if (Count != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Count);
    }
    if (PropTime != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(PropTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Description.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (Useable != false) {
      size += 1 + 1;
    }
    if (CanGiveAway != false) {
      size += 1 + 1;
    }
    if (DiamondCost != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiamondCost);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (PropTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BackpackProperty other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    if (other.Useable != false) {
      Useable = other.Useable;
    }
    if (other.CanGiveAway != false) {
      CanGiveAway = other.CanGiveAway;
    }
    if (other.DiamondCost != 0L) {
      DiamondCost = other.DiamondCost;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.PropTime != 0L) {
      PropTime = other.PropTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
        case 40: {
          Useable = input.ReadBool();
          break;
        }
        case 48: {
          CanGiveAway = input.ReadBool();
          break;
        }
        case 56: {
          DiamondCost = input.ReadInt64();
          break;
        }
        case 64: {
          Count = input.ReadInt32();
          break;
        }
        case 72: {
          PropTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class GetBackpackPropertyResponse : pb::IMessage<GetBackpackPropertyResponse> {
  private static readonly pb::MessageParser<GetBackpackPropertyResponse> _parser = new pb::MessageParser<GetBackpackPropertyResponse>(() => new GetBackpackPropertyResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetBackpackPropertyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetBackpackPropertyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetBackpackPropertyResponse(GetBackpackPropertyResponse other) : this() {
    result_ = other.result_;
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetBackpackPropertyResponse Clone() {
    return new GetBackpackPropertyResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::BackpackProperty> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(18, global::BackpackProperty.Parser);
  private readonly pbc::RepeatedField<global::BackpackProperty> properties_ = new pbc::RepeatedField<global::BackpackProperty>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BackpackProperty> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetBackpackPropertyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetBackpackPropertyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetBackpackPropertyResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PKRoomInfo : pb::IMessage<PB_PKRoomInfo> {
  private static readonly pb::MessageParser<PB_PKRoomInfo> _parser = new pb::MessageParser<PB_PKRoomInfo>(() => new PB_PKRoomInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PKRoomInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PKRoomInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PKRoomInfo(PB_PKRoomInfo other) : this() {
    roomIndex_ = other.roomIndex_;
    roomType_ = other.roomType_;
    goldType_ = other.goldType_;
    timeType_ = other.timeType_;
    roundType_ = other.roundType_;
    begun_ = other.begun_;
    currentPlayerNum_ = other.currentPlayerNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PKRoomInfo Clone() {
    return new PB_PKRoomInfo(this);
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 1;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 3;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "time_type" field.</summary>
  public const int TimeTypeFieldNumber = 4;
  private int timeType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeType {
    get { return timeType_; }
    set {
      timeType_ = value;
    }
  }

  /// <summary>Field number for the "round_type" field.</summary>
  public const int RoundTypeFieldNumber = 5;
  private int roundType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoundType {
    get { return roundType_; }
    set {
      roundType_ = value;
    }
  }

  /// <summary>Field number for the "begun" field.</summary>
  public const int BegunFieldNumber = 6;
  private bool begun_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Begun {
    get { return begun_; }
    set {
      begun_ = value;
    }
  }

  /// <summary>Field number for the "current_player_num" field.</summary>
  public const int CurrentPlayerNumFieldNumber = 7;
  private int currentPlayerNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentPlayerNum {
    get { return currentPlayerNum_; }
    set {
      currentPlayerNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PKRoomInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PKRoomInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomIndex != other.RoomIndex) return false;
    if (RoomType != other.RoomType) return false;
    if (GoldType != other.GoldType) return false;
    if (TimeType != other.TimeType) return false;
    if (RoundType != other.RoundType) return false;
    if (Begun != other.Begun) return false;
    if (CurrentPlayerNum != other.CurrentPlayerNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    if (TimeType != 0) hash ^= TimeType.GetHashCode();
    if (RoundType != 0) hash ^= RoundType.GetHashCode();
    if (Begun != false) hash ^= Begun.GetHashCode();
    if (CurrentPlayerNum != 0) hash ^= CurrentPlayerNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomIndex);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GoldType);
    }
    if (TimeType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TimeType);
    }
    if (RoundType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(RoundType);
    }
    if (Begun != false) {
      output.WriteRawTag(48);
      output.WriteBool(Begun);
    }
    if (CurrentPlayerNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CurrentPlayerNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    if (TimeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeType);
    }
    if (RoundType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundType);
    }
    if (Begun != false) {
      size += 1 + 1;
    }
    if (CurrentPlayerNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayerNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PKRoomInfo other) {
    if (other == null) {
      return;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    if (other.TimeType != 0) {
      TimeType = other.TimeType;
    }
    if (other.RoundType != 0) {
      RoundType = other.RoundType;
    }
    if (other.Begun != false) {
      Begun = other.Begun;
    }
    if (other.CurrentPlayerNum != 0) {
      CurrentPlayerNum = other.CurrentPlayerNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomIndex = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          GoldType = input.ReadInt32();
          break;
        }
        case 32: {
          TimeType = input.ReadInt32();
          break;
        }
        case 40: {
          RoundType = input.ReadInt32();
          break;
        }
        case 48: {
          Begun = input.ReadBool();
          break;
        }
        case 56: {
          CurrentPlayerNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetPKRoomListRequest : pb::IMessage<PB_GetPKRoomListRequest> {
  private static readonly pb::MessageParser<PB_GetPKRoomListRequest> _parser = new pb::MessageParser<PB_GetPKRoomListRequest>(() => new PB_GetPKRoomListRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetPKRoomListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetPKRoomListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetPKRoomListRequest(PB_GetPKRoomListRequest other) : this() {
    roomType_ = other.roomType_;
    pageNum_ = other.pageNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetPKRoomListRequest Clone() {
    return new PB_GetPKRoomListRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "page_num" field.</summary>
  public const int PageNumFieldNumber = 2;
  private int pageNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PageNum {
    get { return pageNum_; }
    set {
      pageNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetPKRoomListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetPKRoomListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (PageNum != other.PageNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (PageNum != 0) hash ^= PageNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (PageNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PageNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (PageNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetPKRoomListRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.PageNum != 0) {
      PageNum = other.PageNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          PageNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetPKRoomListResponse : pb::IMessage<PB_GetPKRoomListResponse> {
  private static readonly pb::MessageParser<PB_GetPKRoomListResponse> _parser = new pb::MessageParser<PB_GetPKRoomListResponse>(() => new PB_GetPKRoomListResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetPKRoomListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetPKRoomListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetPKRoomListResponse(PB_GetPKRoomListResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    pageNum_ = other.pageNum_;
    rooms_ = other.rooms_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetPKRoomListResponse Clone() {
    return new PB_GetPKRoomListResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "page_num" field.</summary>
  public const int PageNumFieldNumber = 3;
  private int pageNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PageNum {
    get { return pageNum_; }
    set {
      pageNum_ = value;
    }
  }

  /// <summary>Field number for the "rooms" field.</summary>
  public const int RoomsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::PB_PKRoomInfo> _repeated_rooms_codec
      = pb::FieldCodec.ForMessage(34, global::PB_PKRoomInfo.Parser);
  private readonly pbc::RepeatedField<global::PB_PKRoomInfo> rooms_ = new pbc::RepeatedField<global::PB_PKRoomInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_PKRoomInfo> Rooms {
    get { return rooms_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetPKRoomListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetPKRoomListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (PageNum != other.PageNum) return false;
    if(!rooms_.Equals(other.rooms_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (PageNum != 0) hash ^= PageNum.GetHashCode();
    hash ^= rooms_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (PageNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PageNum);
    }
    rooms_.WriteTo(output, _repeated_rooms_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (PageNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageNum);
    }
    size += rooms_.CalculateSize(_repeated_rooms_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetPKRoomListResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.PageNum != 0) {
      PageNum = other.PageNum;
    }
    rooms_.Add(other.rooms_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          PageNum = input.ReadInt32();
          break;
        }
        case 34: {
          rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CreatePKRoomRequest : pb::IMessage<PB_CreatePKRoomRequest> {
  private static readonly pb::MessageParser<PB_CreatePKRoomRequest> _parser = new pb::MessageParser<PB_CreatePKRoomRequest>(() => new PB_CreatePKRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CreatePKRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreatePKRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreatePKRoomRequest(PB_CreatePKRoomRequest other) : this() {
    roomType_ = other.roomType_;
    goldType_ = other.goldType_;
    bulletType_ = other.bulletType_;
    timeType_ = other.timeType_;
    pointType_ = other.pointType_;
    playerNumType_ = other.playerNumType_;
    roomName_ = other.roomName_;
    roomPassword_ = other.roomPassword_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreatePKRoomRequest Clone() {
    return new PB_CreatePKRoomRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 2;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "bullet_type" field.</summary>
  public const int BulletTypeFieldNumber = 3;
  private int bulletType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BulletType {
    get { return bulletType_; }
    set {
      bulletType_ = value;
    }
  }

  /// <summary>Field number for the "time_type" field.</summary>
  public const int TimeTypeFieldNumber = 4;
  private int timeType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeType {
    get { return timeType_; }
    set {
      timeType_ = value;
    }
  }

  /// <summary>Field number for the "point_type" field.</summary>
  public const int PointTypeFieldNumber = 5;
  private int pointType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PointType {
    get { return pointType_; }
    set {
      pointType_ = value;
    }
  }

  /// <summary>Field number for the "player_num_type" field.</summary>
  public const int PlayerNumTypeFieldNumber = 6;
  private int playerNumType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerNumType {
    get { return playerNumType_; }
    set {
      playerNumType_ = value;
    }
  }

  /// <summary>Field number for the "room_name" field.</summary>
  public const int RoomNameFieldNumber = 7;
  private string roomName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomName {
    get { return roomName_; }
    set {
      roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "room_password" field.</summary>
  public const int RoomPasswordFieldNumber = 8;
  private string roomPassword_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomPassword {
    get { return roomPassword_; }
    set {
      roomPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CreatePKRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CreatePKRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (GoldType != other.GoldType) return false;
    if (BulletType != other.BulletType) return false;
    if (TimeType != other.TimeType) return false;
    if (PointType != other.PointType) return false;
    if (PlayerNumType != other.PlayerNumType) return false;
    if (RoomName != other.RoomName) return false;
    if (RoomPassword != other.RoomPassword) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    if (BulletType != 0) hash ^= BulletType.GetHashCode();
    if (TimeType != 0) hash ^= TimeType.GetHashCode();
    if (PointType != 0) hash ^= PointType.GetHashCode();
    if (PlayerNumType != 0) hash ^= PlayerNumType.GetHashCode();
    if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
    if (RoomPassword.Length != 0) hash ^= RoomPassword.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GoldType);
    }
    if (BulletType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BulletType);
    }
    if (TimeType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TimeType);
    }
    if (PointType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PointType);
    }
    if (PlayerNumType != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(PlayerNumType);
    }
    if (RoomName.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(RoomName);
    }
    if (RoomPassword.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(RoomPassword);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    if (BulletType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
    }
    if (TimeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeType);
    }
    if (PointType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointType);
    }
    if (PlayerNumType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNumType);
    }
    if (RoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
    }
    if (RoomPassword.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomPassword);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CreatePKRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    if (other.BulletType != 0) {
      BulletType = other.BulletType;
    }
    if (other.TimeType != 0) {
      TimeType = other.TimeType;
    }
    if (other.PointType != 0) {
      PointType = other.PointType;
    }
    if (other.PlayerNumType != 0) {
      PlayerNumType = other.PlayerNumType;
    }
    if (other.RoomName.Length != 0) {
      RoomName = other.RoomName;
    }
    if (other.RoomPassword.Length != 0) {
      RoomPassword = other.RoomPassword;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          GoldType = input.ReadInt32();
          break;
        }
        case 24: {
          BulletType = input.ReadInt32();
          break;
        }
        case 32: {
          TimeType = input.ReadInt32();
          break;
        }
        case 40: {
          PointType = input.ReadInt32();
          break;
        }
        case 48: {
          PlayerNumType = input.ReadInt32();
          break;
        }
        case 58: {
          RoomName = input.ReadString();
          break;
        }
        case 66: {
          RoomPassword = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CreatePKRoomResponse : pb::IMessage<PB_CreatePKRoomResponse> {
  private static readonly pb::MessageParser<PB_CreatePKRoomResponse> _parser = new pb::MessageParser<PB_CreatePKRoomResponse>(() => new PB_CreatePKRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CreatePKRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreatePKRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreatePKRoomResponse(PB_CreatePKRoomResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    seatIndex_ = other.seatIndex_;
    Room = other.room_ != null ? other.Room.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreatePKRoomResponse Clone() {
    return new PB_CreatePKRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 3;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 4;
  private global::PB_PKRoomInfo room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_PKRoomInfo Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CreatePKRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CreatePKRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (SeatIndex != other.SeatIndex) return false;
    if (!object.Equals(Room, other.Room)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (SeatIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SeatIndex);
    }
    if (room_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Room);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CreatePKRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        room_ = new global::PB_PKRoomInfo();
      }
      Room.MergeFrom(other.Room);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 34: {
          if (room_ == null) {
            room_ = new global::PB_PKRoomInfo();
          }
          input.ReadMessage(room_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_StartPKGameRequest : pb::IMessage<PB_StartPKGameRequest> {
  private static readonly pb::MessageParser<PB_StartPKGameRequest> _parser = new pb::MessageParser<PB_StartPKGameRequest>(() => new PB_StartPKGameRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_StartPKGameRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_StartPKGameRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_StartPKGameRequest(PB_StartPKGameRequest other) : this() {
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_StartPKGameRequest Clone() {
    return new PB_StartPKGameRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_StartPKGameRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_StartPKGameRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_StartPKGameRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_StartPKGameResponse : pb::IMessage<PB_StartPKGameResponse> {
  private static readonly pb::MessageParser<PB_StartPKGameResponse> _parser = new pb::MessageParser<PB_StartPKGameResponse>(() => new PB_StartPKGameResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_StartPKGameResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_StartPKGameResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_StartPKGameResponse(PB_StartPKGameResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_StartPKGameResponse Clone() {
    return new PB_StartPKGameResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_StartPKGameResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_StartPKGameResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_StartPKGameResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyPKGameStart : pb::IMessage<PB_NotifyPKGameStart> {
  private static readonly pb::MessageParser<PB_NotifyPKGameStart> _parser = new pb::MessageParser<PB_NotifyPKGameStart>(() => new PB_NotifyPKGameStart());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyPKGameStart> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyPKGameStart() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyPKGameStart(PB_NotifyPKGameStart other) : this() {
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyPKGameStart Clone() {
    return new PB_NotifyPKGameStart(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyPKGameStart);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyPKGameStart other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyPKGameStart other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EnterPKRoomRequest : pb::IMessage<PB_EnterPKRoomRequest> {
  private static readonly pb::MessageParser<PB_EnterPKRoomRequest> _parser = new pb::MessageParser<PB_EnterPKRoomRequest>(() => new PB_EnterPKRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EnterPKRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterPKRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterPKRoomRequest(PB_EnterPKRoomRequest other) : this() {
    roomType_ = other.roomType_;
    goldType_ = other.goldType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterPKRoomRequest Clone() {
    return new PB_EnterPKRoomRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 2;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EnterPKRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EnterPKRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (GoldType != other.GoldType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GoldType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EnterPKRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          GoldType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EnterPKRoomResponse : pb::IMessage<PB_EnterPKRoomResponse> {
  private static readonly pb::MessageParser<PB_EnterPKRoomResponse> _parser = new pb::MessageParser<PB_EnterPKRoomResponse>(() => new PB_EnterPKRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EnterPKRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterPKRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterPKRoomResponse(PB_EnterPKRoomResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
    seatIndex_ = other.seatIndex_;
    goldType_ = other.goldType_;
    others_ = other.others_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterPKRoomResponse Clone() {
    return new PB_EnterPKRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 4;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 5;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "others" field.</summary>
  public const int OthersFieldNumber = 6;
  private static readonly pb::FieldCodec<global::OtherUserInfo> _repeated_others_codec
      = pb::FieldCodec.ForMessage(50, global::OtherUserInfo.Parser);
  private readonly pbc::RepeatedField<global::OtherUserInfo> others_ = new pbc::RepeatedField<global::OtherUserInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OtherUserInfo> Others {
    get { return others_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EnterPKRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EnterPKRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (SeatIndex != other.SeatIndex) return false;
    if (GoldType != other.GoldType) return false;
    if(!others_.Equals(other.others_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    hash ^= others_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
    if (SeatIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SeatIndex);
    }
    if (GoldType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GoldType);
    }
    others_.WriteTo(output, _repeated_others_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    size += others_.CalculateSize(_repeated_others_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EnterPKRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    others_.Add(other.others_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
        case 32: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 40: {
          GoldType = input.ReadInt32();
          break;
        }
        case 50: {
          others_.AddEntriesFrom(input, _repeated_others_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherEnterPKRoom : pb::IMessage<PB_NotifyOtherEnterPKRoom> {
  private static readonly pb::MessageParser<PB_NotifyOtherEnterPKRoom> _parser = new pb::MessageParser<PB_NotifyOtherEnterPKRoom>(() => new PB_NotifyOtherEnterPKRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherEnterPKRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterPKRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterPKRoom(PB_NotifyOtherEnterPKRoom other) : this() {
    enterType_ = other.enterType_;
    goldType_ = other.goldType_;
    roomIndex_ = other.roomIndex_;
    Other = other.other_ != null ? other.Other.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterPKRoom Clone() {
    return new PB_NotifyOtherEnterPKRoom(this);
  }

  /// <summary>Field number for the "enter_type" field.</summary>
  public const int EnterTypeFieldNumber = 1;
  private int enterType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EnterType {
    get { return enterType_; }
    set {
      enterType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 2;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private long roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "other" field.</summary>
  public const int OtherFieldNumber = 4;
  private global::OtherUserInfo other_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OtherUserInfo Other {
    get { return other_; }
    set {
      other_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherEnterPKRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherEnterPKRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EnterType != other.EnterType) return false;
    if (GoldType != other.GoldType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (!object.Equals(Other, other.Other)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EnterType != 0) hash ^= EnterType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    if (RoomIndex != 0L) hash ^= RoomIndex.GetHashCode();
    if (other_ != null) hash ^= Other.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EnterType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EnterType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GoldType);
    }
    if (RoomIndex != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(RoomIndex);
    }
    if (other_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EnterType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnterType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    if (RoomIndex != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomIndex);
    }
    if (other_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherEnterPKRoom other) {
    if (other == null) {
      return;
    }
    if (other.EnterType != 0) {
      EnterType = other.EnterType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    if (other.RoomIndex != 0L) {
      RoomIndex = other.RoomIndex;
    }
    if (other.other_ != null) {
      if (other_ == null) {
        other_ = new global::OtherUserInfo();
      }
      Other.MergeFrom(other.Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EnterType = input.ReadInt32();
          break;
        }
        case 16: {
          GoldType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt64();
          break;
        }
        case 34: {
          if (other_ == null) {
            other_ = new global::OtherUserInfo();
          }
          input.ReadMessage(other_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LeavePKRoomRequest : pb::IMessage<PB_LeavePKRoomRequest> {
  private static readonly pb::MessageParser<PB_LeavePKRoomRequest> _parser = new pb::MessageParser<PB_LeavePKRoomRequest>(() => new PB_LeavePKRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LeavePKRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeavePKRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeavePKRoomRequest(PB_LeavePKRoomRequest other) : this() {
    roomType_ = other.roomType_;
    goldType_ = other.goldType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeavePKRoomRequest Clone() {
    return new PB_LeavePKRoomRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 2;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LeavePKRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LeavePKRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (GoldType != other.GoldType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GoldType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LeavePKRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          GoldType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LeavePKRoomResponse : pb::IMessage<PB_LeavePKRoomResponse> {
  private static readonly pb::MessageParser<PB_LeavePKRoomResponse> _parser = new pb::MessageParser<PB_LeavePKRoomResponse>(() => new PB_LeavePKRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LeavePKRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeavePKRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeavePKRoomResponse(PB_LeavePKRoomResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    goldType_ = other.goldType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeavePKRoomResponse Clone() {
    return new PB_LeavePKRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 3;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 4;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LeavePKRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LeavePKRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (GoldType != other.GoldType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GoldType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LeavePKRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          GoldType = input.ReadInt32();
          break;
        }
        case 32: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherLeavePKRoom : pb::IMessage<PB_NotifyOtherLeavePKRoom> {
  private static readonly pb::MessageParser<PB_NotifyOtherLeavePKRoom> _parser = new pb::MessageParser<PB_NotifyOtherLeavePKRoom>(() => new PB_NotifyOtherLeavePKRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherLeavePKRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeavePKRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeavePKRoom(PB_NotifyOtherLeavePKRoom other) : this() {
    seatIndex_ = other.seatIndex_;
    leaveUserId_ = other.leaveUserId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeavePKRoom Clone() {
    return new PB_NotifyOtherLeavePKRoom(this);
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 1;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "leave_user_id" field.</summary>
  public const int LeaveUserIdFieldNumber = 2;
  private int leaveUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeaveUserId {
    get { return leaveUserId_; }
    set {
      leaveUserId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherLeavePKRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherLeavePKRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatIndex != other.SeatIndex) return false;
    if (LeaveUserId != other.LeaveUserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (LeaveUserId != 0) hash ^= LeaveUserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatIndex);
    }
    if (LeaveUserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LeaveUserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (LeaveUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveUserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherLeavePKRoom other) {
    if (other == null) {
      return;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.LeaveUserId != 0) {
      LeaveUserId = other.LeaveUserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 16: {
          LeaveUserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LaunchTorpedoRequest : pb::IMessage<PB_LaunchTorpedoRequest> {
  private static readonly pb::MessageParser<PB_LaunchTorpedoRequest> _parser = new pb::MessageParser<PB_LaunchTorpedoRequest>(() => new PB_LaunchTorpedoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LaunchTorpedoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LaunchTorpedoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LaunchTorpedoRequest(PB_LaunchTorpedoRequest other) : this() {
    torpedoId_ = other.torpedoId_;
    torpedoType_ = other.torpedoType_;
    Position = other.position_ != null ? other.Position.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LaunchTorpedoRequest Clone() {
    return new PB_LaunchTorpedoRequest(this);
  }

  /// <summary>Field number for the "torpedo_id" field.</summary>
  public const int TorpedoIdFieldNumber = 1;
  private int torpedoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoId {
    get { return torpedoId_; }
    set {
      torpedoId_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_type" field.</summary>
  public const int TorpedoTypeFieldNumber = 2;
  private int torpedoType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoType {
    get { return torpedoType_; }
    set {
      torpedoType_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private global::BulletPosition position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BulletPosition Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LaunchTorpedoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LaunchTorpedoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TorpedoId != other.TorpedoId) return false;
    if (TorpedoType != other.TorpedoType) return false;
    if (!object.Equals(Position, other.Position)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TorpedoId != 0) hash ^= TorpedoId.GetHashCode();
    if (TorpedoType != 0) hash ^= TorpedoType.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TorpedoId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TorpedoId);
    }
    if (TorpedoType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TorpedoType);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TorpedoId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoId);
    }
    if (TorpedoType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoType);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LaunchTorpedoRequest other) {
    if (other == null) {
      return;
    }
    if (other.TorpedoId != 0) {
      TorpedoId = other.TorpedoId;
    }
    if (other.TorpedoType != 0) {
      TorpedoType = other.TorpedoType;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::BulletPosition();
      }
      Position.MergeFrom(other.Position);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TorpedoId = input.ReadInt32();
          break;
        }
        case 16: {
          TorpedoType = input.ReadInt32();
          break;
        }
        case 26: {
          if (position_ == null) {
            position_ = new global::BulletPosition();
          }
          input.ReadMessage(position_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LaunchTorpedoResponse : pb::IMessage<PB_LaunchTorpedoResponse> {
  private static readonly pb::MessageParser<PB_LaunchTorpedoResponse> _parser = new pb::MessageParser<PB_LaunchTorpedoResponse>(() => new PB_LaunchTorpedoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LaunchTorpedoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LaunchTorpedoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LaunchTorpedoResponse(PB_LaunchTorpedoResponse other) : this() {
    result_ = other.result_;
    torpedoId_ = other.torpedoId_;
    torpedoType_ = other.torpedoType_;
    Position = other.position_ != null ? other.Position.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LaunchTorpedoResponse Clone() {
    return new PB_LaunchTorpedoResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_id" field.</summary>
  public const int TorpedoIdFieldNumber = 2;
  private int torpedoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoId {
    get { return torpedoId_; }
    set {
      torpedoId_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_type" field.</summary>
  public const int TorpedoTypeFieldNumber = 3;
  private int torpedoType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoType {
    get { return torpedoType_; }
    set {
      torpedoType_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 4;
  private global::BulletPosition position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BulletPosition Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LaunchTorpedoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LaunchTorpedoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (TorpedoId != other.TorpedoId) return false;
    if (TorpedoType != other.TorpedoType) return false;
    if (!object.Equals(Position, other.Position)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TorpedoId != 0) hash ^= TorpedoId.GetHashCode();
    if (TorpedoType != 0) hash ^= TorpedoType.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (TorpedoId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TorpedoId);
    }
    if (TorpedoType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TorpedoType);
    }
    if (position_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Position);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TorpedoId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoId);
    }
    if (TorpedoType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoType);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LaunchTorpedoResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TorpedoId != 0) {
      TorpedoId = other.TorpedoId;
    }
    if (other.TorpedoType != 0) {
      TorpedoType = other.TorpedoType;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::BulletPosition();
      }
      Position.MergeFrom(other.Position);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          TorpedoId = input.ReadInt32();
          break;
        }
        case 24: {
          TorpedoType = input.ReadInt32();
          break;
        }
        case 34: {
          if (position_ == null) {
            position_ = new global::BulletPosition();
          }
          input.ReadMessage(position_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherLaunchTorpedo : pb::IMessage<PB_NotifyOtherLaunchTorpedo> {
  private static readonly pb::MessageParser<PB_NotifyOtherLaunchTorpedo> _parser = new pb::MessageParser<PB_NotifyOtherLaunchTorpedo>(() => new PB_NotifyOtherLaunchTorpedo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherLaunchTorpedo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLaunchTorpedo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLaunchTorpedo(PB_NotifyOtherLaunchTorpedo other) : this() {
    userId_ = other.userId_;
    torpedoId_ = other.torpedoId_;
    torpedoType_ = other.torpedoType_;
    Position = other.position_ != null ? other.Position.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLaunchTorpedo Clone() {
    return new PB_NotifyOtherLaunchTorpedo(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_id" field.</summary>
  public const int TorpedoIdFieldNumber = 2;
  private int torpedoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoId {
    get { return torpedoId_; }
    set {
      torpedoId_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_type" field.</summary>
  public const int TorpedoTypeFieldNumber = 3;
  private int torpedoType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoType {
    get { return torpedoType_; }
    set {
      torpedoType_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 4;
  private global::BulletPosition position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BulletPosition Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherLaunchTorpedo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherLaunchTorpedo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (TorpedoId != other.TorpedoId) return false;
    if (TorpedoType != other.TorpedoType) return false;
    if (!object.Equals(Position, other.Position)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (TorpedoId != 0) hash ^= TorpedoId.GetHashCode();
    if (TorpedoType != 0) hash ^= TorpedoType.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (TorpedoId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TorpedoId);
    }
    if (TorpedoType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TorpedoType);
    }
    if (position_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Position);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (TorpedoId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoId);
    }
    if (TorpedoType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoType);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherLaunchTorpedo other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.TorpedoId != 0) {
      TorpedoId = other.TorpedoId;
    }
    if (other.TorpedoType != 0) {
      TorpedoType = other.TorpedoType;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::BulletPosition();
      }
      Position.MergeFrom(other.Position);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          TorpedoId = input.ReadInt32();
          break;
        }
        case 24: {
          TorpedoType = input.ReadInt32();
          break;
        }
        case 34: {
          if (position_ == null) {
            position_ = new global::BulletPosition();
          }
          input.ReadMessage(position_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_Fish : pb::IMessage<PB_Fish> {
  private static readonly pb::MessageParser<PB_Fish> _parser = new pb::MessageParser<PB_Fish>(() => new PB_Fish());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_Fish> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Fish() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Fish(PB_Fish other) : this() {
    groupId_ = other.groupId_;
    fishId_ = other.fishId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Fish Clone() {
    return new PB_Fish(this);
  }

  /// <summary>Field number for the "group_id" field.</summary>
  public const int GroupIdFieldNumber = 1;
  private int groupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GroupId {
    get { return groupId_; }
    set {
      groupId_ = value;
    }
  }

  /// <summary>Field number for the "fish_id" field.</summary>
  public const int FishIdFieldNumber = 2;
  private int fishId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { return fishId_; }
    set {
      fishId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_Fish);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_Fish other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GroupId != other.GroupId) return false;
    if (FishId != other.FishId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GroupId != 0) hash ^= GroupId.GetHashCode();
    if (FishId != 0) hash ^= FishId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GroupId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GroupId);
    }
    if (FishId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FishId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
    }
    if (FishId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_Fish other) {
    if (other == null) {
      return;
    }
    if (other.GroupId != 0) {
      GroupId = other.GroupId;
    }
    if (other.FishId != 0) {
      FishId = other.FishId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GroupId = input.ReadInt32();
          break;
        }
        case 16: {
          FishId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_TorpedoExplodeRequest : pb::IMessage<PB_TorpedoExplodeRequest> {
  private static readonly pb::MessageParser<PB_TorpedoExplodeRequest> _parser = new pb::MessageParser<PB_TorpedoExplodeRequest>(() => new PB_TorpedoExplodeRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_TorpedoExplodeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_TorpedoExplodeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_TorpedoExplodeRequest(PB_TorpedoExplodeRequest other) : this() {
    torpedoId_ = other.torpedoId_;
    torpedoType_ = other.torpedoType_;
    targetFishes_ = other.targetFishes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_TorpedoExplodeRequest Clone() {
    return new PB_TorpedoExplodeRequest(this);
  }

  /// <summary>Field number for the "torpedo_id" field.</summary>
  public const int TorpedoIdFieldNumber = 1;
  private int torpedoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoId {
    get { return torpedoId_; }
    set {
      torpedoId_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_type" field.</summary>
  public const int TorpedoTypeFieldNumber = 2;
  private int torpedoType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoType {
    get { return torpedoType_; }
    set {
      torpedoType_ = value;
    }
  }

  /// <summary>Field number for the "target_fishes" field.</summary>
  public const int TargetFishesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Fish> _repeated_targetFishes_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Fish.Parser);
  private readonly pbc::RepeatedField<global::PB_Fish> targetFishes_ = new pbc::RepeatedField<global::PB_Fish>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Fish> TargetFishes {
    get { return targetFishes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_TorpedoExplodeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_TorpedoExplodeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TorpedoId != other.TorpedoId) return false;
    if (TorpedoType != other.TorpedoType) return false;
    if(!targetFishes_.Equals(other.targetFishes_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TorpedoId != 0) hash ^= TorpedoId.GetHashCode();
    if (TorpedoType != 0) hash ^= TorpedoType.GetHashCode();
    hash ^= targetFishes_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TorpedoId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TorpedoId);
    }
    if (TorpedoType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TorpedoType);
    }
    targetFishes_.WriteTo(output, _repeated_targetFishes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TorpedoId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoId);
    }
    if (TorpedoType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoType);
    }
    size += targetFishes_.CalculateSize(_repeated_targetFishes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_TorpedoExplodeRequest other) {
    if (other == null) {
      return;
    }
    if (other.TorpedoId != 0) {
      TorpedoId = other.TorpedoId;
    }
    if (other.TorpedoType != 0) {
      TorpedoType = other.TorpedoType;
    }
    targetFishes_.Add(other.targetFishes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TorpedoId = input.ReadInt32();
          break;
        }
        case 16: {
          TorpedoType = input.ReadInt32();
          break;
        }
        case 26: {
          targetFishes_.AddEntriesFrom(input, _repeated_targetFishes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_FishReward : pb::IMessage<PB_FishReward> {
  private static readonly pb::MessageParser<PB_FishReward> _parser = new pb::MessageParser<PB_FishReward>(() => new PB_FishReward());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_FishReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishReward(PB_FishReward other) : this() {
    groupId_ = other.groupId_;
    fishId_ = other.fishId_;
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FishReward Clone() {
    return new PB_FishReward(this);
  }

  /// <summary>Field number for the "group_id" field.</summary>
  public const int GroupIdFieldNumber = 1;
  private int groupId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GroupId {
    get { return groupId_; }
    set {
      groupId_ = value;
    }
  }

  /// <summary>Field number for the "fish_id" field.</summary>
  public const int FishIdFieldNumber = 2;
  private int fishId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { return fishId_; }
    set {
      fishId_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_FishReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_FishReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GroupId != other.GroupId) return false;
    if (FishId != other.FishId) return false;
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GroupId != 0) hash ^= GroupId.GetHashCode();
    if (FishId != 0) hash ^= FishId.GetHashCode();
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GroupId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GroupId);
    }
    if (FishId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FishId);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GroupId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
    }
    if (FishId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_FishReward other) {
    if (other == null) {
      return;
    }
    if (other.GroupId != 0) {
      GroupId = other.GroupId;
    }
    if (other.FishId != 0) {
      FishId = other.FishId;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GroupId = input.ReadInt32();
          break;
        }
        case 16: {
          FishId = input.ReadInt32();
          break;
        }
        case 26: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_TorpedoExplodeResponse : pb::IMessage<PB_TorpedoExplodeResponse> {
  private static readonly pb::MessageParser<PB_TorpedoExplodeResponse> _parser = new pb::MessageParser<PB_TorpedoExplodeResponse>(() => new PB_TorpedoExplodeResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_TorpedoExplodeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_TorpedoExplodeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_TorpedoExplodeResponse(PB_TorpedoExplodeResponse other) : this() {
    result_ = other.result_;
    torpedoId_ = other.torpedoId_;
    torpedoType_ = other.torpedoType_;
    rewards_ = other.rewards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_TorpedoExplodeResponse Clone() {
    return new PB_TorpedoExplodeResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_id" field.</summary>
  public const int TorpedoIdFieldNumber = 2;
  private int torpedoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoId {
    get { return torpedoId_; }
    set {
      torpedoId_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_type" field.</summary>
  public const int TorpedoTypeFieldNumber = 3;
  private int torpedoType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoType {
    get { return torpedoType_; }
    set {
      torpedoType_ = value;
    }
  }

  /// <summary>Field number for the "rewards" field.</summary>
  public const int RewardsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::PB_FishReward> _repeated_rewards_codec
      = pb::FieldCodec.ForMessage(34, global::PB_FishReward.Parser);
  private readonly pbc::RepeatedField<global::PB_FishReward> rewards_ = new pbc::RepeatedField<global::PB_FishReward>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_FishReward> Rewards {
    get { return rewards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_TorpedoExplodeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_TorpedoExplodeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (TorpedoId != other.TorpedoId) return false;
    if (TorpedoType != other.TorpedoType) return false;
    if(!rewards_.Equals(other.rewards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TorpedoId != 0) hash ^= TorpedoId.GetHashCode();
    if (TorpedoType != 0) hash ^= TorpedoType.GetHashCode();
    hash ^= rewards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (TorpedoId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TorpedoId);
    }
    if (TorpedoType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TorpedoType);
    }
    rewards_.WriteTo(output, _repeated_rewards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TorpedoId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoId);
    }
    if (TorpedoType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoType);
    }
    size += rewards_.CalculateSize(_repeated_rewards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_TorpedoExplodeResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TorpedoId != 0) {
      TorpedoId = other.TorpedoId;
    }
    if (other.TorpedoType != 0) {
      TorpedoType = other.TorpedoType;
    }
    rewards_.Add(other.rewards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          TorpedoId = input.ReadInt32();
          break;
        }
        case 24: {
          TorpedoType = input.ReadInt32();
          break;
        }
        case 34: {
          rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherTorpedoExplode : pb::IMessage<PB_NotifyOtherTorpedoExplode> {
  private static readonly pb::MessageParser<PB_NotifyOtherTorpedoExplode> _parser = new pb::MessageParser<PB_NotifyOtherTorpedoExplode>(() => new PB_NotifyOtherTorpedoExplode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherTorpedoExplode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherTorpedoExplode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherTorpedoExplode(PB_NotifyOtherTorpedoExplode other) : this() {
    userId_ = other.userId_;
    torpedoId_ = other.torpedoId_;
    torpedoType_ = other.torpedoType_;
    rewards_ = other.rewards_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherTorpedoExplode Clone() {
    return new PB_NotifyOtherTorpedoExplode(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_id" field.</summary>
  public const int TorpedoIdFieldNumber = 2;
  private int torpedoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoId {
    get { return torpedoId_; }
    set {
      torpedoId_ = value;
    }
  }

  /// <summary>Field number for the "torpedo_type" field.</summary>
  public const int TorpedoTypeFieldNumber = 3;
  private int torpedoType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TorpedoType {
    get { return torpedoType_; }
    set {
      torpedoType_ = value;
    }
  }

  /// <summary>Field number for the "rewards" field.</summary>
  public const int RewardsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::PB_FishReward> _repeated_rewards_codec
      = pb::FieldCodec.ForMessage(34, global::PB_FishReward.Parser);
  private readonly pbc::RepeatedField<global::PB_FishReward> rewards_ = new pbc::RepeatedField<global::PB_FishReward>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_FishReward> Rewards {
    get { return rewards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherTorpedoExplode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherTorpedoExplode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (TorpedoId != other.TorpedoId) return false;
    if (TorpedoType != other.TorpedoType) return false;
    if(!rewards_.Equals(other.rewards_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (TorpedoId != 0) hash ^= TorpedoId.GetHashCode();
    if (TorpedoType != 0) hash ^= TorpedoType.GetHashCode();
    hash ^= rewards_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (TorpedoId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TorpedoId);
    }
    if (TorpedoType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TorpedoType);
    }
    rewards_.WriteTo(output, _repeated_rewards_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (TorpedoId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoId);
    }
    if (TorpedoType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TorpedoType);
    }
    size += rewards_.CalculateSize(_repeated_rewards_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherTorpedoExplode other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.TorpedoId != 0) {
      TorpedoId = other.TorpedoId;
    }
    if (other.TorpedoType != 0) {
      TorpedoType = other.TorpedoType;
    }
    rewards_.Add(other.rewards_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          TorpedoId = input.ReadInt32();
          break;
        }
        case 24: {
          TorpedoType = input.ReadInt32();
          break;
        }
        case 34: {
          rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PreparePKGame : pb::IMessage<PB_PreparePKGame> {
  private static readonly pb::MessageParser<PB_PreparePKGame> _parser = new pb::MessageParser<PB_PreparePKGame>(() => new PB_PreparePKGame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PreparePKGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PreparePKGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PreparePKGame(PB_PreparePKGame other) : this() {
    userId_ = other.userId_;
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PreparePKGame Clone() {
    return new PB_PreparePKGame(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PreparePKGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PreparePKGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PreparePKGame other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CancelPreparePKGame : pb::IMessage<PB_CancelPreparePKGame> {
  private static readonly pb::MessageParser<PB_CancelPreparePKGame> _parser = new pb::MessageParser<PB_CancelPreparePKGame>(() => new PB_CancelPreparePKGame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CancelPreparePKGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CancelPreparePKGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CancelPreparePKGame(PB_CancelPreparePKGame other) : this() {
    userId_ = other.userId_;
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CancelPreparePKGame Clone() {
    return new PB_CancelPreparePKGame(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CancelPreparePKGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CancelPreparePKGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CancelPreparePKGame other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PreStartCountdown : pb::IMessage<PB_PreStartCountdown> {
  private static readonly pb::MessageParser<PB_PreStartCountdown> _parser = new pb::MessageParser<PB_PreStartCountdown>(() => new PB_PreStartCountdown());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PreStartCountdown> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PreStartCountdown() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PreStartCountdown(PB_PreStartCountdown other) : this() {
    countdown_ = other.countdown_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PreStartCountdown Clone() {
    return new PB_PreStartCountdown(this);
  }

  /// <summary>Field number for the "countdown" field.</summary>
  public const int CountdownFieldNumber = 1;
  private int countdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Countdown {
    get { return countdown_; }
    set {
      countdown_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PreStartCountdown);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PreStartCountdown other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Countdown != other.Countdown) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Countdown != 0) hash ^= Countdown.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Countdown != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Countdown);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Countdown != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Countdown);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PreStartCountdown other) {
    if (other == null) {
      return;
    }
    if (other.Countdown != 0) {
      Countdown = other.Countdown;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Countdown = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_DistributePKProperty : pb::IMessage<PB_DistributePKProperty> {
  private static readonly pb::MessageParser<PB_DistributePKProperty> _parser = new pb::MessageParser<PB_DistributePKProperty>(() => new PB_DistributePKProperty());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_DistributePKProperty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DistributePKProperty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DistributePKProperty(PB_DistributePKProperty other) : this() {
    roomIndex_ = other.roomIndex_;
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DistributePKProperty Clone() {
    return new PB_DistributePKProperty(this);
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 1;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_DistributePKProperty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_DistributePKProperty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomIndex != other.RoomIndex) return false;
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomIndex);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_DistributePKProperty other) {
    if (other == null) {
      return;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomIndex = input.ReadInt32();
          break;
        }
        case 18: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PlayerInfo : pb::IMessage<PB_PlayerInfo> {
  private static readonly pb::MessageParser<PB_PlayerInfo> _parser = new pb::MessageParser<PB_PlayerInfo>(() => new PB_PlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PlayerInfo(PB_PlayerInfo other) : this() {
    userId_ = other.userId_;
    point_ = other.point_;
    gold_ = other.gold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PlayerInfo Clone() {
    return new PB_PlayerInfo(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "point" field.</summary>
  public const int PointFieldNumber = 2;
  private int point_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Point {
    get { return point_; }
    set {
      point_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 3;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Point != other.Point) return false;
    if (Gold != other.Gold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Point != 0) hash ^= Point.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Point != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Point);
    }
    if (Gold != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Gold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Point != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Point != 0) {
      Point = other.Point;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          Point = input.ReadInt32();
          break;
        }
        case 24: {
          Gold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GoldGameResult : pb::IMessage<PB_GoldGameResult> {
  private static readonly pb::MessageParser<PB_GoldGameResult> _parser = new pb::MessageParser<PB_GoldGameResult>(() => new PB_GoldGameResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GoldGameResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GoldGameResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GoldGameResult(PB_GoldGameResult other) : this() {
    info_ = other.info_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GoldGameResult Clone() {
    return new PB_GoldGameResult(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PB_PlayerInfo> _repeated_info_codec
      = pb::FieldCodec.ForMessage(10, global::PB_PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PB_PlayerInfo> info_ = new pbc::RepeatedField<global::PB_PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_PlayerInfo> Info {
    get { return info_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GoldGameResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GoldGameResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!info_.Equals(other.info_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= info_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    info_.WriteTo(output, _repeated_info_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += info_.CalculateSize(_repeated_info_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GoldGameResult other) {
    if (other == null) {
      return;
    }
    info_.Add(other.info_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PointGameResult : pb::IMessage<PB_PointGameResult> {
  private static readonly pb::MessageParser<PB_PointGameResult> _parser = new pb::MessageParser<PB_PointGameResult>(() => new PB_PointGameResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PointGameResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PointGameResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PointGameResult(PB_PointGameResult other) : this() {
    winnerUserId_ = other.winnerUserId_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PointGameResult Clone() {
    return new PB_PointGameResult(this);
  }

  /// <summary>Field number for the "winner_user_id" field.</summary>
  public const int WinnerUserIdFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_winnerUserId_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> winnerUserId_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> WinnerUserId {
    get { return winnerUserId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PointGameResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PointGameResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!winnerUserId_.Equals(other.winnerUserId_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= winnerUserId_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    winnerUserId_.WriteTo(output, _repeated_winnerUserId_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += winnerUserId_.CalculateSize(_repeated_winnerUserId_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PointGameResult other) {
    if (other == null) {
      return;
    }
    winnerUserId_.Add(other.winnerUserId_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          winnerUserId_.AddEntriesFrom(input, _repeated_winnerUserId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PointGameRoundResult : pb::IMessage<PB_PointGameRoundResult> {
  private static readonly pb::MessageParser<PB_PointGameRoundResult> _parser = new pb::MessageParser<PB_PointGameRoundResult>(() => new PB_PointGameRoundResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PointGameRoundResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PointGameRoundResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PointGameRoundResult(PB_PointGameRoundResult other) : this() {
    round_ = other.round_;
    winnerUserId_ = other.winnerUserId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PointGameRoundResult Clone() {
    return new PB_PointGameRoundResult(this);
  }

  /// <summary>Field number for the "round" field.</summary>
  public const int RoundFieldNumber = 1;
  private int round_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "winner_user_id" field.</summary>
  public const int WinnerUserIdFieldNumber = 2;
  private int winnerUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WinnerUserId {
    get { return winnerUserId_; }
    set {
      winnerUserId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PointGameRoundResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PointGameRoundResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Round != other.Round) return false;
    if (WinnerUserId != other.WinnerUserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Round != 0) hash ^= Round.GetHashCode();
    if (WinnerUserId != 0) hash ^= WinnerUserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Round != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Round);
    }
    if (WinnerUserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WinnerUserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (WinnerUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerUserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PointGameRoundResult other) {
    if (other == null) {
      return;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.WinnerUserId != 0) {
      WinnerUserId = other.WinnerUserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Round = input.ReadInt32();
          break;
        }
        case 16: {
          WinnerUserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OtherGameInfo : pb::IMessage<PB_OtherGameInfo> {
  private static readonly pb::MessageParser<PB_OtherGameInfo> _parser = new pb::MessageParser<PB_OtherGameInfo>(() => new PB_OtherGameInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OtherGameInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherGameInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherGameInfo(PB_OtherGameInfo other) : this() {
    seatIndex_ = other.seatIndex_;
    gender_ = other.gender_;
    nickname_ = other.nickname_;
    avatar_ = other.avatar_;
    userId_ = other.userId_;
    vipLevel_ = other.vipLevel_;
    properties_ = other.properties_.Clone();
    cannonStyle_ = other.cannonStyle_;
    gameId_ = other.gameId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherGameInfo Clone() {
    return new PB_OtherGameInfo(this);
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 1;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 2;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 4;
  private string avatar_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 5;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "vip_level" field.</summary>
  public const int VipLevelFieldNumber = 6;
  private int vipLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VipLevel {
    get { return vipLevel_; }
    set {
      vipLevel_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 7;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(58, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  /// <summary>Field number for the "cannon_style" field.</summary>
  public const int CannonStyleFieldNumber = 8;
  private int cannonStyle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonStyle {
    get { return cannonStyle_; }
    set {
      cannonStyle_ = value;
    }
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 9;
  private int gameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameId {
    get { return gameId_; }
    set {
      gameId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OtherGameInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OtherGameInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatIndex != other.SeatIndex) return false;
    if (Gender != other.Gender) return false;
    if (Nickname != other.Nickname) return false;
    if (Avatar != other.Avatar) return false;
    if (UserId != other.UserId) return false;
    if (VipLevel != other.VipLevel) return false;
    if(!properties_.Equals(other.properties_)) return false;
    if (CannonStyle != other.CannonStyle) return false;
    if (GameId != other.GameId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
    hash ^= properties_.GetHashCode();
    if (CannonStyle != 0) hash ^= CannonStyle.GetHashCode();
    if (GameId != 0) hash ^= GameId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatIndex);
    }
    if (Gender != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Gender);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Avatar);
    }
    if (UserId != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(UserId);
    }
    if (VipLevel != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(VipLevel);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
    if (CannonStyle != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(CannonStyle);
    }
    if (GameId != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(GameId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (Gender != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (VipLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    if (CannonStyle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonStyle);
    }
    if (GameId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OtherGameInfo other) {
    if (other == null) {
      return;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.VipLevel != 0) {
      VipLevel = other.VipLevel;
    }
    properties_.Add(other.properties_);
    if (other.CannonStyle != 0) {
      CannonStyle = other.CannonStyle;
    }
    if (other.GameId != 0) {
      GameId = other.GameId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 16: {
          Gender = input.ReadInt32();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 34: {
          Avatar = input.ReadString();
          break;
        }
        case 40: {
          UserId = input.ReadInt32();
          break;
        }
        case 48: {
          VipLevel = input.ReadInt32();
          break;
        }
        case 58: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
        case 64: {
          CannonStyle = input.ReadInt32();
          break;
        }
        case 72: {
          GameId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ReconnectGameResponse : pb::IMessage<PB_ReconnectGameResponse> {
  private static readonly pb::MessageParser<PB_ReconnectGameResponse> _parser = new pb::MessageParser<PB_ReconnectGameResponse>(() => new PB_ReconnectGameResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ReconnectGameResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ReconnectGameResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ReconnectGameResponse(PB_ReconnectGameResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    goldType_ = other.goldType_;
    roomIndex_ = other.roomIndex_;
    seatIndex_ = other.seatIndex_;
    properties_ = other.properties_.Clone();
    others_ = other.others_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ReconnectGameResponse Clone() {
    return new PB_ReconnectGameResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 3;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 4;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 5;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 6;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(50, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  /// <summary>Field number for the "others" field.</summary>
  public const int OthersFieldNumber = 7;
  private static readonly pb::FieldCodec<global::PB_OtherGameInfo> _repeated_others_codec
      = pb::FieldCodec.ForMessage(58, global::PB_OtherGameInfo.Parser);
  private readonly pbc::RepeatedField<global::PB_OtherGameInfo> others_ = new pbc::RepeatedField<global::PB_OtherGameInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_OtherGameInfo> Others {
    get { return others_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ReconnectGameResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ReconnectGameResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (GoldType != other.GoldType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (SeatIndex != other.SeatIndex) return false;
    if(!properties_.Equals(other.properties_)) return false;
    if(!others_.Equals(other.others_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    hash ^= properties_.GetHashCode();
    hash ^= others_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GoldType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomIndex);
    }
    if (SeatIndex != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(SeatIndex);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
    others_.WriteTo(output, _repeated_others_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    size += others_.CalculateSize(_repeated_others_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ReconnectGameResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    properties_.Add(other.properties_);
    others_.Add(other.others_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          GoldType = input.ReadInt32();
          break;
        }
        case 32: {
          RoomIndex = input.ReadInt32();
          break;
        }
        case 40: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 50: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
        case 58: {
          others_.AddEntriesFrom(input, _repeated_others_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OtherReconnectGame : pb::IMessage<PB_OtherReconnectGame> {
  private static readonly pb::MessageParser<PB_OtherReconnectGame> _parser = new pb::MessageParser<PB_OtherReconnectGame>(() => new PB_OtherReconnectGame());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OtherReconnectGame> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherReconnectGame() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherReconnectGame(PB_OtherReconnectGame other) : this() {
    roomType_ = other.roomType_;
    goldType_ = other.goldType_;
    roomIndex_ = other.roomIndex_;
    Other = other.other_ != null ? other.Other.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherReconnectGame Clone() {
    return new PB_OtherReconnectGame(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 2;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "other" field.</summary>
  public const int OtherFieldNumber = 4;
  private global::PB_OtherGameInfo other_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_OtherGameInfo Other {
    get { return other_; }
    set {
      other_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OtherReconnectGame);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OtherReconnectGame other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (GoldType != other.GoldType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (!object.Equals(Other, other.Other)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    if (other_ != null) hash ^= Other.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GoldType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
    if (other_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    if (other_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OtherReconnectGame other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
    if (other.other_ != null) {
      if (other_ == null) {
        other_ = new global::PB_OtherGameInfo();
      }
      Other.MergeFrom(other.Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          GoldType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
        case 34: {
          if (other_ == null) {
            other_ = new global::PB_OtherGameInfo();
          }
          input.ReadMessage(other_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CreateFriendRoomRequest : pb::IMessage<PB_CreateFriendRoomRequest> {
  private static readonly pb::MessageParser<PB_CreateFriendRoomRequest> _parser = new pb::MessageParser<PB_CreateFriendRoomRequest>(() => new PB_CreateFriendRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CreateFriendRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreateFriendRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreateFriendRoomRequest(PB_CreateFriendRoomRequest other) : this() {
    roomType_ = other.roomType_;
    goldType_ = other.goldType_;
    timeType_ = other.timeType_;
    roundType_ = other.roundType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreateFriendRoomRequest Clone() {
    return new PB_CreateFriendRoomRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "gold_type" field.</summary>
  public const int GoldTypeFieldNumber = 2;
  private int goldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldType {
    get { return goldType_; }
    set {
      goldType_ = value;
    }
  }

  /// <summary>Field number for the "time_type" field.</summary>
  public const int TimeTypeFieldNumber = 3;
  private int timeType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeType {
    get { return timeType_; }
    set {
      timeType_ = value;
    }
  }

  /// <summary>Field number for the "round_type" field.</summary>
  public const int RoundTypeFieldNumber = 4;
  private int roundType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoundType {
    get { return roundType_; }
    set {
      roundType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CreateFriendRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CreateFriendRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (GoldType != other.GoldType) return false;
    if (TimeType != other.TimeType) return false;
    if (RoundType != other.RoundType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (GoldType != 0) hash ^= GoldType.GetHashCode();
    if (TimeType != 0) hash ^= TimeType.GetHashCode();
    if (RoundType != 0) hash ^= RoundType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (GoldType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GoldType);
    }
    if (TimeType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeType);
    }
    if (RoundType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoundType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (GoldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldType);
    }
    if (TimeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeType);
    }
    if (RoundType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CreateFriendRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.GoldType != 0) {
      GoldType = other.GoldType;
    }
    if (other.TimeType != 0) {
      TimeType = other.TimeType;
    }
    if (other.RoundType != 0) {
      RoundType = other.RoundType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          GoldType = input.ReadInt32();
          break;
        }
        case 24: {
          TimeType = input.ReadInt32();
          break;
        }
        case 32: {
          RoundType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CreateFriendRoomResponse : pb::IMessage<PB_CreateFriendRoomResponse> {
  private static readonly pb::MessageParser<PB_CreateFriendRoomResponse> _parser = new pb::MessageParser<PB_CreateFriendRoomResponse>(() => new PB_CreateFriendRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CreateFriendRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreateFriendRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreateFriendRoomResponse(PB_CreateFriendRoomResponse other) : this() {
    result_ = other.result_;
    seatIndex_ = other.seatIndex_;
    Room = other.room_ != null ? other.Room.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CreateFriendRoomResponse Clone() {
    return new PB_CreateFriendRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 2;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 3;
  private global::PB_PKRoomInfo room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_PKRoomInfo Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CreateFriendRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CreateFriendRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (SeatIndex != other.SeatIndex) return false;
    if (!object.Equals(Room, other.Room)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (SeatIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatIndex);
    }
    if (room_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Room);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CreateFriendRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        room_ = new global::PB_PKRoomInfo();
      }
      Room.MergeFrom(other.Room);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 26: {
          if (room_ == null) {
            room_ = new global::PB_PKRoomInfo();
          }
          input.ReadMessage(room_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EnterFriendRoomRequest : pb::IMessage<PB_EnterFriendRoomRequest> {
  private static readonly pb::MessageParser<PB_EnterFriendRoomRequest> _parser = new pb::MessageParser<PB_EnterFriendRoomRequest>(() => new PB_EnterFriendRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EnterFriendRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterFriendRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterFriendRoomRequest(PB_EnterFriendRoomRequest other) : this() {
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterFriendRoomRequest Clone() {
    return new PB_EnterFriendRoomRequest(this);
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 1;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EnterFriendRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EnterFriendRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EnterFriendRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EnterFriendRoomResponse : pb::IMessage<PB_EnterFriendRoomResponse> {
  private static readonly pb::MessageParser<PB_EnterFriendRoomResponse> _parser = new pb::MessageParser<PB_EnterFriendRoomResponse>(() => new PB_EnterFriendRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EnterFriendRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterFriendRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterFriendRoomResponse(PB_EnterFriendRoomResponse other) : this() {
    result_ = other.result_;
    seatIndex_ = other.seatIndex_;
    roomOwnerUserId_ = other.roomOwnerUserId_;
    Room = other.room_ != null ? other.Room.Clone() : null;
    others_ = other.others_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterFriendRoomResponse Clone() {
    return new PB_EnterFriendRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 2;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "room_owner_user_id" field.</summary>
  public const int RoomOwnerUserIdFieldNumber = 3;
  private int roomOwnerUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomOwnerUserId {
    get { return roomOwnerUserId_; }
    set {
      roomOwnerUserId_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 4;
  private global::PB_PKRoomInfo room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_PKRoomInfo Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "others" field.</summary>
  public const int OthersFieldNumber = 5;
  private static readonly pb::FieldCodec<global::OtherUserInfo> _repeated_others_codec
      = pb::FieldCodec.ForMessage(42, global::OtherUserInfo.Parser);
  private readonly pbc::RepeatedField<global::OtherUserInfo> others_ = new pbc::RepeatedField<global::OtherUserInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OtherUserInfo> Others {
    get { return others_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EnterFriendRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EnterFriendRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (SeatIndex != other.SeatIndex) return false;
    if (RoomOwnerUserId != other.RoomOwnerUserId) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if(!others_.Equals(other.others_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (RoomOwnerUserId != 0) hash ^= RoomOwnerUserId.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    hash ^= others_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (SeatIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SeatIndex);
    }
    if (RoomOwnerUserId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomOwnerUserId);
    }
    if (room_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Room);
    }
    others_.WriteTo(output, _repeated_others_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (RoomOwnerUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomOwnerUserId);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    size += others_.CalculateSize(_repeated_others_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EnterFriendRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.RoomOwnerUserId != 0) {
      RoomOwnerUserId = other.RoomOwnerUserId;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        room_ = new global::PB_PKRoomInfo();
      }
      Room.MergeFrom(other.Room);
    }
    others_.Add(other.others_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 24: {
          RoomOwnerUserId = input.ReadInt32();
          break;
        }
        case 34: {
          if (room_ == null) {
            room_ = new global::PB_PKRoomInfo();
          }
          input.ReadMessage(room_);
          break;
        }
        case 42: {
          others_.AddEntriesFrom(input, _repeated_others_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherEnterFriendRoom : pb::IMessage<PB_NotifyOtherEnterFriendRoom> {
  private static readonly pb::MessageParser<PB_NotifyOtherEnterFriendRoom> _parser = new pb::MessageParser<PB_NotifyOtherEnterFriendRoom>(() => new PB_NotifyOtherEnterFriendRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherEnterFriendRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterFriendRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterFriendRoom(PB_NotifyOtherEnterFriendRoom other) : this() {
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
    Other = other.other_ != null ? other.Other.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterFriendRoom Clone() {
    return new PB_NotifyOtherEnterFriendRoom(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private long roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "other" field.</summary>
  public const int OtherFieldNumber = 3;
  private global::OtherUserInfo other_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OtherUserInfo Other {
    get { return other_; }
    set {
      other_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherEnterFriendRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherEnterFriendRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (!object.Equals(Other, other.Other)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0L) hash ^= RoomIndex.GetHashCode();
    if (other_ != null) hash ^= Other.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(RoomIndex);
    }
    if (other_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomIndex);
    }
    if (other_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherEnterFriendRoom other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0L) {
      RoomIndex = other.RoomIndex;
    }
    if (other.other_ != null) {
      if (other_ == null) {
        other_ = new global::OtherUserInfo();
      }
      Other.MergeFrom(other.Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt64();
          break;
        }
        case 26: {
          if (other_ == null) {
            other_ = new global::OtherUserInfo();
          }
          input.ReadMessage(other_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LeaveFriendRoomRequest : pb::IMessage<PB_LeaveFriendRoomRequest> {
  private static readonly pb::MessageParser<PB_LeaveFriendRoomRequest> _parser = new pb::MessageParser<PB_LeaveFriendRoomRequest>(() => new PB_LeaveFriendRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LeaveFriendRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveFriendRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveFriendRoomRequest(PB_LeaveFriendRoomRequest other) : this() {
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveFriendRoomRequest Clone() {
    return new PB_LeaveFriendRoomRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LeaveFriendRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LeaveFriendRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LeaveFriendRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LeaveFriendRoomResponse : pb::IMessage<PB_LeaveFriendRoomResponse> {
  private static readonly pb::MessageParser<PB_LeaveFriendRoomResponse> _parser = new pb::MessageParser<PB_LeaveFriendRoomResponse>(() => new PB_LeaveFriendRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LeaveFriendRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveFriendRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveFriendRoomResponse(PB_LeaveFriendRoomResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveFriendRoomResponse Clone() {
    return new PB_LeaveFriendRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LeaveFriendRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LeaveFriendRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LeaveFriendRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherLeaveFriendRoom : pb::IMessage<PB_NotifyOtherLeaveFriendRoom> {
  private static readonly pb::MessageParser<PB_NotifyOtherLeaveFriendRoom> _parser = new pb::MessageParser<PB_NotifyOtherLeaveFriendRoom>(() => new PB_NotifyOtherLeaveFriendRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherLeaveFriendRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeaveFriendRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeaveFriendRoom(PB_NotifyOtherLeaveFriendRoom other) : this() {
    seatIndex_ = other.seatIndex_;
    leaveUserId_ = other.leaveUserId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeaveFriendRoom Clone() {
    return new PB_NotifyOtherLeaveFriendRoom(this);
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 1;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "leave_user_id" field.</summary>
  public const int LeaveUserIdFieldNumber = 2;
  private int leaveUserId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeaveUserId {
    get { return leaveUserId_; }
    set {
      leaveUserId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherLeaveFriendRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherLeaveFriendRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatIndex != other.SeatIndex) return false;
    if (LeaveUserId != other.LeaveUserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (LeaveUserId != 0) hash ^= LeaveUserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatIndex);
    }
    if (LeaveUserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LeaveUserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (LeaveUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveUserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherLeaveFriendRoom other) {
    if (other == null) {
      return;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.LeaveUserId != 0) {
      LeaveUserId = other.LeaveUserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 16: {
          LeaveUserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_UserRoundResult : pb::IMessage<PB_UserRoundResult> {
  private static readonly pb::MessageParser<PB_UserRoundResult> _parser = new pb::MessageParser<PB_UserRoundResult>(() => new PB_UserRoundResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_UserRoundResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UserRoundResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UserRoundResult(PB_UserRoundResult other) : this() {
    userId_ = other.userId_;
    sum_ = other.sum_;
    roundNums_ = other.roundNums_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UserRoundResult Clone() {
    return new PB_UserRoundResult(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "sum" field.</summary>
  public const int SumFieldNumber = 2;
  private long sum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Sum {
    get { return sum_; }
    set {
      sum_ = value;
    }
  }

  /// <summary>Field number for the "round_nums" field.</summary>
  public const int RoundNumsFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_roundNums_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> roundNums_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RoundNums {
    get { return roundNums_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_UserRoundResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_UserRoundResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Sum != other.Sum) return false;
    if(!roundNums_.Equals(other.roundNums_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Sum != 0L) hash ^= Sum.GetHashCode();
    hash ^= roundNums_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Sum != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Sum);
    }
    roundNums_.WriteTo(output, _repeated_roundNums_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Sum != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sum);
    }
    size += roundNums_.CalculateSize(_repeated_roundNums_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_UserRoundResult other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Sum != 0L) {
      Sum = other.Sum;
    }
    roundNums_.Add(other.roundNums_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          Sum = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          roundNums_.AddEntriesFrom(input, _repeated_roundNums_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_FriendRoomGameResult : pb::IMessage<PB_FriendRoomGameResult> {
  private static readonly pb::MessageParser<PB_FriendRoomGameResult> _parser = new pb::MessageParser<PB_FriendRoomGameResult>(() => new PB_FriendRoomGameResult());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_FriendRoomGameResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FriendRoomGameResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FriendRoomGameResult(PB_FriendRoomGameResult other) : this() {
    resultType_ = other.resultType_;
    users_ = other.users_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_FriendRoomGameResult Clone() {
    return new PB_FriendRoomGameResult(this);
  }

  /// <summary>Field number for the "result_type" field.</summary>
  public const int ResultTypeFieldNumber = 1;
  private int resultType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResultType {
    get { return resultType_; }
    set {
      resultType_ = value;
    }
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_UserRoundResult> _repeated_users_codec
      = pb::FieldCodec.ForMessage(18, global::PB_UserRoundResult.Parser);
  private readonly pbc::RepeatedField<global::PB_UserRoundResult> users_ = new pbc::RepeatedField<global::PB_UserRoundResult>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_UserRoundResult> Users {
    get { return users_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_FriendRoomGameResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_FriendRoomGameResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ResultType != other.ResultType) return false;
    if(!users_.Equals(other.users_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResultType != 0) hash ^= ResultType.GetHashCode();
    hash ^= users_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResultType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ResultType);
    }
    users_.WriteTo(output, _repeated_users_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResultType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultType);
    }
    size += users_.CalculateSize(_repeated_users_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_FriendRoomGameResult other) {
    if (other == null) {
      return;
    }
    if (other.ResultType != 0) {
      ResultType = other.ResultType;
    }
    users_.Add(other.users_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ResultType = input.ReadInt32();
          break;
        }
        case 18: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_DisbandFriendRoomRequest : pb::IMessage<PB_DisbandFriendRoomRequest> {
  private static readonly pb::MessageParser<PB_DisbandFriendRoomRequest> _parser = new pb::MessageParser<PB_DisbandFriendRoomRequest>(() => new PB_DisbandFriendRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_DisbandFriendRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DisbandFriendRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DisbandFriendRoomRequest(PB_DisbandFriendRoomRequest other) : this() {
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DisbandFriendRoomRequest Clone() {
    return new PB_DisbandFriendRoomRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_DisbandFriendRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_DisbandFriendRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_DisbandFriendRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_DisbandFriendRoomResponse : pb::IMessage<PB_DisbandFriendRoomResponse> {
  private static readonly pb::MessageParser<PB_DisbandFriendRoomResponse> _parser = new pb::MessageParser<PB_DisbandFriendRoomResponse>(() => new PB_DisbandFriendRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_DisbandFriendRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DisbandFriendRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DisbandFriendRoomResponse(PB_DisbandFriendRoomResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DisbandFriendRoomResponse Clone() {
    return new PB_DisbandFriendRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_DisbandFriendRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_DisbandFriendRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_DisbandFriendRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyDisbandFriendRoom : pb::IMessage<PB_NotifyDisbandFriendRoom> {
  private static readonly pb::MessageParser<PB_NotifyDisbandFriendRoom> _parser = new pb::MessageParser<PB_NotifyDisbandFriendRoom>(() => new PB_NotifyDisbandFriendRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyDisbandFriendRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyDisbandFriendRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyDisbandFriendRoom(PB_NotifyDisbandFriendRoom other) : this() {
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyDisbandFriendRoom Clone() {
    return new PB_NotifyDisbandFriendRoom(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyDisbandFriendRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyDisbandFriendRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyDisbandFriendRoom other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyRedPacket : pb::IMessage<PB_NotifyRedPacket> {
  private static readonly pb::MessageParser<PB_NotifyRedPacket> _parser = new pb::MessageParser<PB_NotifyRedPacket>(() => new PB_NotifyRedPacket());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyRedPacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyRedPacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyRedPacket(PB_NotifyRedPacket other) : this() {
    packetId_ = other.packetId_;
    consumedGold_ = other.consumedGold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyRedPacket Clone() {
    return new PB_NotifyRedPacket(this);
  }

  /// <summary>Field number for the "packet_id" field.</summary>
  public const int PacketIdFieldNumber = 1;
  private long packetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PacketId {
    get { return packetId_; }
    set {
      packetId_ = value;
    }
  }

  /// <summary>Field number for the "consumed_gold" field.</summary>
  public const int ConsumedGoldFieldNumber = 2;
  private long consumedGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ConsumedGold {
    get { return consumedGold_; }
    set {
      consumedGold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyRedPacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyRedPacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PacketId != other.PacketId) return false;
    if (ConsumedGold != other.ConsumedGold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PacketId != 0L) hash ^= PacketId.GetHashCode();
    if (ConsumedGold != 0L) hash ^= ConsumedGold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PacketId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PacketId);
    }
    if (ConsumedGold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ConsumedGold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PacketId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PacketId);
    }
    if (ConsumedGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConsumedGold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyRedPacket other) {
    if (other == null) {
      return;
    }
    if (other.PacketId != 0L) {
      PacketId = other.PacketId;
    }
    if (other.ConsumedGold != 0L) {
      ConsumedGold = other.ConsumedGold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PacketId = input.ReadInt64();
          break;
        }
        case 16: {
          ConsumedGold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OpenRedPacketRequest : pb::IMessage<PB_OpenRedPacketRequest> {
  private static readonly pb::MessageParser<PB_OpenRedPacketRequest> _parser = new pb::MessageParser<PB_OpenRedPacketRequest>(() => new PB_OpenRedPacketRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OpenRedPacketRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenRedPacketRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenRedPacketRequest(PB_OpenRedPacketRequest other) : this() {
    packetId_ = other.packetId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenRedPacketRequest Clone() {
    return new PB_OpenRedPacketRequest(this);
  }

  /// <summary>Field number for the "packet_id" field.</summary>
  public const int PacketIdFieldNumber = 1;
  private long packetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PacketId {
    get { return packetId_; }
    set {
      packetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OpenRedPacketRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OpenRedPacketRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PacketId != other.PacketId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PacketId != 0L) hash ^= PacketId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PacketId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PacketId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PacketId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PacketId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OpenRedPacketRequest other) {
    if (other == null) {
      return;
    }
    if (other.PacketId != 0L) {
      PacketId = other.PacketId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PacketId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OpenRedPacketResponse : pb::IMessage<PB_OpenRedPacketResponse> {
  private static readonly pb::MessageParser<PB_OpenRedPacketResponse> _parser = new pb::MessageParser<PB_OpenRedPacketResponse>(() => new PB_OpenRedPacketResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OpenRedPacketResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenRedPacketResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenRedPacketResponse(PB_OpenRedPacketResponse other) : this() {
    result_ = other.result_;
    packetId_ = other.packetId_;
    redPacketTicket_ = other.redPacketTicket_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenRedPacketResponse Clone() {
    return new PB_OpenRedPacketResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "packet_id" field.</summary>
  public const int PacketIdFieldNumber = 2;
  private long packetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PacketId {
    get { return packetId_; }
    set {
      packetId_ = value;
    }
  }

  /// <summary>Field number for the "red_packet_ticket" field.</summary>
  public const int RedPacketTicketFieldNumber = 3;
  private long redPacketTicket_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RedPacketTicket {
    get { return redPacketTicket_; }
    set {
      redPacketTicket_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OpenRedPacketResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OpenRedPacketResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (PacketId != other.PacketId) return false;
    if (RedPacketTicket != other.RedPacketTicket) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (PacketId != 0L) hash ^= PacketId.GetHashCode();
    if (RedPacketTicket != 0L) hash ^= RedPacketTicket.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (PacketId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PacketId);
    }
    if (RedPacketTicket != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(RedPacketTicket);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (PacketId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PacketId);
    }
    if (RedPacketTicket != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RedPacketTicket);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OpenRedPacketResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.PacketId != 0L) {
      PacketId = other.PacketId;
    }
    if (other.RedPacketTicket != 0L) {
      RedPacketTicket = other.RedPacketTicket;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          PacketId = input.ReadInt64();
          break;
        }
        case 24: {
          RedPacketTicket = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetRedPacketListResponse : pb::IMessage<PB_GetRedPacketListResponse> {
  private static readonly pb::MessageParser<PB_GetRedPacketListResponse> _parser = new pb::MessageParser<PB_GetRedPacketListResponse>(() => new PB_GetRedPacketListResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetRedPacketListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetRedPacketListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetRedPacketListResponse(PB_GetRedPacketListResponse other) : this() {
    result_ = other.result_;
    packets_ = other.packets_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetRedPacketListResponse Clone() {
    return new PB_GetRedPacketListResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "packets" field.</summary>
  public const int PacketsFieldNumber = 2;
  private static readonly pb::FieldCodec<long> _repeated_packets_codec
      = pb::FieldCodec.ForInt64(18);
  private readonly pbc::RepeatedField<long> packets_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> Packets {
    get { return packets_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetRedPacketListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetRedPacketListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!packets_.Equals(other.packets_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= packets_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    packets_.WriteTo(output, _repeated_packets_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += packets_.CalculateSize(_repeated_packets_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetRedPacketListResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    packets_.Add(other.packets_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          packets_.AddEntriesFrom(input, _repeated_packets_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherOpenRedPacket : pb::IMessage<PB_NotifyOtherOpenRedPacket> {
  private static readonly pb::MessageParser<PB_NotifyOtherOpenRedPacket> _parser = new pb::MessageParser<PB_NotifyOtherOpenRedPacket>(() => new PB_NotifyOtherOpenRedPacket());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherOpenRedPacket> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherOpenRedPacket() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherOpenRedPacket(PB_NotifyOtherOpenRedPacket other) : this() {
    userId_ = other.userId_;
    redPacketTicket_ = other.redPacketTicket_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherOpenRedPacket Clone() {
    return new PB_NotifyOtherOpenRedPacket(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "red_packet_ticket" field.</summary>
  public const int RedPacketTicketFieldNumber = 2;
  private long redPacketTicket_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RedPacketTicket {
    get { return redPacketTicket_; }
    set {
      redPacketTicket_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherOpenRedPacket);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherOpenRedPacket other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (RedPacketTicket != other.RedPacketTicket) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (RedPacketTicket != 0L) hash ^= RedPacketTicket.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (RedPacketTicket != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(RedPacketTicket);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (RedPacketTicket != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RedPacketTicket);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherOpenRedPacket other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.RedPacketTicket != 0L) {
      RedPacketTicket = other.RedPacketTicket;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          RedPacketTicket = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EnterRedPacketRoomRequest : pb::IMessage<PB_EnterRedPacketRoomRequest> {
  private static readonly pb::MessageParser<PB_EnterRedPacketRoomRequest> _parser = new pb::MessageParser<PB_EnterRedPacketRoomRequest>(() => new PB_EnterRedPacketRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EnterRedPacketRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRedPacketRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRedPacketRoomRequest(PB_EnterRedPacketRoomRequest other) : this() {
    roomType_ = other.roomType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRedPacketRoomRequest Clone() {
    return new PB_EnterRedPacketRoomRequest(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EnterRedPacketRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EnterRedPacketRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EnterRedPacketRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EnterRedPacketRoomResponse : pb::IMessage<PB_EnterRedPacketRoomResponse> {
  private static readonly pb::MessageParser<PB_EnterRedPacketRoomResponse> _parser = new pb::MessageParser<PB_EnterRedPacketRoomResponse>(() => new PB_EnterRedPacketRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EnterRedPacketRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRedPacketRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRedPacketRoomResponse(PB_EnterRedPacketRoomResponse other) : this() {
    result_ = other.result_;
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
    seatIndex_ = other.seatIndex_;
    gold_ = other.gold_;
    others_ = other.others_.Clone();
    roomConsumedGold_ = other.roomConsumedGold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EnterRedPacketRoomResponse Clone() {
    return new PB_EnterRedPacketRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 2;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private long roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 4;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 5;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "others" field.</summary>
  public const int OthersFieldNumber = 6;
  private static readonly pb::FieldCodec<global::OtherUserInfo> _repeated_others_codec
      = pb::FieldCodec.ForMessage(50, global::OtherUserInfo.Parser);
  private readonly pbc::RepeatedField<global::OtherUserInfo> others_ = new pbc::RepeatedField<global::OtherUserInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OtherUserInfo> Others {
    get { return others_; }
  }

  /// <summary>Field number for the "room_consumed_gold" field.</summary>
  public const int RoomConsumedGoldFieldNumber = 7;
  private long roomConsumedGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomConsumedGold {
    get { return roomConsumedGold_; }
    set {
      roomConsumedGold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EnterRedPacketRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EnterRedPacketRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (SeatIndex != other.SeatIndex) return false;
    if (Gold != other.Gold) return false;
    if(!others_.Equals(other.others_)) return false;
    if (RoomConsumedGold != other.RoomConsumedGold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0L) hash ^= RoomIndex.GetHashCode();
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    hash ^= others_.GetHashCode();
    if (RoomConsumedGold != 0L) hash ^= RoomConsumedGold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (RoomType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(RoomIndex);
    }
    if (SeatIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SeatIndex);
    }
    if (Gold != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Gold);
    }
    others_.WriteTo(output, _repeated_others_codec);
    if (RoomConsumedGold != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(RoomConsumedGold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomIndex);
    }
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    size += others_.CalculateSize(_repeated_others_codec);
    if (RoomConsumedGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomConsumedGold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EnterRedPacketRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0L) {
      RoomIndex = other.RoomIndex;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    others_.Add(other.others_);
    if (other.RoomConsumedGold != 0L) {
      RoomConsumedGold = other.RoomConsumedGold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          RoomType = input.ReadInt32();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt64();
          break;
        }
        case 32: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 40: {
          Gold = input.ReadInt64();
          break;
        }
        case 50: {
          others_.AddEntriesFrom(input, _repeated_others_codec);
          break;
        }
        case 56: {
          RoomConsumedGold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherEnterRedPacketRoom : pb::IMessage<PB_NotifyOtherEnterRedPacketRoom> {
  private static readonly pb::MessageParser<PB_NotifyOtherEnterRedPacketRoom> _parser = new pb::MessageParser<PB_NotifyOtherEnterRedPacketRoom>(() => new PB_NotifyOtherEnterRedPacketRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherEnterRedPacketRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[83]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterRedPacketRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterRedPacketRoom(PB_NotifyOtherEnterRedPacketRoom other) : this() {
    roomType_ = other.roomType_;
    roomIndex_ = other.roomIndex_;
    Other = other.other_ != null ? other.Other.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherEnterRedPacketRoom Clone() {
    return new PB_NotifyOtherEnterRedPacketRoom(this);
  }

  /// <summary>Field number for the "room_type" field.</summary>
  public const int RoomTypeFieldNumber = 1;
  private int roomType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomType {
    get { return roomType_; }
    set {
      roomType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private long roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  /// <summary>Field number for the "other" field.</summary>
  public const int OtherFieldNumber = 3;
  private global::OtherUserInfo other_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OtherUserInfo Other {
    get { return other_; }
    set {
      other_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherEnterRedPacketRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherEnterRedPacketRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomType != other.RoomType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    if (!object.Equals(Other, other.Other)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomType != 0) hash ^= RoomType.GetHashCode();
    if (RoomIndex != 0L) hash ^= RoomIndex.GetHashCode();
    if (other_ != null) hash ^= Other.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomType);
    }
    if (RoomIndex != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(RoomIndex);
    }
    if (other_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
    }
    if (RoomIndex != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomIndex);
    }
    if (other_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherEnterRedPacketRoom other) {
    if (other == null) {
      return;
    }
    if (other.RoomType != 0) {
      RoomType = other.RoomType;
    }
    if (other.RoomIndex != 0L) {
      RoomIndex = other.RoomIndex;
    }
    if (other.other_ != null) {
      if (other_ == null) {
        other_ = new global::OtherUserInfo();
      }
      Other.MergeFrom(other.Other);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt64();
          break;
        }
        case 26: {
          if (other_ == null) {
            other_ = new global::OtherUserInfo();
          }
          input.ReadMessage(other_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LeaveRedPacketRoomRequest : pb::IMessage<PB_LeaveRedPacketRoomRequest> {
  private static readonly pb::MessageParser<PB_LeaveRedPacketRoomRequest> _parser = new pb::MessageParser<PB_LeaveRedPacketRoomRequest>(() => new PB_LeaveRedPacketRoomRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LeaveRedPacketRoomRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[84]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRedPacketRoomRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRedPacketRoomRequest(PB_LeaveRedPacketRoomRequest other) : this() {
    leaveType_ = other.leaveType_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRedPacketRoomRequest Clone() {
    return new PB_LeaveRedPacketRoomRequest(this);
  }

  /// <summary>Field number for the "leave_type" field.</summary>
  public const int LeaveTypeFieldNumber = 1;
  private int leaveType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LeaveType {
    get { return leaveType_; }
    set {
      leaveType_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 2;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LeaveRedPacketRoomRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LeaveRedPacketRoomRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LeaveType != other.LeaveType) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LeaveType != 0) hash ^= LeaveType.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LeaveType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LeaveType);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LeaveType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaveType);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LeaveRedPacketRoomRequest other) {
    if (other == null) {
      return;
    }
    if (other.LeaveType != 0) {
      LeaveType = other.LeaveType;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LeaveType = input.ReadInt32();
          break;
        }
        case 16: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_LeaveRedPacketRoomResponse : pb::IMessage<PB_LeaveRedPacketRoomResponse> {
  private static readonly pb::MessageParser<PB_LeaveRedPacketRoomResponse> _parser = new pb::MessageParser<PB_LeaveRedPacketRoomResponse>(() => new PB_LeaveRedPacketRoomResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_LeaveRedPacketRoomResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[85]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRedPacketRoomResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRedPacketRoomResponse(PB_LeaveRedPacketRoomResponse other) : this() {
    result_ = other.result_;
    gold_ = other.gold_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_LeaveRedPacketRoomResponse Clone() {
    return new PB_LeaveRedPacketRoomResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 2;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "room_index" field.</summary>
  public const int RoomIndexFieldNumber = 3;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_LeaveRedPacketRoomResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_LeaveRedPacketRoomResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Gold != other.Gold) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Gold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Gold);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_LeaveRedPacketRoomResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Gold = input.ReadInt64();
          break;
        }
        case 24: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherLeaveRedPacketRoom : pb::IMessage<PB_NotifyOtherLeaveRedPacketRoom> {
  private static readonly pb::MessageParser<PB_NotifyOtherLeaveRedPacketRoom> _parser = new pb::MessageParser<PB_NotifyOtherLeaveRedPacketRoom>(() => new PB_NotifyOtherLeaveRedPacketRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherLeaveRedPacketRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[86]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeaveRedPacketRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeaveRedPacketRoom(PB_NotifyOtherLeaveRedPacketRoom other) : this() {
    seatIndex_ = other.seatIndex_;
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherLeaveRedPacketRoom Clone() {
    return new PB_NotifyOtherLeaveRedPacketRoom(this);
  }

  /// <summary>Field number for the "seat_index" field.</summary>
  public const int SeatIndexFieldNumber = 1;
  private int seatIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatIndex {
    get { return seatIndex_; }
    set {
      seatIndex_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherLeaveRedPacketRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherLeaveRedPacketRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatIndex != other.SeatIndex) return false;
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatIndex);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherLeaveRedPacketRoom other) {
    if (other == null) {
      return;
    }
    if (other.SeatIndex != 0) {
      SeatIndex = other.SeatIndex;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SeatIndex = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OtherUnlockCannonMultiple : pb::IMessage<PB_OtherUnlockCannonMultiple> {
  private static readonly pb::MessageParser<PB_OtherUnlockCannonMultiple> _parser = new pb::MessageParser<PB_OtherUnlockCannonMultiple>(() => new PB_OtherUnlockCannonMultiple());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OtherUnlockCannonMultiple> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[87]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherUnlockCannonMultiple() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherUnlockCannonMultiple(PB_OtherUnlockCannonMultiple other) : this() {
    userId_ = other.userId_;
    maxCannonMultiple_ = other.maxCannonMultiple_;
    needDiamond_ = other.needDiamond_;
    rewardGold_ = other.rewardGold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherUnlockCannonMultiple Clone() {
    return new PB_OtherUnlockCannonMultiple(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "max_cannon_multiple" field.</summary>
  public const int MaxCannonMultipleFieldNumber = 2;
  private int maxCannonMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxCannonMultiple {
    get { return maxCannonMultiple_; }
    set {
      maxCannonMultiple_ = value;
    }
  }

  /// <summary>Field number for the "need_diamond" field.</summary>
  public const int NeedDiamondFieldNumber = 3;
  private int needDiamond_;
  /// <summary>
  ///消耗钻石
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NeedDiamond {
    get { return needDiamond_; }
    set {
      needDiamond_ = value;
    }
  }

  /// <summary>Field number for the "reward_gold" field.</summary>
  public const int RewardGoldFieldNumber = 4;
  private int rewardGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardGold {
    get { return rewardGold_; }
    set {
      rewardGold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OtherUnlockCannonMultiple);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OtherUnlockCannonMultiple other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (MaxCannonMultiple != other.MaxCannonMultiple) return false;
    if (NeedDiamond != other.NeedDiamond) return false;
    if (RewardGold != other.RewardGold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (MaxCannonMultiple != 0) hash ^= MaxCannonMultiple.GetHashCode();
    if (NeedDiamond != 0) hash ^= NeedDiamond.GetHashCode();
    if (RewardGold != 0) hash ^= RewardGold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (MaxCannonMultiple != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MaxCannonMultiple);
    }
    if (NeedDiamond != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NeedDiamond);
    }
    if (RewardGold != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RewardGold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (MaxCannonMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCannonMultiple);
    }
    if (NeedDiamond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedDiamond);
    }
    if (RewardGold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardGold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OtherUnlockCannonMultiple other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.MaxCannonMultiple != 0) {
      MaxCannonMultiple = other.MaxCannonMultiple;
    }
    if (other.NeedDiamond != 0) {
      NeedDiamond = other.NeedDiamond;
    }
    if (other.RewardGold != 0) {
      RewardGold = other.RewardGold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          MaxCannonMultiple = input.ReadInt32();
          break;
        }
        case 24: {
          NeedDiamond = input.ReadInt32();
          break;
        }
        case 32: {
          RewardGold = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_UnlockCannonMultipleRequest : pb::IMessage<PB_UnlockCannonMultipleRequest> {
  private static readonly pb::MessageParser<PB_UnlockCannonMultipleRequest> _parser = new pb::MessageParser<PB_UnlockCannonMultipleRequest>(() => new PB_UnlockCannonMultipleRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_UnlockCannonMultipleRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[88]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UnlockCannonMultipleRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UnlockCannonMultipleRequest(PB_UnlockCannonMultipleRequest other) : this() {
    targetMultiple_ = other.targetMultiple_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UnlockCannonMultipleRequest Clone() {
    return new PB_UnlockCannonMultipleRequest(this);
  }

  /// <summary>Field number for the "target_multiple" field.</summary>
  public const int TargetMultipleFieldNumber = 1;
  private int targetMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetMultiple {
    get { return targetMultiple_; }
    set {
      targetMultiple_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_UnlockCannonMultipleRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_UnlockCannonMultipleRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetMultiple != other.TargetMultiple) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetMultiple != 0) hash ^= TargetMultiple.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetMultiple != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TargetMultiple);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetMultiple);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_UnlockCannonMultipleRequest other) {
    if (other == null) {
      return;
    }
    if (other.TargetMultiple != 0) {
      TargetMultiple = other.TargetMultiple;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TargetMultiple = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_UnlockCannonMultipleResponse : pb::IMessage<PB_UnlockCannonMultipleResponse> {
  private static readonly pb::MessageParser<PB_UnlockCannonMultipleResponse> _parser = new pb::MessageParser<PB_UnlockCannonMultipleResponse>(() => new PB_UnlockCannonMultipleResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_UnlockCannonMultipleResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[89]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UnlockCannonMultipleResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UnlockCannonMultipleResponse(PB_UnlockCannonMultipleResponse other) : this() {
    result_ = other.result_;
    currentMaxMultiple_ = other.currentMaxMultiple_;
    needDiamond_ = other.needDiamond_;
    rewardGold_ = other.rewardGold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_UnlockCannonMultipleResponse Clone() {
    return new PB_UnlockCannonMultipleResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "current_max_multiple" field.</summary>
  public const int CurrentMaxMultipleFieldNumber = 2;
  private int currentMaxMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentMaxMultiple {
    get { return currentMaxMultiple_; }
    set {
      currentMaxMultiple_ = value;
    }
  }

  /// <summary>Field number for the "need_diamond" field.</summary>
  public const int NeedDiamondFieldNumber = 3;
  private int needDiamond_;
  /// <summary>
  ///消耗钻石
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NeedDiamond {
    get { return needDiamond_; }
    set {
      needDiamond_ = value;
    }
  }

  /// <summary>Field number for the "reward_gold" field.</summary>
  public const int RewardGoldFieldNumber = 4;
  private int rewardGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardGold {
    get { return rewardGold_; }
    set {
      rewardGold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_UnlockCannonMultipleResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_UnlockCannonMultipleResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (CurrentMaxMultiple != other.CurrentMaxMultiple) return false;
    if (NeedDiamond != other.NeedDiamond) return false;
    if (RewardGold != other.RewardGold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (CurrentMaxMultiple != 0) hash ^= CurrentMaxMultiple.GetHashCode();
    if (NeedDiamond != 0) hash ^= NeedDiamond.GetHashCode();
    if (RewardGold != 0) hash ^= RewardGold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (CurrentMaxMultiple != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CurrentMaxMultiple);
    }
    if (NeedDiamond != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NeedDiamond);
    }
    if (RewardGold != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RewardGold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (CurrentMaxMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentMaxMultiple);
    }
    if (NeedDiamond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedDiamond);
    }
    if (RewardGold != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardGold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_UnlockCannonMultipleResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.CurrentMaxMultiple != 0) {
      CurrentMaxMultiple = other.CurrentMaxMultiple;
    }
    if (other.NeedDiamond != 0) {
      NeedDiamond = other.NeedDiamond;
    }
    if (other.RewardGold != 0) {
      RewardGold = other.RewardGold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          CurrentMaxMultiple = input.ReadInt32();
          break;
        }
        case 24: {
          NeedDiamond = input.ReadInt32();
          break;
        }
        case 32: {
          RewardGold = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_BeginnerTaskRewardRequest : pb::IMessage<PB_BeginnerTaskRewardRequest> {
  private static readonly pb::MessageParser<PB_BeginnerTaskRewardRequest> _parser = new pb::MessageParser<PB_BeginnerTaskRewardRequest>(() => new PB_BeginnerTaskRewardRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_BeginnerTaskRewardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[90]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskRewardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskRewardRequest(PB_BeginnerTaskRewardRequest other) : this() {
    beginnerCurTask_ = other.beginnerCurTask_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskRewardRequest Clone() {
    return new PB_BeginnerTaskRewardRequest(this);
  }

  /// <summary>Field number for the "beginner_cur_task" field.</summary>
  public const int BeginnerCurTaskFieldNumber = 1;
  private int beginnerCurTask_;
  /// <summary>
  ///当前新手任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerCurTask {
    get { return beginnerCurTask_; }
    set {
      beginnerCurTask_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_BeginnerTaskRewardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_BeginnerTaskRewardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BeginnerCurTask != other.BeginnerCurTask) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BeginnerCurTask != 0) hash ^= BeginnerCurTask.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BeginnerCurTask != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BeginnerCurTask);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BeginnerCurTask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginnerCurTask);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_BeginnerTaskRewardRequest other) {
    if (other == null) {
      return;
    }
    if (other.BeginnerCurTask != 0) {
      BeginnerCurTask = other.BeginnerCurTask;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BeginnerCurTask = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyOtherBeginnerReward : pb::IMessage<PB_NotifyOtherBeginnerReward> {
  private static readonly pb::MessageParser<PB_NotifyOtherBeginnerReward> _parser = new pb::MessageParser<PB_NotifyOtherBeginnerReward>(() => new PB_NotifyOtherBeginnerReward());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyOtherBeginnerReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[91]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherBeginnerReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherBeginnerReward(PB_NotifyOtherBeginnerReward other) : this() {
    userId_ = other.userId_;
    beginnerCurTask_ = other.beginnerCurTask_;
    Property = other.property_ != null ? other.Property.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyOtherBeginnerReward Clone() {
    return new PB_NotifyOtherBeginnerReward(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "beginner_cur_task" field.</summary>
  public const int BeginnerCurTaskFieldNumber = 2;
  private int beginnerCurTask_;
  /// <summary>
  ///当前新手任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerCurTask {
    get { return beginnerCurTask_; }
    set {
      beginnerCurTask_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 3;
  private global::PB_Property property_;
  /// <summary>
  ///奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyOtherBeginnerReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyOtherBeginnerReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (BeginnerCurTask != other.BeginnerCurTask) return false;
    if (!object.Equals(Property, other.Property)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (BeginnerCurTask != 0) hash ^= BeginnerCurTask.GetHashCode();
    if (property_ != null) hash ^= Property.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (BeginnerCurTask != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BeginnerCurTask);
    }
    if (property_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (BeginnerCurTask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginnerCurTask);
    }
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyOtherBeginnerReward other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.BeginnerCurTask != 0) {
      BeginnerCurTask = other.BeginnerCurTask;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          BeginnerCurTask = input.ReadInt32();
          break;
        }
        case 26: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_BeginnerTaskRewardResponse : pb::IMessage<PB_BeginnerTaskRewardResponse> {
  private static readonly pb::MessageParser<PB_BeginnerTaskRewardResponse> _parser = new pb::MessageParser<PB_BeginnerTaskRewardResponse>(() => new PB_BeginnerTaskRewardResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_BeginnerTaskRewardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[92]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskRewardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskRewardResponse(PB_BeginnerTaskRewardResponse other) : this() {
    result_ = other.result_;
    beginnerCurTask_ = other.beginnerCurTask_;
    Properties = other.properties_ != null ? other.Properties.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskRewardResponse Clone() {
    return new PB_BeginnerTaskRewardResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "beginner_cur_task" field.</summary>
  public const int BeginnerCurTaskFieldNumber = 2;
  private int beginnerCurTask_;
  /// <summary>
  ///当前新手任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerCurTask {
    get { return beginnerCurTask_; }
    set {
      beginnerCurTask_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 3;
  private global::PB_Property properties_;
  /// <summary>
  ///奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Properties {
    get { return properties_; }
    set {
      properties_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_BeginnerTaskRewardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_BeginnerTaskRewardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (BeginnerCurTask != other.BeginnerCurTask) return false;
    if (!object.Equals(Properties, other.Properties)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (BeginnerCurTask != 0) hash ^= BeginnerCurTask.GetHashCode();
    if (properties_ != null) hash ^= Properties.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (BeginnerCurTask != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BeginnerCurTask);
    }
    if (properties_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Properties);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (BeginnerCurTask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginnerCurTask);
    }
    if (properties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_BeginnerTaskRewardResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.BeginnerCurTask != 0) {
      BeginnerCurTask = other.BeginnerCurTask;
    }
    if (other.properties_ != null) {
      if (properties_ == null) {
        properties_ = new global::PB_Property();
      }
      Properties.MergeFrom(other.Properties);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          BeginnerCurTask = input.ReadInt32();
          break;
        }
        case 26: {
          if (properties_ == null) {
            properties_ = new global::PB_Property();
          }
          input.ReadMessage(properties_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyBeginnerTaskProgress : pb::IMessage<PB_NotifyBeginnerTaskProgress> {
  private static readonly pb::MessageParser<PB_NotifyBeginnerTaskProgress> _parser = new pb::MessageParser<PB_NotifyBeginnerTaskProgress>(() => new PB_NotifyBeginnerTaskProgress());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyBeginnerTaskProgress> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[93]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBeginnerTaskProgress() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBeginnerTaskProgress(PB_NotifyBeginnerTaskProgress other) : this() {
    beginnerCurTask_ = other.beginnerCurTask_;
    beginnerTaskProgress_ = other.beginnerTaskProgress_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBeginnerTaskProgress Clone() {
    return new PB_NotifyBeginnerTaskProgress(this);
  }

  /// <summary>Field number for the "beginner_cur_task" field.</summary>
  public const int BeginnerCurTaskFieldNumber = 1;
  private int beginnerCurTask_;
  /// <summary>
  ///当前新手任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerCurTask {
    get { return beginnerCurTask_; }
    set {
      beginnerCurTask_ = value;
    }
  }

  /// <summary>Field number for the "beginner_task_progress" field.</summary>
  public const int BeginnerTaskProgressFieldNumber = 2;
  private int beginnerTaskProgress_;
  /// <summary>
  ///当前新手任务进度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerTaskProgress {
    get { return beginnerTaskProgress_; }
    set {
      beginnerTaskProgress_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyBeginnerTaskProgress);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyBeginnerTaskProgress other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BeginnerCurTask != other.BeginnerCurTask) return false;
    if (BeginnerTaskProgress != other.BeginnerTaskProgress) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BeginnerCurTask != 0) hash ^= BeginnerCurTask.GetHashCode();
    if (BeginnerTaskProgress != 0) hash ^= BeginnerTaskProgress.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BeginnerCurTask != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BeginnerCurTask);
    }
    if (BeginnerTaskProgress != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BeginnerTaskProgress);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BeginnerCurTask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginnerCurTask);
    }
    if (BeginnerTaskProgress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginnerTaskProgress);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyBeginnerTaskProgress other) {
    if (other == null) {
      return;
    }
    if (other.BeginnerCurTask != 0) {
      BeginnerCurTask = other.BeginnerCurTask;
    }
    if (other.BeginnerTaskProgress != 0) {
      BeginnerTaskProgress = other.BeginnerTaskProgress;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BeginnerCurTask = input.ReadInt32();
          break;
        }
        case 16: {
          BeginnerTaskProgress = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_BeginnerTaskResponse : pb::IMessage<PB_BeginnerTaskResponse> {
  private static readonly pb::MessageParser<PB_BeginnerTaskResponse> _parser = new pb::MessageParser<PB_BeginnerTaskResponse>(() => new PB_BeginnerTaskResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_BeginnerTaskResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[94]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskResponse(PB_BeginnerTaskResponse other) : this() {
    beginnerTaskDiamond_ = other.beginnerTaskDiamond_;
    beginnerCurTask_ = other.beginnerCurTask_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BeginnerTaskResponse Clone() {
    return new PB_BeginnerTaskResponse(this);
  }

  /// <summary>Field number for the "beginner_task_diamond" field.</summary>
  public const int BeginnerTaskDiamondFieldNumber = 1;
  private int beginnerTaskDiamond_;
  /// <summary>
  ///新手任务完成奖励钻石
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerTaskDiamond {
    get { return beginnerTaskDiamond_; }
    set {
      beginnerTaskDiamond_ = value;
    }
  }

  /// <summary>Field number for the "beginner_cur_task" field.</summary>
  public const int BeginnerCurTaskFieldNumber = 2;
  private int beginnerCurTask_;
  /// <summary>
  ///当前新手任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeginnerCurTask {
    get { return beginnerCurTask_; }
    set {
      beginnerCurTask_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_BeginnerTaskResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_BeginnerTaskResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BeginnerTaskDiamond != other.BeginnerTaskDiamond) return false;
    if (BeginnerCurTask != other.BeginnerCurTask) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BeginnerTaskDiamond != 0) hash ^= BeginnerTaskDiamond.GetHashCode();
    if (BeginnerCurTask != 0) hash ^= BeginnerCurTask.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BeginnerTaskDiamond != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BeginnerTaskDiamond);
    }
    if (BeginnerCurTask != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BeginnerCurTask);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BeginnerTaskDiamond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginnerTaskDiamond);
    }
    if (BeginnerCurTask != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginnerCurTask);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_BeginnerTaskResponse other) {
    if (other == null) {
      return;
    }
    if (other.BeginnerTaskDiamond != 0) {
      BeginnerTaskDiamond = other.BeginnerTaskDiamond;
    }
    if (other.BeginnerCurTask != 0) {
      BeginnerCurTask = other.BeginnerCurTask;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BeginnerTaskDiamond = input.ReadInt32();
          break;
        }
        case 16: {
          BeginnerCurTask = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GameRank : pb::IMessage<PB_GameRank> {
  private static readonly pb::MessageParser<PB_GameRank> _parser = new pb::MessageParser<PB_GameRank>(() => new PB_GameRank());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GameRank> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[95]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRank() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRank(PB_GameRank other) : this() {
    userId_ = other.userId_;
    gold_ = other.gold_;
    vip_ = other.vip_;
    nickname_ = other.nickname_;
    avatarUrl_ = other.avatarUrl_;
    level_ = other.level_;
    gender_ = other.gender_;
    maxMultiple_ = other.maxMultiple_;
    gameId_ = other.gameId_;
    duanwei_ = other.duanwei_;
    duanweirank_ = other.duanweirank_;
    xingxing_ = other.xingxing_;
    shangLiuShui_ = other.shangLiuShui_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRank Clone() {
    return new PB_GameRank(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private long userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 2;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "vip" field.</summary>
  public const int VipFieldNumber = 3;
  private int vip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vip {
    get { return vip_; }
    set {
      vip_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 4;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar_url" field.</summary>
  public const int AvatarUrlFieldNumber = 5;
  private string avatarUrl_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AvatarUrl {
    get { return avatarUrl_; }
    set {
      avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 6;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 7;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "max_multiple" field.</summary>
  public const int MaxMultipleFieldNumber = 8;
  private int maxMultiple_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxMultiple {
    get { return maxMultiple_; }
    set {
      maxMultiple_ = value;
    }
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 9;
  private int gameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameId {
    get { return gameId_; }
    set {
      gameId_ = value;
    }
  }

  /// <summary>Field number for the "duanwei" field.</summary>
  public const int DuanweiFieldNumber = 10;
  private int duanwei_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Duanwei {
    get { return duanwei_; }
    set {
      duanwei_ = value;
    }
  }

  /// <summary>Field number for the "duanweirank" field.</summary>
  public const int DuanweirankFieldNumber = 11;
  private int duanweirank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Duanweirank {
    get { return duanweirank_; }
    set {
      duanweirank_ = value;
    }
  }

  /// <summary>Field number for the "xingxing" field.</summary>
  public const int XingxingFieldNumber = 12;
  private int xingxing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Xingxing {
    get { return xingxing_; }
    set {
      xingxing_ = value;
    }
  }

  /// <summary>Field number for the "shangLiuShui" field.</summary>
  public const int ShangLiuShuiFieldNumber = 13;
  private long shangLiuShui_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ShangLiuShui {
    get { return shangLiuShui_; }
    set {
      shangLiuShui_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GameRank);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GameRank other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Gold != other.Gold) return false;
    if (Vip != other.Vip) return false;
    if (Nickname != other.Nickname) return false;
    if (AvatarUrl != other.AvatarUrl) return false;
    if (Level != other.Level) return false;
    if (Gender != other.Gender) return false;
    if (MaxMultiple != other.MaxMultiple) return false;
    if (GameId != other.GameId) return false;
    if (Duanwei != other.Duanwei) return false;
    if (Duanweirank != other.Duanweirank) return false;
    if (Xingxing != other.Xingxing) return false;
    if (ShangLiuShui != other.ShangLiuShui) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    if (Vip != 0) hash ^= Vip.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (MaxMultiple != 0) hash ^= MaxMultiple.GetHashCode();
    if (GameId != 0) hash ^= GameId.GetHashCode();
    if (Duanwei != 0) hash ^= Duanwei.GetHashCode();
    if (Duanweirank != 0) hash ^= Duanweirank.GetHashCode();
    if (Xingxing != 0) hash ^= Xingxing.GetHashCode();
    if (ShangLiuShui != 0L) hash ^= ShangLiuShui.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(UserId);
    }
    if (Gold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Gold);
    }
    if (Vip != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Vip);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Nickname);
    }
    if (AvatarUrl.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(AvatarUrl);
    }
    if (Level != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Level);
    }
    if (Gender != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Gender);
    }
    if (MaxMultiple != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(MaxMultiple);
    }
    if (GameId != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(GameId);
    }
    if (Duanwei != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Duanwei);
    }
    if (Duanweirank != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Duanweirank);
    }
    if (Xingxing != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(Xingxing);
    }
    if (ShangLiuShui != 0L) {
      output.WriteRawTag(104);
      output.WriteInt64(ShangLiuShui);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    if (Vip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (AvatarUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Gender != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (MaxMultiple != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMultiple);
    }
    if (GameId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
    }
    if (Duanwei != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duanwei);
    }
    if (Duanweirank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duanweirank);
    }
    if (Xingxing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Xingxing);
    }
    if (ShangLiuShui != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShangLiuShui);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GameRank other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    if (other.Vip != 0) {
      Vip = other.Vip;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.AvatarUrl.Length != 0) {
      AvatarUrl = other.AvatarUrl;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.MaxMultiple != 0) {
      MaxMultiple = other.MaxMultiple;
    }
    if (other.GameId != 0) {
      GameId = other.GameId;
    }
    if (other.Duanwei != 0) {
      Duanwei = other.Duanwei;
    }
    if (other.Duanweirank != 0) {
      Duanweirank = other.Duanweirank;
    }
    if (other.Xingxing != 0) {
      Xingxing = other.Xingxing;
    }
    if (other.ShangLiuShui != 0L) {
      ShangLiuShui = other.ShangLiuShui;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt64();
          break;
        }
        case 16: {
          Gold = input.ReadInt64();
          break;
        }
        case 24: {
          Vip = input.ReadInt32();
          break;
        }
        case 34: {
          Nickname = input.ReadString();
          break;
        }
        case 42: {
          AvatarUrl = input.ReadString();
          break;
        }
        case 48: {
          Level = input.ReadInt32();
          break;
        }
        case 56: {
          Gender = input.ReadInt32();
          break;
        }
        case 64: {
          MaxMultiple = input.ReadInt32();
          break;
        }
        case 72: {
          GameId = input.ReadInt32();
          break;
        }
        case 80: {
          Duanwei = input.ReadInt32();
          break;
        }
        case 88: {
          Duanweirank = input.ReadInt32();
          break;
        }
        case 96: {
          Xingxing = input.ReadInt32();
          break;
        }
        case 104: {
          ShangLiuShui = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GameRankResponse : pb::IMessage<PB_GameRankResponse> {
  private static readonly pb::MessageParser<PB_GameRankResponse> _parser = new pb::MessageParser<PB_GameRankResponse>(() => new PB_GameRankResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GameRankResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[96]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRankResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRankResponse(PB_GameRankResponse other) : this() {
    result_ = other.result_;
    rank_ = other.rank_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRankResponse Clone() {
    return new PB_GameRankResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_GameRank> _repeated_rank_codec
      = pb::FieldCodec.ForMessage(18, global::PB_GameRank.Parser);
  private readonly pbc::RepeatedField<global::PB_GameRank> rank_ = new pbc::RepeatedField<global::PB_GameRank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_GameRank> Rank {
    get { return rank_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GameRankResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GameRankResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!rank_.Equals(other.rank_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= rank_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    rank_.WriteTo(output, _repeated_rank_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += rank_.CalculateSize(_repeated_rank_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GameRankResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    rank_.Add(other.rank_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          rank_.AddEntriesFrom(input, _repeated_rank_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GameRankRequest : pb::IMessage<PB_GameRankRequest> {
  private static readonly pb::MessageParser<PB_GameRankRequest> _parser = new pb::MessageParser<PB_GameRankRequest>(() => new PB_GameRankRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GameRankRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[97]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRankRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRankRequest(PB_GameRankRequest other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GameRankRequest Clone() {
    return new PB_GameRankRequest(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///0:赢金币 1:登录金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GameRankRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GameRankRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GameRankRequest other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyLevelUp : pb::IMessage<PB_NotifyLevelUp> {
  private static readonly pb::MessageParser<PB_NotifyLevelUp> _parser = new pb::MessageParser<PB_NotifyLevelUp>(() => new PB_NotifyLevelUp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyLevelUp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[98]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyLevelUp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyLevelUp(PB_NotifyLevelUp other) : this() {
    userId_ = other.userId_;
    level_ = other.level_;
    experience_ = other.experience_;
    nextLevelExp_ = other.nextLevelExp_;
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyLevelUp Clone() {
    return new PB_NotifyLevelUp(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "experience" field.</summary>
  public const int ExperienceFieldNumber = 3;
  private int experience_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Experience {
    get { return experience_; }
    set {
      experience_ = value;
    }
  }

  /// <summary>Field number for the "next_level_exp" field.</summary>
  public const int NextLevelExpFieldNumber = 4;
  private int nextLevelExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextLevelExp {
    get { return nextLevelExp_; }
    set {
      nextLevelExp_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 5;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(42, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyLevelUp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyLevelUp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Level != other.Level) return false;
    if (Experience != other.Experience) return false;
    if (NextLevelExp != other.NextLevelExp) return false;
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Experience != 0) hash ^= Experience.GetHashCode();
    if (NextLevelExp != 0) hash ^= NextLevelExp.GetHashCode();
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Experience != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Experience);
    }
    if (NextLevelExp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NextLevelExp);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Experience != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Experience);
    }
    if (NextLevelExp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLevelExp);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyLevelUp other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Experience != 0) {
      Experience = other.Experience;
    }
    if (other.NextLevelExp != 0) {
      NextLevelExp = other.NextLevelExp;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          Experience = input.ReadInt32();
          break;
        }
        case 32: {
          NextLevelExp = input.ReadInt32();
          break;
        }
        case 42: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyStartGift : pb::IMessage<PB_NotifyStartGift> {
  private static readonly pb::MessageParser<PB_NotifyStartGift> _parser = new pb::MessageParser<PB_NotifyStartGift>(() => new PB_NotifyStartGift());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyStartGift> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[99]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyStartGift() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyStartGift(PB_NotifyStartGift other) : this() {
    dayOffset_ = other.dayOffset_;
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyStartGift Clone() {
    return new PB_NotifyStartGift(this);
  }

  /// <summary>Field number for the "day_offset" field.</summary>
  public const int DayOffsetFieldNumber = 1;
  private int dayOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DayOffset {
    get { return dayOffset_; }
    set {
      dayOffset_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyStartGift);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyStartGift other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DayOffset != other.DayOffset) return false;
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DayOffset != 0) hash ^= DayOffset.GetHashCode();
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DayOffset != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DayOffset);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DayOffset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayOffset);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyStartGift other) {
    if (other == null) {
      return;
    }
    if (other.DayOffset != 0) {
      DayOffset = other.DayOffset;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DayOffset = input.ReadInt32();
          break;
        }
        case 18: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetStartGiftRequest : pb::IMessage<PB_GetStartGiftRequest> {
  private static readonly pb::MessageParser<PB_GetStartGiftRequest> _parser = new pb::MessageParser<PB_GetStartGiftRequest>(() => new PB_GetStartGiftRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetStartGiftRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[100]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetStartGiftRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetStartGiftRequest(PB_GetStartGiftRequest other) : this() {
    dayOffset_ = other.dayOffset_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetStartGiftRequest Clone() {
    return new PB_GetStartGiftRequest(this);
  }

  /// <summary>Field number for the "day_offset" field.</summary>
  public const int DayOffsetFieldNumber = 1;
  private int dayOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DayOffset {
    get { return dayOffset_; }
    set {
      dayOffset_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetStartGiftRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetStartGiftRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DayOffset != other.DayOffset) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DayOffset != 0) hash ^= DayOffset.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DayOffset != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DayOffset);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DayOffset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayOffset);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetStartGiftRequest other) {
    if (other == null) {
      return;
    }
    if (other.DayOffset != 0) {
      DayOffset = other.DayOffset;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DayOffset = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetStartGiftResponse : pb::IMessage<PB_GetStartGiftResponse> {
  private static readonly pb::MessageParser<PB_GetStartGiftResponse> _parser = new pb::MessageParser<PB_GetStartGiftResponse>(() => new PB_GetStartGiftResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetStartGiftResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[101]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetStartGiftResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetStartGiftResponse(PB_GetStartGiftResponse other) : this() {
    result_ = other.result_;
    dayOffset_ = other.dayOffset_;
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetStartGiftResponse Clone() {
    return new PB_GetStartGiftResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "day_offset" field.</summary>
  public const int DayOffsetFieldNumber = 2;
  private int dayOffset_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DayOffset {
    get { return dayOffset_; }
    set {
      dayOffset_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetStartGiftResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetStartGiftResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (DayOffset != other.DayOffset) return false;
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (DayOffset != 0) hash ^= DayOffset.GetHashCode();
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (DayOffset != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DayOffset);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (DayOffset != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayOffset);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetStartGiftResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.DayOffset != 0) {
      DayOffset = other.DayOffset;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          DayOffset = input.ReadInt32();
          break;
        }
        case 26: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_AcceptFriendRequest : pb::IMessage<PB_AcceptFriendRequest> {
  private static readonly pb::MessageParser<PB_AcceptFriendRequest> _parser = new pb::MessageParser<PB_AcceptFriendRequest>(() => new PB_AcceptFriendRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_AcceptFriendRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[102]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AcceptFriendRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AcceptFriendRequest(PB_AcceptFriendRequest other) : this() {
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AcceptFriendRequest Clone() {
    return new PB_AcceptFriendRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_AcceptFriendRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_AcceptFriendRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_AcceptFriendRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_AcceptFriendResponse : pb::IMessage<PB_AcceptFriendResponse> {
  private static readonly pb::MessageParser<PB_AcceptFriendResponse> _parser = new pb::MessageParser<PB_AcceptFriendResponse>(() => new PB_AcceptFriendResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_AcceptFriendResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[103]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AcceptFriendResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AcceptFriendResponse(PB_AcceptFriendResponse other) : this() {
    result_ = other.result_;
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AcceptFriendResponse Clone() {
    return new PB_AcceptFriendResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_AcceptFriendResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_AcceptFriendResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_AcceptFriendResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_AddFriendRequest : pb::IMessage<PB_AddFriendRequest> {
  private static readonly pb::MessageParser<PB_AddFriendRequest> _parser = new pb::MessageParser<PB_AddFriendRequest>(() => new PB_AddFriendRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_AddFriendRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[104]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AddFriendRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AddFriendRequest(PB_AddFriendRequest other) : this() {
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AddFriendRequest Clone() {
    return new PB_AddFriendRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_AddFriendRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_AddFriendRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_AddFriendRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_AddFriendResponse : pb::IMessage<PB_AddFriendResponse> {
  private static readonly pb::MessageParser<PB_AddFriendResponse> _parser = new pb::MessageParser<PB_AddFriendResponse>(() => new PB_AddFriendResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_AddFriendResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[105]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AddFriendResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AddFriendResponse(PB_AddFriendResponse other) : this() {
    result_ = other.result_;
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_AddFriendResponse Clone() {
    return new PB_AddFriendResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_AddFriendResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_AddFriendResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_AddFriendResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_DeleteFriendRequest : pb::IMessage<PB_DeleteFriendRequest> {
  private static readonly pb::MessageParser<PB_DeleteFriendRequest> _parser = new pb::MessageParser<PB_DeleteFriendRequest>(() => new PB_DeleteFriendRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_DeleteFriendRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[106]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DeleteFriendRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DeleteFriendRequest(PB_DeleteFriendRequest other) : this() {
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DeleteFriendRequest Clone() {
    return new PB_DeleteFriendRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_DeleteFriendRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_DeleteFriendRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_DeleteFriendRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_DeleteFriendResponse : pb::IMessage<PB_DeleteFriendResponse> {
  private static readonly pb::MessageParser<PB_DeleteFriendResponse> _parser = new pb::MessageParser<PB_DeleteFriendResponse>(() => new PB_DeleteFriendResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_DeleteFriendResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[107]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DeleteFriendResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DeleteFriendResponse(PB_DeleteFriendResponse other) : this() {
    result_ = other.result_;
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DeleteFriendResponse Clone() {
    return new PB_DeleteFriendResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_DeleteFriendResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_DeleteFriendResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_DeleteFriendResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_Friend : pb::IMessage<PB_Friend> {
  private static readonly pb::MessageParser<PB_Friend> _parser = new pb::MessageParser<PB_Friend>(() => new PB_Friend());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_Friend> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[108]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Friend() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Friend(PB_Friend other) : this() {
    userId_ = other.userId_;
    nickname_ = other.nickname_;
    avatar_ = other.avatar_;
    gender_ = other.gender_;
    level_ = other.level_;
    vipLevel_ = other.vipLevel_;
    status_ = other.status_;
    hasGivenGold_ = other.hasGivenGold_;
    gameId_ = other.gameId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Friend Clone() {
    return new PB_Friend(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 2;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 3;
  private string avatar_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 4;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 5;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "vip_level" field.</summary>
  public const int VipLevelFieldNumber = 6;
  private int vipLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VipLevel {
    get { return vipLevel_; }
    set {
      vipLevel_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 7;
  private int status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "has_given_gold" field.</summary>
  public const int HasGivenGoldFieldNumber = 8;
  private bool hasGivenGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGivenGold {
    get { return hasGivenGold_; }
    set {
      hasGivenGold_ = value;
    }
  }

  /// <summary>Field number for the "game_id" field.</summary>
  public const int GameIdFieldNumber = 9;
  private int gameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameId {
    get { return gameId_; }
    set {
      gameId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_Friend);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_Friend other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Nickname != other.Nickname) return false;
    if (Avatar != other.Avatar) return false;
    if (Gender != other.Gender) return false;
    if (Level != other.Level) return false;
    if (VipLevel != other.VipLevel) return false;
    if (Status != other.Status) return false;
    if (HasGivenGold != other.HasGivenGold) return false;
    if (GameId != other.GameId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (HasGivenGold != false) hash ^= HasGivenGold.GetHashCode();
    if (GameId != 0) hash ^= GameId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Nickname);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Avatar);
    }
    if (Gender != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Gender);
    }
    if (Level != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Level);
    }
    if (VipLevel != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(VipLevel);
    }
    if (Status != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Status);
    }
    if (HasGivenGold != false) {
      output.WriteRawTag(64);
      output.WriteBool(HasGivenGold);
    }
    if (GameId != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(GameId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    if (Gender != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (VipLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (HasGivenGold != false) {
      size += 1 + 1;
    }
    if (GameId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_Friend other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.VipLevel != 0) {
      VipLevel = other.VipLevel;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.HasGivenGold != false) {
      HasGivenGold = other.HasGivenGold;
    }
    if (other.GameId != 0) {
      GameId = other.GameId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 18: {
          Nickname = input.ReadString();
          break;
        }
        case 26: {
          Avatar = input.ReadString();
          break;
        }
        case 32: {
          Gender = input.ReadInt32();
          break;
        }
        case 40: {
          Level = input.ReadInt32();
          break;
        }
        case 48: {
          VipLevel = input.ReadInt32();
          break;
        }
        case 56: {
          Status = input.ReadInt32();
          break;
        }
        case 64: {
          HasGivenGold = input.ReadBool();
          break;
        }
        case 72: {
          GameId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetFriendListResponse : pb::IMessage<PB_GetFriendListResponse> {
  private static readonly pb::MessageParser<PB_GetFriendListResponse> _parser = new pb::MessageParser<PB_GetFriendListResponse>(() => new PB_GetFriendListResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetFriendListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[109]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFriendListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFriendListResponse(PB_GetFriendListResponse other) : this() {
    result_ = other.result_;
    friendLimit_ = other.friendLimit_;
    friends_ = other.friends_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetFriendListResponse Clone() {
    return new PB_GetFriendListResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "friend_limit" field.</summary>
  public const int FriendLimitFieldNumber = 2;
  private int friendLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendLimit {
    get { return friendLimit_; }
    set {
      friendLimit_ = value;
    }
  }

  /// <summary>Field number for the "friends" field.</summary>
  public const int FriendsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Friend> _repeated_friends_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Friend.Parser);
  private readonly pbc::RepeatedField<global::PB_Friend> friends_ = new pbc::RepeatedField<global::PB_Friend>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Friend> Friends {
    get { return friends_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetFriendListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetFriendListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (FriendLimit != other.FriendLimit) return false;
    if(!friends_.Equals(other.friends_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (FriendLimit != 0) hash ^= FriendLimit.GetHashCode();
    hash ^= friends_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (FriendLimit != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FriendLimit);
    }
    friends_.WriteTo(output, _repeated_friends_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (FriendLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendLimit);
    }
    size += friends_.CalculateSize(_repeated_friends_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetFriendListResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.FriendLimit != 0) {
      FriendLimit = other.FriendLimit;
    }
    friends_.Add(other.friends_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          FriendLimit = input.ReadInt32();
          break;
        }
        case 26: {
          friends_.AddEntriesFrom(input, _repeated_friends_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetAddFriendListResponse : pb::IMessage<PB_GetAddFriendListResponse> {
  private static readonly pb::MessageParser<PB_GetAddFriendListResponse> _parser = new pb::MessageParser<PB_GetAddFriendListResponse>(() => new PB_GetAddFriendListResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetAddFriendListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[110]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetAddFriendListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetAddFriendListResponse(PB_GetAddFriendListResponse other) : this() {
    result_ = other.result_;
    friends_ = other.friends_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetAddFriendListResponse Clone() {
    return new PB_GetAddFriendListResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "friends" field.</summary>
  public const int FriendsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Friend> _repeated_friends_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Friend.Parser);
  private readonly pbc::RepeatedField<global::PB_Friend> friends_ = new pbc::RepeatedField<global::PB_Friend>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Friend> Friends {
    get { return friends_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetAddFriendListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetAddFriendListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!friends_.Equals(other.friends_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= friends_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    friends_.WriteTo(output, _repeated_friends_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += friends_.CalculateSize(_repeated_friends_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetAddFriendListResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    friends_.Add(other.friends_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          friends_.AddEntriesFrom(input, _repeated_friends_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EverydayActivityRequest : pb::IMessage<PB_EverydayActivityRequest> {
  private static readonly pb::MessageParser<PB_EverydayActivityRequest> _parser = new pb::MessageParser<PB_EverydayActivityRequest>(() => new PB_EverydayActivityRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EverydayActivityRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[111]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityRequest(PB_EverydayActivityRequest other) : this() {
    taskId_ = other.taskId_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityRequest Clone() {
    return new PB_EverydayActivityRequest(this);
  }

  /// <summary>Field number for the "task_id" field.</summary>
  public const int TaskIdFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_taskId_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> taskId_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TaskId {
    get { return taskId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EverydayActivityRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EverydayActivityRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!taskId_.Equals(other.taskId_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= taskId_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    taskId_.WriteTo(output, _repeated_taskId_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += taskId_.CalculateSize(_repeated_taskId_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EverydayActivityRequest other) {
    if (other == null) {
      return;
    }
    taskId_.Add(other.taskId_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          taskId_.AddEntriesFrom(input, _repeated_taskId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EverydayActivityResponse : pb::IMessage<PB_EverydayActivityResponse> {
  private static readonly pb::MessageParser<PB_EverydayActivityResponse> _parser = new pb::MessageParser<PB_EverydayActivityResponse>(() => new PB_EverydayActivityResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EverydayActivityResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[112]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityResponse(PB_EverydayActivityResponse other) : this() {
    result_ = other.result_;
    taskId_ = other.taskId_.Clone();
    activity_ = other.activity_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityResponse Clone() {
    return new PB_EverydayActivityResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "task_id" field.</summary>
  public const int TaskIdFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_taskId_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> taskId_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TaskId {
    get { return taskId_; }
  }

  /// <summary>Field number for the "activity" field.</summary>
  public const int ActivityFieldNumber = 3;
  private int activity_;
  /// <summary>
  ///活跃度奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Activity {
    get { return activity_; }
    set {
      activity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EverydayActivityResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EverydayActivityResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!taskId_.Equals(other.taskId_)) return false;
    if (Activity != other.Activity) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= taskId_.GetHashCode();
    if (Activity != 0) hash ^= Activity.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    taskId_.WriteTo(output, _repeated_taskId_codec);
    if (Activity != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Activity);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += taskId_.CalculateSize(_repeated_taskId_codec);
    if (Activity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EverydayActivityResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    taskId_.Add(other.taskId_);
    if (other.Activity != 0) {
      Activity = other.Activity;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          taskId_.AddEntriesFrom(input, _repeated_taskId_codec);
          break;
        }
        case 24: {
          Activity = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EverydayActivityAwardRequest : pb::IMessage<PB_EverydayActivityAwardRequest> {
  private static readonly pb::MessageParser<PB_EverydayActivityAwardRequest> _parser = new pb::MessageParser<PB_EverydayActivityAwardRequest>(() => new PB_EverydayActivityAwardRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EverydayActivityAwardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[113]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityAwardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityAwardRequest(PB_EverydayActivityAwardRequest other) : this() {
    activity_ = other.activity_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityAwardRequest Clone() {
    return new PB_EverydayActivityAwardRequest(this);
  }

  /// <summary>Field number for the "activity" field.</summary>
  public const int ActivityFieldNumber = 1;
  private int activity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Activity {
    get { return activity_; }
    set {
      activity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EverydayActivityAwardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EverydayActivityAwardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Activity != other.Activity) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Activity != 0) hash ^= Activity.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Activity != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Activity);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Activity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EverydayActivityAwardRequest other) {
    if (other == null) {
      return;
    }
    if (other.Activity != 0) {
      Activity = other.Activity;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Activity = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EverydayActivityAwardResponse : pb::IMessage<PB_EverydayActivityAwardResponse> {
  private static readonly pb::MessageParser<PB_EverydayActivityAwardResponse> _parser = new pb::MessageParser<PB_EverydayActivityAwardResponse>(() => new PB_EverydayActivityAwardResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EverydayActivityAwardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[114]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityAwardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityAwardResponse(PB_EverydayActivityAwardResponse other) : this() {
    result_ = other.result_;
    activity_ = other.activity_;
    property_ = other.property_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayActivityAwardResponse Clone() {
    return new PB_EverydayActivityAwardResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "activity" field.</summary>
  public const int ActivityFieldNumber = 2;
  private int activity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Activity {
    get { return activity_; }
    set {
      activity_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_property_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> property_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Property {
    get { return property_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EverydayActivityAwardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EverydayActivityAwardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Activity != other.Activity) return false;
    if(!property_.Equals(other.property_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Activity != 0) hash ^= Activity.GetHashCode();
    hash ^= property_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Activity != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Activity);
    }
    property_.WriteTo(output, _repeated_property_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Activity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
    }
    size += property_.CalculateSize(_repeated_property_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EverydayActivityAwardResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Activity != 0) {
      Activity = other.Activity;
    }
    property_.Add(other.property_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Activity = input.ReadInt32();
          break;
        }
        case 26: {
          property_.AddEntriesFrom(input, _repeated_property_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EverydayTaskProgress : pb::IMessage<PB_EverydayTaskProgress> {
  private static readonly pb::MessageParser<PB_EverydayTaskProgress> _parser = new pb::MessageParser<PB_EverydayTaskProgress>(() => new PB_EverydayTaskProgress());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EverydayTaskProgress> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[115]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayTaskProgress() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayTaskProgress(PB_EverydayTaskProgress other) : this() {
    taskId_ = other.taskId_;
    progress_ = other.progress_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayTaskProgress Clone() {
    return new PB_EverydayTaskProgress(this);
  }

  /// <summary>Field number for the "task_id" field.</summary>
  public const int TaskIdFieldNumber = 1;
  private int taskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 2;
  private int progress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EverydayTaskProgress);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EverydayTaskProgress other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TaskId != other.TaskId) return false;
    if (Progress != other.Progress) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TaskId != 0) hash ^= TaskId.GetHashCode();
    if (Progress != 0) hash ^= Progress.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TaskId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TaskId);
    }
    if (Progress != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Progress);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TaskId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
    }
    if (Progress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EverydayTaskProgress other) {
    if (other == null) {
      return;
    }
    if (other.TaskId != 0) {
      TaskId = other.TaskId;
    }
    if (other.Progress != 0) {
      Progress = other.Progress;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TaskId = input.ReadInt32();
          break;
        }
        case 16: {
          Progress = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_EverydayTaskProgressResponse : pb::IMessage<PB_EverydayTaskProgressResponse> {
  private static readonly pb::MessageParser<PB_EverydayTaskProgressResponse> _parser = new pb::MessageParser<PB_EverydayTaskProgressResponse>(() => new PB_EverydayTaskProgressResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_EverydayTaskProgressResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[116]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayTaskProgressResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayTaskProgressResponse(PB_EverydayTaskProgressResponse other) : this() {
    result_ = other.result_;
    activity_ = other.activity_;
    state_ = other.state_.Clone();
    task_ = other.task_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_EverydayTaskProgressResponse Clone() {
    return new PB_EverydayTaskProgressResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "activity" field.</summary>
  public const int ActivityFieldNumber = 2;
  private int activity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Activity {
    get { return activity_; }
    set {
      activity_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_state_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> state_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> State {
    get { return state_; }
  }

  /// <summary>Field number for the "task" field.</summary>
  public const int TaskFieldNumber = 4;
  private static readonly pb::FieldCodec<global::PB_EverydayTaskProgress> _repeated_task_codec
      = pb::FieldCodec.ForMessage(34, global::PB_EverydayTaskProgress.Parser);
  private readonly pbc::RepeatedField<global::PB_EverydayTaskProgress> task_ = new pbc::RepeatedField<global::PB_EverydayTaskProgress>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_EverydayTaskProgress> Task {
    get { return task_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_EverydayTaskProgressResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_EverydayTaskProgressResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Activity != other.Activity) return false;
    if(!state_.Equals(other.state_)) return false;
    if(!task_.Equals(other.task_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Activity != 0) hash ^= Activity.GetHashCode();
    hash ^= state_.GetHashCode();
    hash ^= task_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Activity != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Activity);
    }
    state_.WriteTo(output, _repeated_state_codec);
    task_.WriteTo(output, _repeated_task_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Activity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Activity);
    }
    size += state_.CalculateSize(_repeated_state_codec);
    size += task_.CalculateSize(_repeated_task_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_EverydayTaskProgressResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Activity != 0) {
      Activity = other.Activity;
    }
    state_.Add(other.state_);
    task_.Add(other.task_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Activity = input.ReadInt32();
          break;
        }
        case 26:
        case 24: {
          state_.AddEntriesFrom(input, _repeated_state_codec);
          break;
        }
        case 34: {
          task_.AddEntriesFrom(input, _repeated_task_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GiveOtherPropertyRequest : pb::IMessage<PB_GiveOtherPropertyRequest> {
  private static readonly pb::MessageParser<PB_GiveOtherPropertyRequest> _parser = new pb::MessageParser<PB_GiveOtherPropertyRequest>(() => new PB_GiveOtherPropertyRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GiveOtherPropertyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[117]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveOtherPropertyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveOtherPropertyRequest(PB_GiveOtherPropertyRequest other) : this() {
    userId_ = other.userId_;
    Property = other.property_ != null ? other.Property.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveOtherPropertyRequest Clone() {
    return new PB_GiveOtherPropertyRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 2;
  private global::PB_Property property_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GiveOtherPropertyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GiveOtherPropertyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (!object.Equals(Property, other.Property)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (property_ != null) hash ^= Property.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (property_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GiveOtherPropertyRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 18: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GiveOtherPropertyResponse : pb::IMessage<PB_GiveOtherPropertyResponse> {
  private static readonly pb::MessageParser<PB_GiveOtherPropertyResponse> _parser = new pb::MessageParser<PB_GiveOtherPropertyResponse>(() => new PB_GiveOtherPropertyResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GiveOtherPropertyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[118]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveOtherPropertyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveOtherPropertyResponse(PB_GiveOtherPropertyResponse other) : this() {
    result_ = other.result_;
    userId_ = other.userId_;
    Property = other.property_ != null ? other.Property.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveOtherPropertyResponse Clone() {
    return new PB_GiveOtherPropertyResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 3;
  private global::PB_Property property_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GiveOtherPropertyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GiveOtherPropertyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (UserId != other.UserId) return false;
    if (!object.Equals(Property, other.Property)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (property_ != null) hash ^= Property.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
    if (property_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GiveOtherPropertyResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
        case 26: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_RedPacketDistributionCountdown : pb::IMessage<PB_RedPacketDistributionCountdown> {
  private static readonly pb::MessageParser<PB_RedPacketDistributionCountdown> _parser = new pb::MessageParser<PB_RedPacketDistributionCountdown>(() => new PB_RedPacketDistributionCountdown());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_RedPacketDistributionCountdown> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[119]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RedPacketDistributionCountdown() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RedPacketDistributionCountdown(PB_RedPacketDistributionCountdown other) : this() {
    countdown_ = other.countdown_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RedPacketDistributionCountdown Clone() {
    return new PB_RedPacketDistributionCountdown(this);
  }

  /// <summary>Field number for the "countdown" field.</summary>
  public const int CountdownFieldNumber = 1;
  private int countdown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Countdown {
    get { return countdown_; }
    set {
      countdown_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_RedPacketDistributionCountdown);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_RedPacketDistributionCountdown other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Countdown != other.Countdown) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Countdown != 0) hash ^= Countdown.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Countdown != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Countdown);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Countdown != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Countdown);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_RedPacketDistributionCountdown other) {
    if (other == null) {
      return;
    }
    if (other.Countdown != 0) {
      Countdown = other.Countdown;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Countdown = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_RejectFriendResponse : pb::IMessage<PB_RejectFriendResponse> {
  private static readonly pb::MessageParser<PB_RejectFriendResponse> _parser = new pb::MessageParser<PB_RejectFriendResponse>(() => new PB_RejectFriendResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_RejectFriendResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[120]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RejectFriendResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RejectFriendResponse(PB_RejectFriendResponse other) : this() {
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RejectFriendResponse Clone() {
    return new PB_RejectFriendResponse(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_RejectFriendResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_RejectFriendResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_RejectFriendResponse other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_RejectFriendRequest : pb::IMessage<PB_RejectFriendRequest> {
  private static readonly pb::MessageParser<PB_RejectFriendRequest> _parser = new pb::MessageParser<PB_RejectFriendRequest>(() => new PB_RejectFriendRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_RejectFriendRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[121]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RejectFriendRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RejectFriendRequest(PB_RejectFriendRequest other) : this() {
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RejectFriendRequest Clone() {
    return new PB_RejectFriendRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_RejectFriendRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_RejectFriendRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_RejectFriendRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PurchasePropertyResponse : pb::IMessage<PB_PurchasePropertyResponse> {
  private static readonly pb::MessageParser<PB_PurchasePropertyResponse> _parser = new pb::MessageParser<PB_PurchasePropertyResponse>(() => new PB_PurchasePropertyResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PurchasePropertyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[122]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PurchasePropertyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PurchasePropertyResponse(PB_PurchasePropertyResponse other) : this() {
    result_ = other.result_;
    Property = other.property_ != null ? other.Property.Clone() : null;
    diamondCost_ = other.diamondCost_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PurchasePropertyResponse Clone() {
    return new PB_PurchasePropertyResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 2;
  private global::PB_Property property_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  /// <summary>Field number for the "diamond_cost" field.</summary>
  public const int DiamondCostFieldNumber = 3;
  private long diamondCost_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DiamondCost {
    get { return diamondCost_; }
    set {
      diamondCost_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PurchasePropertyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PurchasePropertyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!object.Equals(Property, other.Property)) return false;
    if (DiamondCost != other.DiamondCost) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (property_ != null) hash ^= Property.GetHashCode();
    if (DiamondCost != 0L) hash ^= DiamondCost.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (property_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Property);
    }
    if (DiamondCost != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(DiamondCost);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    if (DiamondCost != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiamondCost);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PurchasePropertyResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
    if (other.DiamondCost != 0L) {
      DiamondCost = other.DiamondCost;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
        case 24: {
          DiamondCost = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PurchasePropertyRequest : pb::IMessage<PB_PurchasePropertyRequest> {
  private static readonly pb::MessageParser<PB_PurchasePropertyRequest> _parser = new pb::MessageParser<PB_PurchasePropertyRequest>(() => new PB_PurchasePropertyRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PurchasePropertyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[123]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PurchasePropertyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PurchasePropertyRequest(PB_PurchasePropertyRequest other) : this() {
    Property = other.property_ != null ? other.Property.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PurchasePropertyRequest Clone() {
    return new PB_PurchasePropertyRequest(this);
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 1;
  private global::PB_Property property_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PurchasePropertyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PurchasePropertyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Property, other.Property)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (property_ != null) hash ^= Property.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (property_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PurchasePropertyRequest other) {
    if (other == null) {
      return;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_Mail : pb::IMessage<PB_Mail> {
  private static readonly pb::MessageParser<PB_Mail> _parser = new pb::MessageParser<PB_Mail>(() => new PB_Mail());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_Mail> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[124]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Mail() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Mail(PB_Mail other) : this() {
    mailId_ = other.mailId_;
    title_ = other.title_;
    content_ = other.content_;
    sendTime_ = other.sendTime_;
    property_ = other.property_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_Mail Clone() {
    return new PB_Mail(this);
  }

  /// <summary>Field number for the "mail_id" field.</summary>
  public const int MailIdFieldNumber = 1;
  private long mailId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long MailId {
    get { return mailId_; }
    set {
      mailId_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 2;
  private string title_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 3;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "send_time" field.</summary>
  public const int SendTimeFieldNumber = 4;
  private long sendTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SendTime {
    get { return sendTime_; }
    set {
      sendTime_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 5;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_property_codec
      = pb::FieldCodec.ForMessage(42, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> property_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Property {
    get { return property_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_Mail);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_Mail other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MailId != other.MailId) return false;
    if (Title != other.Title) return false;
    if (Content != other.Content) return false;
    if (SendTime != other.SendTime) return false;
    if(!property_.Equals(other.property_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MailId != 0L) hash ^= MailId.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (SendTime != 0L) hash ^= SendTime.GetHashCode();
    hash ^= property_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MailId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(MailId);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Title);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Content);
    }
    if (SendTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(SendTime);
    }
    property_.WriteTo(output, _repeated_property_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MailId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MailId);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    if (SendTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
    }
    size += property_.CalculateSize(_repeated_property_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_Mail other) {
    if (other == null) {
      return;
    }
    if (other.MailId != 0L) {
      MailId = other.MailId;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.SendTime != 0L) {
      SendTime = other.SendTime;
    }
    property_.Add(other.property_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          MailId = input.ReadInt64();
          break;
        }
        case 18: {
          Title = input.ReadString();
          break;
        }
        case 26: {
          Content = input.ReadString();
          break;
        }
        case 32: {
          SendTime = input.ReadInt64();
          break;
        }
        case 42: {
          property_.AddEntriesFrom(input, _repeated_property_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetMailResponse : pb::IMessage<PB_GetMailResponse> {
  private static readonly pb::MessageParser<PB_GetMailResponse> _parser = new pb::MessageParser<PB_GetMailResponse>(() => new PB_GetMailResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetMailResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[125]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetMailResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetMailResponse(PB_GetMailResponse other) : this() {
    result_ = other.result_;
    mail_ = other.mail_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetMailResponse Clone() {
    return new PB_GetMailResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "mail" field.</summary>
  public const int MailFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Mail> _repeated_mail_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Mail.Parser);
  private readonly pbc::RepeatedField<global::PB_Mail> mail_ = new pbc::RepeatedField<global::PB_Mail>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Mail> Mail {
    get { return mail_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetMailResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetMailResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!mail_.Equals(other.mail_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= mail_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    mail_.WriteTo(output, _repeated_mail_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += mail_.CalculateSize(_repeated_mail_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetMailResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    mail_.Add(other.mail_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          mail_.AddEntriesFrom(input, _repeated_mail_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_DelMailGetAwardRequest : pb::IMessage<PB_DelMailGetAwardRequest> {
  private static readonly pb::MessageParser<PB_DelMailGetAwardRequest> _parser = new pb::MessageParser<PB_DelMailGetAwardRequest>(() => new PB_DelMailGetAwardRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_DelMailGetAwardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[126]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DelMailGetAwardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DelMailGetAwardRequest(PB_DelMailGetAwardRequest other) : this() {
    mailId_ = other.mailId_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DelMailGetAwardRequest Clone() {
    return new PB_DelMailGetAwardRequest(this);
  }

  /// <summary>Field number for the "mail_id" field.</summary>
  public const int MailIdFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_mailId_codec
      = pb::FieldCodec.ForInt64(10);
  private readonly pbc::RepeatedField<long> mailId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> MailId {
    get { return mailId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_DelMailGetAwardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_DelMailGetAwardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!mailId_.Equals(other.mailId_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= mailId_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    mailId_.WriteTo(output, _repeated_mailId_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += mailId_.CalculateSize(_repeated_mailId_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_DelMailGetAwardRequest other) {
    if (other == null) {
      return;
    }
    mailId_.Add(other.mailId_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          mailId_.AddEntriesFrom(input, _repeated_mailId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_DelMailGetAwardResponse : pb::IMessage<PB_DelMailGetAwardResponse> {
  private static readonly pb::MessageParser<PB_DelMailGetAwardResponse> _parser = new pb::MessageParser<PB_DelMailGetAwardResponse>(() => new PB_DelMailGetAwardResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_DelMailGetAwardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[127]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DelMailGetAwardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DelMailGetAwardResponse(PB_DelMailGetAwardResponse other) : this() {
    result_ = other.result_;
    mailId_ = other.mailId_.Clone();
    property_ = other.property_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_DelMailGetAwardResponse Clone() {
    return new PB_DelMailGetAwardResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "mail_id" field.</summary>
  public const int MailIdFieldNumber = 2;
  private static readonly pb::FieldCodec<long> _repeated_mailId_codec
      = pb::FieldCodec.ForInt64(18);
  private readonly pbc::RepeatedField<long> mailId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> MailId {
    get { return mailId_; }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_property_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> property_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Property {
    get { return property_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_DelMailGetAwardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_DelMailGetAwardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!mailId_.Equals(other.mailId_)) return false;
    if(!property_.Equals(other.property_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= mailId_.GetHashCode();
    hash ^= property_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    mailId_.WriteTo(output, _repeated_mailId_codec);
    property_.WriteTo(output, _repeated_property_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += mailId_.CalculateSize(_repeated_mailId_codec);
    size += property_.CalculateSize(_repeated_property_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_DelMailGetAwardResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    mailId_.Add(other.mailId_);
    property_.Add(other.property_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          mailId_.AddEntriesFrom(input, _repeated_mailId_codec);
          break;
        }
        case 26: {
          property_.AddEntriesFrom(input, _repeated_property_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GiveRecord : pb::IMessage<PB_GiveRecord> {
  private static readonly pb::MessageParser<PB_GiveRecord> _parser = new pb::MessageParser<PB_GiveRecord>(() => new PB_GiveRecord());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GiveRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[128]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveRecord(PB_GiveRecord other) : this() {
    giveId_ = other.giveId_;
    userid_ = other.userid_;
    Property = other.property_ != null ? other.Property.Clone() : null;
    timestamp_ = other.timestamp_;
    nickname_ = other.nickname_;
    avatarUrl_ = other.avatarUrl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveRecord Clone() {
    return new PB_GiveRecord(this);
  }

  /// <summary>Field number for the "give_id" field.</summary>
  public const int GiveIdFieldNumber = 1;
  private long giveId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GiveId {
    get { return giveId_; }
    set {
      giveId_ = value;
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 2;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 3;
  private global::PB_Property property_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 4;
  private long timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 5;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar_url" field.</summary>
  public const int AvatarUrlFieldNumber = 6;
  private string avatarUrl_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AvatarUrl {
    get { return avatarUrl_; }
    set {
      avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GiveRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GiveRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GiveId != other.GiveId) return false;
    if (Userid != other.Userid) return false;
    if (!object.Equals(Property, other.Property)) return false;
    if (Timestamp != other.Timestamp) return false;
    if (Nickname != other.Nickname) return false;
    if (AvatarUrl != other.AvatarUrl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GiveId != 0L) hash ^= GiveId.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (property_ != null) hash ^= Property.GetHashCode();
    if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GiveId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(GiveId);
    }
    if (Userid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Userid);
    }
    if (property_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Property);
    }
    if (Timestamp != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Timestamp);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Nickname);
    }
    if (AvatarUrl.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(AvatarUrl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GiveId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiveId);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    if (Timestamp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (AvatarUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GiveRecord other) {
    if (other == null) {
      return;
    }
    if (other.GiveId != 0L) {
      GiveId = other.GiveId;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
    if (other.Timestamp != 0L) {
      Timestamp = other.Timestamp;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.AvatarUrl.Length != 0) {
      AvatarUrl = other.AvatarUrl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GiveId = input.ReadInt64();
          break;
        }
        case 16: {
          Userid = input.ReadInt32();
          break;
        }
        case 26: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
        case 32: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 42: {
          Nickname = input.ReadString();
          break;
        }
        case 50: {
          AvatarUrl = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GiveRecordResponse : pb::IMessage<PB_GiveRecordResponse> {
  private static readonly pb::MessageParser<PB_GiveRecordResponse> _parser = new pb::MessageParser<PB_GiveRecordResponse>(() => new PB_GiveRecordResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GiveRecordResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[129]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveRecordResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveRecordResponse(PB_GiveRecordResponse other) : this() {
    result_ = other.result_;
    record_ = other.record_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveRecordResponse Clone() {
    return new PB_GiveRecordResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "record" field.</summary>
  public const int RecordFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_GiveRecord> _repeated_record_codec
      = pb::FieldCodec.ForMessage(18, global::PB_GiveRecord.Parser);
  private readonly pbc::RepeatedField<global::PB_GiveRecord> record_ = new pbc::RepeatedField<global::PB_GiveRecord>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_GiveRecord> Record {
    get { return record_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GiveRecordResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GiveRecordResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!record_.Equals(other.record_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= record_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    record_.WriteTo(output, _repeated_record_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += record_.CalculateSize(_repeated_record_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GiveRecordResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    record_.Add(other.record_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          record_.AddEntriesFrom(input, _repeated_record_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetGiveRequest : pb::IMessage<PB_GetGiveRequest> {
  private static readonly pb::MessageParser<PB_GetGiveRequest> _parser = new pb::MessageParser<PB_GetGiveRequest>(() => new PB_GetGiveRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetGiveRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[130]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetGiveRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetGiveRequest(PB_GetGiveRequest other) : this() {
    giveId_ = other.giveId_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetGiveRequest Clone() {
    return new PB_GetGiveRequest(this);
  }

  /// <summary>Field number for the "give_id" field.</summary>
  public const int GiveIdFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_giveId_codec
      = pb::FieldCodec.ForInt64(10);
  private readonly pbc::RepeatedField<long> giveId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> GiveId {
    get { return giveId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetGiveRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetGiveRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!giveId_.Equals(other.giveId_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= giveId_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    giveId_.WriteTo(output, _repeated_giveId_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += giveId_.CalculateSize(_repeated_giveId_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetGiveRequest other) {
    if (other == null) {
      return;
    }
    giveId_.Add(other.giveId_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          giveId_.AddEntriesFrom(input, _repeated_giveId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetGiveResponse : pb::IMessage<PB_GetGiveResponse> {
  private static readonly pb::MessageParser<PB_GetGiveResponse> _parser = new pb::MessageParser<PB_GetGiveResponse>(() => new PB_GetGiveResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetGiveResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[131]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetGiveResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetGiveResponse(PB_GetGiveResponse other) : this() {
    result_ = other.result_;
    property_ = other.property_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetGiveResponse Clone() {
    return new PB_GetGiveResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_property_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> property_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Property {
    get { return property_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetGiveResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetGiveResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!property_.Equals(other.property_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= property_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    property_.WriteTo(output, _repeated_property_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += property_.CalculateSize(_repeated_property_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetGiveResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    property_.Add(other.property_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          property_.AddEntriesFrom(input, _repeated_property_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_IosPayPropertyResponse : pb::IMessage<PB_IosPayPropertyResponse> {
  private static readonly pb::MessageParser<PB_IosPayPropertyResponse> _parser = new pb::MessageParser<PB_IosPayPropertyResponse>(() => new PB_IosPayPropertyResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_IosPayPropertyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[132]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_IosPayPropertyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_IosPayPropertyResponse(PB_IosPayPropertyResponse other) : this() {
    result_ = other.result_;
    Property = other.property_ != null ? other.Property.Clone() : null;
    firstAward_ = other.firstAward_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_IosPayPropertyResponse Clone() {
    return new PB_IosPayPropertyResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 2;
  private global::PB_Property property_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  /// <summary>Field number for the "first_award" field.</summary>
  public const int FirstAwardFieldNumber = 3;
  private int firstAward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FirstAward {
    get { return firstAward_; }
    set {
      firstAward_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_IosPayPropertyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_IosPayPropertyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!object.Equals(Property, other.Property)) return false;
    if (FirstAward != other.FirstAward) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (property_ != null) hash ^= Property.GetHashCode();
    if (FirstAward != 0) hash ^= FirstAward.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (property_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Property);
    }
    if (FirstAward != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FirstAward);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    if (FirstAward != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstAward);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_IosPayPropertyResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
    if (other.FirstAward != 0) {
      FirstAward = other.FirstAward;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
        case 24: {
          FirstAward = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_IosPayPropertyRequest : pb::IMessage<PB_IosPayPropertyRequest> {
  private static readonly pb::MessageParser<PB_IosPayPropertyRequest> _parser = new pb::MessageParser<PB_IosPayPropertyRequest>(() => new PB_IosPayPropertyRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_IosPayPropertyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[133]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_IosPayPropertyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_IosPayPropertyRequest(PB_IosPayPropertyRequest other) : this() {
    payId_ = other.payId_;
    productId_ = other.productId_;
    orderNum_ = other.orderNum_;
    pkey_ = other.pkey_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_IosPayPropertyRequest Clone() {
    return new PB_IosPayPropertyRequest(this);
  }

  /// <summary>Field number for the "pay_id" field.</summary>
  public const int PayIdFieldNumber = 1;
  private long payId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PayId {
    get { return payId_; }
    set {
      payId_ = value;
    }
  }

  /// <summary>Field number for the "product_id" field.</summary>
  public const int ProductIdFieldNumber = 2;
  private int productId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProductId {
    get { return productId_; }
    set {
      productId_ = value;
    }
  }

  /// <summary>Field number for the "order_num" field.</summary>
  public const int OrderNumFieldNumber = 3;
  private string orderNum_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OrderNum {
    get { return orderNum_; }
    set {
      orderNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pkey" field.</summary>
  public const int PkeyFieldNumber = 4;
  private string pkey_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pkey {
    get { return pkey_; }
    set {
      pkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_IosPayPropertyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_IosPayPropertyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PayId != other.PayId) return false;
    if (ProductId != other.ProductId) return false;
    if (OrderNum != other.OrderNum) return false;
    if (Pkey != other.Pkey) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PayId != 0L) hash ^= PayId.GetHashCode();
    if (ProductId != 0) hash ^= ProductId.GetHashCode();
    if (OrderNum.Length != 0) hash ^= OrderNum.GetHashCode();
    if (Pkey.Length != 0) hash ^= Pkey.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PayId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PayId);
    }
    if (ProductId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ProductId);
    }
    if (OrderNum.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(OrderNum);
    }
    if (Pkey.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Pkey);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PayId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PayId);
    }
    if (ProductId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProductId);
    }
    if (OrderNum.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNum);
    }
    if (Pkey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pkey);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_IosPayPropertyRequest other) {
    if (other == null) {
      return;
    }
    if (other.PayId != 0L) {
      PayId = other.PayId;
    }
    if (other.ProductId != 0) {
      ProductId = other.ProductId;
    }
    if (other.OrderNum.Length != 0) {
      OrderNum = other.OrderNum;
    }
    if (other.Pkey.Length != 0) {
      Pkey = other.Pkey;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PayId = input.ReadInt64();
          break;
        }
        case 16: {
          ProductId = input.ReadInt32();
          break;
        }
        case 26: {
          OrderNum = input.ReadString();
          break;
        }
        case 34: {
          Pkey = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SignIn : pb::IMessage<PB_SignIn> {
  private static readonly pb::MessageParser<PB_SignIn> _parser = new pb::MessageParser<PB_SignIn>(() => new PB_SignIn());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SignIn> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[134]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignIn() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignIn(PB_SignIn other) : this() {
    day_ = other.day_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignIn Clone() {
    return new PB_SignIn(this);
  }

  /// <summary>Field number for the "day" field.</summary>
  public const int DayFieldNumber = 1;
  private int day_;
  /// <summary>
  ///1-7:周一至周日 负数的绝对值表示连续天数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Day {
    get { return day_; }
    set {
      day_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private int status_;
  /// <summary>
  ///1:未领取 2:已领取 3:错过
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SignIn);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SignIn other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Day != other.Day) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Day != 0) hash ^= Day.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Day != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Day);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Day != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SignIn other) {
    if (other == null) {
      return;
    }
    if (other.Day != 0) {
      Day = other.Day;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Day = input.ReadInt32();
          break;
        }
        case 16: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SignInAwardRequest : pb::IMessage<PB_SignInAwardRequest> {
  private static readonly pb::MessageParser<PB_SignInAwardRequest> _parser = new pb::MessageParser<PB_SignInAwardRequest>(() => new PB_SignInAwardRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SignInAwardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[135]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignInAwardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignInAwardRequest(PB_SignInAwardRequest other) : this() {
    day_ = other.day_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignInAwardRequest Clone() {
    return new PB_SignInAwardRequest(this);
  }

  /// <summary>Field number for the "day" field.</summary>
  public const int DayFieldNumber = 1;
  private int day_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Day {
    get { return day_; }
    set {
      day_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SignInAwardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SignInAwardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Day != other.Day) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Day != 0) hash ^= Day.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Day != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Day);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Day != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SignInAwardRequest other) {
    if (other == null) {
      return;
    }
    if (other.Day != 0) {
      Day = other.Day;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Day = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SignInAwardResponse : pb::IMessage<PB_SignInAwardResponse> {
  private static readonly pb::MessageParser<PB_SignInAwardResponse> _parser = new pb::MessageParser<PB_SignInAwardResponse>(() => new PB_SignInAwardResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SignInAwardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[136]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignInAwardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignInAwardResponse(PB_SignInAwardResponse other) : this() {
    result_ = other.result_;
    SignIn = other.signIn_ != null ? other.SignIn.Clone() : null;
    property_ = other.property_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignInAwardResponse Clone() {
    return new PB_SignInAwardResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "sign_in" field.</summary>
  public const int SignInFieldNumber = 2;
  private global::PB_SignIn signIn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_SignIn SignIn {
    get { return signIn_; }
    set {
      signIn_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_property_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> property_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Property {
    get { return property_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SignInAwardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SignInAwardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!object.Equals(SignIn, other.SignIn)) return false;
    if(!property_.Equals(other.property_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (signIn_ != null) hash ^= SignIn.GetHashCode();
    hash ^= property_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (signIn_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SignIn);
    }
    property_.WriteTo(output, _repeated_property_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (signIn_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignIn);
    }
    size += property_.CalculateSize(_repeated_property_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SignInAwardResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.signIn_ != null) {
      if (signIn_ == null) {
        signIn_ = new global::PB_SignIn();
      }
      SignIn.MergeFrom(other.SignIn);
    }
    property_.Add(other.property_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          if (signIn_ == null) {
            signIn_ = new global::PB_SignIn();
          }
          input.ReadMessage(signIn_);
          break;
        }
        case 26: {
          property_.AddEntriesFrom(input, _repeated_property_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ChangeCannonStyleRequest : pb::IMessage<PB_ChangeCannonStyleRequest> {
  private static readonly pb::MessageParser<PB_ChangeCannonStyleRequest> _parser = new pb::MessageParser<PB_ChangeCannonStyleRequest>(() => new PB_ChangeCannonStyleRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ChangeCannonStyleRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[137]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonStyleRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonStyleRequest(PB_ChangeCannonStyleRequest other) : this() {
    cannonStyle_ = other.cannonStyle_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonStyleRequest Clone() {
    return new PB_ChangeCannonStyleRequest(this);
  }

  /// <summary>Field number for the "cannon_style" field.</summary>
  public const int CannonStyleFieldNumber = 1;
  private int cannonStyle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CannonStyle {
    get { return cannonStyle_; }
    set {
      cannonStyle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ChangeCannonStyleRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ChangeCannonStyleRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CannonStyle != other.CannonStyle) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CannonStyle != 0) hash ^= CannonStyle.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CannonStyle != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CannonStyle);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CannonStyle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CannonStyle);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ChangeCannonStyleRequest other) {
    if (other == null) {
      return;
    }
    if (other.CannonStyle != 0) {
      CannonStyle = other.CannonStyle;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CannonStyle = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ChangeCannonStyleResponse : pb::IMessage<PB_ChangeCannonStyleResponse> {
  private static readonly pb::MessageParser<PB_ChangeCannonStyleResponse> _parser = new pb::MessageParser<PB_ChangeCannonStyleResponse>(() => new PB_ChangeCannonStyleResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ChangeCannonStyleResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[138]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonStyleResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonStyleResponse(PB_ChangeCannonStyleResponse other) : this() {
    result_ = other.result_;
    currentCannonStyle_ = other.currentCannonStyle_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ChangeCannonStyleResponse Clone() {
    return new PB_ChangeCannonStyleResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "current_cannon_style" field.</summary>
  public const int CurrentCannonStyleFieldNumber = 2;
  private int currentCannonStyle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentCannonStyle {
    get { return currentCannonStyle_; }
    set {
      currentCannonStyle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ChangeCannonStyleResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ChangeCannonStyleResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (CurrentCannonStyle != other.CurrentCannonStyle) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (CurrentCannonStyle != 0) hash ^= CurrentCannonStyle.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (CurrentCannonStyle != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CurrentCannonStyle);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (CurrentCannonStyle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentCannonStyle);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ChangeCannonStyleResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.CurrentCannonStyle != 0) {
      CurrentCannonStyle = other.CurrentCannonStyle;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          CurrentCannonStyle = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OtherChangeCannonStyle : pb::IMessage<PB_OtherChangeCannonStyle> {
  private static readonly pb::MessageParser<PB_OtherChangeCannonStyle> _parser = new pb::MessageParser<PB_OtherChangeCannonStyle>(() => new PB_OtherChangeCannonStyle());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OtherChangeCannonStyle> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[139]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherChangeCannonStyle() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherChangeCannonStyle(PB_OtherChangeCannonStyle other) : this() {
    userId_ = other.userId_;
    currentCannonStyle_ = other.currentCannonStyle_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OtherChangeCannonStyle Clone() {
    return new PB_OtherChangeCannonStyle(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "current_cannon_style" field.</summary>
  public const int CurrentCannonStyleFieldNumber = 2;
  private int currentCannonStyle_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentCannonStyle {
    get { return currentCannonStyle_; }
    set {
      currentCannonStyle_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OtherChangeCannonStyle);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OtherChangeCannonStyle other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (CurrentCannonStyle != other.CurrentCannonStyle) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (CurrentCannonStyle != 0) hash ^= CurrentCannonStyle.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (CurrentCannonStyle != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CurrentCannonStyle);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (CurrentCannonStyle != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentCannonStyle);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OtherChangeCannonStyle other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.CurrentCannonStyle != 0) {
      CurrentCannonStyle = other.CurrentCannonStyle;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          CurrentCannonStyle = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyDecreaseConsumedGold : pb::IMessage<PB_NotifyDecreaseConsumedGold> {
  private static readonly pb::MessageParser<PB_NotifyDecreaseConsumedGold> _parser = new pb::MessageParser<PB_NotifyDecreaseConsumedGold>(() => new PB_NotifyDecreaseConsumedGold());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyDecreaseConsumedGold> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[140]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyDecreaseConsumedGold() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyDecreaseConsumedGold(PB_NotifyDecreaseConsumedGold other) : this() {
    decreasedGold_ = other.decreasedGold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyDecreaseConsumedGold Clone() {
    return new PB_NotifyDecreaseConsumedGold(this);
  }

  /// <summary>Field number for the "decreased_gold" field.</summary>
  public const int DecreasedGoldFieldNumber = 1;
  private long decreasedGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DecreasedGold {
    get { return decreasedGold_; }
    set {
      decreasedGold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyDecreaseConsumedGold);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyDecreaseConsumedGold other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DecreasedGold != other.DecreasedGold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DecreasedGold != 0L) hash ^= DecreasedGold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DecreasedGold != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(DecreasedGold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DecreasedGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DecreasedGold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyDecreaseConsumedGold other) {
    if (other == null) {
      return;
    }
    if (other.DecreasedGold != 0L) {
      DecreasedGold = other.DecreasedGold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DecreasedGold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetUserInfoRequest : pb::IMessage<PB_GetUserInfoRequest> {
  private static readonly pb::MessageParser<PB_GetUserInfoRequest> _parser = new pb::MessageParser<PB_GetUserInfoRequest>(() => new PB_GetUserInfoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetUserInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[141]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetUserInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetUserInfoRequest(PB_GetUserInfoRequest other) : this() {
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetUserInfoRequest Clone() {
    return new PB_GetUserInfoRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetUserInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetUserInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetUserInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetUserInfoResponse : pb::IMessage<PB_GetUserInfoResponse> {
  private static readonly pb::MessageParser<PB_GetUserInfoResponse> _parser = new pb::MessageParser<PB_GetUserInfoResponse>(() => new PB_GetUserInfoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetUserInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[142]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetUserInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetUserInfoResponse(PB_GetUserInfoResponse other) : this() {
    result_ = other.result_;
    User = other.user_ != null ? other.User.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetUserInfoResponse Clone() {
    return new PB_GetUserInfoResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 2;
  private global::OtherUserInfo user_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OtherUserInfo User {
    get { return user_; }
    set {
      user_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetUserInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetUserInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!object.Equals(User, other.User)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (user_ != null) hash ^= User.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (user_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(User);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (user_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetUserInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.user_ != null) {
      if (user_ == null) {
        user_ = new global::OtherUserInfo();
      }
      User.MergeFrom(other.User);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          if (user_ == null) {
            user_ = new global::OtherUserInfo();
          }
          input.ReadMessage(user_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SellPropertyRequest : pb::IMessage<PB_SellPropertyRequest> {
  private static readonly pb::MessageParser<PB_SellPropertyRequest> _parser = new pb::MessageParser<PB_SellPropertyRequest>(() => new PB_SellPropertyRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SellPropertyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[143]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SellPropertyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SellPropertyRequest(PB_SellPropertyRequest other) : this() {
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SellPropertyRequest Clone() {
    return new PB_SellPropertyRequest(this);
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(10, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SellPropertyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SellPropertyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SellPropertyRequest other) {
    if (other == null) {
      return;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SellPropertyResponse : pb::IMessage<PB_SellPropertyResponse> {
  private static readonly pb::MessageParser<PB_SellPropertyResponse> _parser = new pb::MessageParser<PB_SellPropertyResponse>(() => new PB_SellPropertyResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SellPropertyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[144]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SellPropertyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SellPropertyResponse(PB_SellPropertyResponse other) : this() {
    result_ = other.result_;
    properties_ = other.properties_.Clone();
    gold_ = other.gold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SellPropertyResponse Clone() {
    return new PB_SellPropertyResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 3;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SellPropertyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SellPropertyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!properties_.Equals(other.properties_)) return false;
    if (Gold != other.Gold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= properties_.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
    if (Gold != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Gold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SellPropertyResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    properties_.Add(other.properties_);
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
        case 24: {
          Gold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyTopUp : pb::IMessage<PB_NotifyTopUp> {
  private static readonly pb::MessageParser<PB_NotifyTopUp> _parser = new pb::MessageParser<PB_NotifyTopUp>(() => new PB_NotifyTopUp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyTopUp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[145]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyTopUp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyTopUp(PB_NotifyTopUp other) : this() {
    userId_ = other.userId_;
    money_ = other.money_;
    currentVip_ = other.currentVip_;
    Property = other.property_ != null ? other.Property.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyTopUp Clone() {
    return new PB_NotifyTopUp(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "money" field.</summary>
  public const int MoneyFieldNumber = 2;
  private int money_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Money {
    get { return money_; }
    set {
      money_ = value;
    }
  }

  /// <summary>Field number for the "current_vip" field.</summary>
  public const int CurrentVipFieldNumber = 3;
  private int currentVip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentVip {
    get { return currentVip_; }
    set {
      currentVip_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 4;
  private global::PB_Property property_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyTopUp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyTopUp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Money != other.Money) return false;
    if (CurrentVip != other.CurrentVip) return false;
    if (!object.Equals(Property, other.Property)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Money != 0) hash ^= Money.GetHashCode();
    if (CurrentVip != 0) hash ^= CurrentVip.GetHashCode();
    if (property_ != null) hash ^= Property.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Money != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Money);
    }
    if (CurrentVip != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurrentVip);
    }
    if (property_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Money != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
    }
    if (CurrentVip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentVip);
    }
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyTopUp other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Money != 0) {
      Money = other.Money;
    }
    if (other.CurrentVip != 0) {
      CurrentVip = other.CurrentVip;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          Money = input.ReadInt32();
          break;
        }
        case 24: {
          CurrentVip = input.ReadInt32();
          break;
        }
        case 34: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyRoomChatMessage : pb::IMessage<PB_NotifyRoomChatMessage> {
  private static readonly pb::MessageParser<PB_NotifyRoomChatMessage> _parser = new pb::MessageParser<PB_NotifyRoomChatMessage>(() => new PB_NotifyRoomChatMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyRoomChatMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[146]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyRoomChatMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyRoomChatMessage(PB_NotifyRoomChatMessage other) : this() {
    userId_ = other.userId_;
    message_ = other.message_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyRoomChatMessage Clone() {
    return new PB_NotifyRoomChatMessage(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 2;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyRoomChatMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyRoomChatMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Message != other.Message) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyRoomChatMessage other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OpenPackRequest : pb::IMessage<PB_OpenPackRequest> {
  private static readonly pb::MessageParser<PB_OpenPackRequest> _parser = new pb::MessageParser<PB_OpenPackRequest>(() => new PB_OpenPackRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OpenPackRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[147]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenPackRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenPackRequest(PB_OpenPackRequest other) : this() {
    packId_ = other.packId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenPackRequest Clone() {
    return new PB_OpenPackRequest(this);
  }

  /// <summary>Field number for the "pack_id" field.</summary>
  public const int PackIdFieldNumber = 1;
  private int packId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PackId {
    get { return packId_; }
    set {
      packId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OpenPackRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OpenPackRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PackId != other.PackId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PackId != 0) hash ^= PackId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PackId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PackId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PackId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OpenPackRequest other) {
    if (other == null) {
      return;
    }
    if (other.PackId != 0) {
      PackId = other.PackId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PackId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_OpenPackResponse : pb::IMessage<PB_OpenPackResponse> {
  private static readonly pb::MessageParser<PB_OpenPackResponse> _parser = new pb::MessageParser<PB_OpenPackResponse>(() => new PB_OpenPackResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_OpenPackResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[148]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenPackResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenPackResponse(PB_OpenPackResponse other) : this() {
    result_ = other.result_;
    packId_ = other.packId_;
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_OpenPackResponse Clone() {
    return new PB_OpenPackResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "pack_id" field.</summary>
  public const int PackIdFieldNumber = 2;
  private int packId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PackId {
    get { return packId_; }
    set {
      packId_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_OpenPackResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_OpenPackResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (PackId != other.PackId) return false;
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (PackId != 0) hash ^= PackId.GetHashCode();
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (PackId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PackId);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (PackId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackId);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_OpenPackResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.PackId != 0) {
      PackId = other.PackId;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          PackId = input.ReadInt32();
          break;
        }
        case 26: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetMonthlyPackResponse : pb::IMessage<PB_GetMonthlyPackResponse> {
  private static readonly pb::MessageParser<PB_GetMonthlyPackResponse> _parser = new pb::MessageParser<PB_GetMonthlyPackResponse>(() => new PB_GetMonthlyPackResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetMonthlyPackResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[149]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetMonthlyPackResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetMonthlyPackResponse(PB_GetMonthlyPackResponse other) : this() {
    result_ = other.result_;
    properties_ = other.properties_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetMonthlyPackResponse Clone() {
    return new PB_GetMonthlyPackResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_properties_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> properties_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Properties {
    get { return properties_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetMonthlyPackResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetMonthlyPackResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!properties_.Equals(other.properties_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= properties_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    properties_.WriteTo(output, _repeated_properties_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += properties_.CalculateSize(_repeated_properties_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetMonthlyPackResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    properties_.Add(other.properties_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          properties_.AddEntriesFrom(input, _repeated_properties_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_BroadcastUserMessageRequest : pb::IMessage<PB_BroadcastUserMessageRequest> {
  private static readonly pb::MessageParser<PB_BroadcastUserMessageRequest> _parser = new pb::MessageParser<PB_BroadcastUserMessageRequest>(() => new PB_BroadcastUserMessageRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_BroadcastUserMessageRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[150]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BroadcastUserMessageRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BroadcastUserMessageRequest(PB_BroadcastUserMessageRequest other) : this() {
    content_ = other.content_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BroadcastUserMessageRequest Clone() {
    return new PB_BroadcastUserMessageRequest(this);
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 1;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_BroadcastUserMessageRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_BroadcastUserMessageRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Content != other.Content) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Content.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Content);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_BroadcastUserMessageRequest other) {
    if (other == null) {
      return;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Content = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_BroadcastUserMessageResponse : pb::IMessage<PB_BroadcastUserMessageResponse> {
  private static readonly pb::MessageParser<PB_BroadcastUserMessageResponse> _parser = new pb::MessageParser<PB_BroadcastUserMessageResponse>(() => new PB_BroadcastUserMessageResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_BroadcastUserMessageResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[151]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BroadcastUserMessageResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BroadcastUserMessageResponse(PB_BroadcastUserMessageResponse other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BroadcastUserMessageResponse Clone() {
    return new PB_BroadcastUserMessageResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_BroadcastUserMessageResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_BroadcastUserMessageResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_BroadcastUserMessageResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyBroadcastGameInfo : pb::IMessage<PB_NotifyBroadcastGameInfo> {
  private static readonly pb::MessageParser<PB_NotifyBroadcastGameInfo> _parser = new pb::MessageParser<PB_NotifyBroadcastGameInfo>(() => new PB_NotifyBroadcastGameInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyBroadcastGameInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[152]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastGameInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastGameInfo(PB_NotifyBroadcastGameInfo other) : this() {
    type_ = other.type_;
    content_ = other.content_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastGameInfo Clone() {
    return new PB_NotifyBroadcastGameInfo(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyBroadcastGameInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyBroadcastGameInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Content != other.Content) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Content);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyBroadcastGameInfo other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18: {
          Content = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyBroadcastUserMessage : pb::IMessage<PB_NotifyBroadcastUserMessage> {
  private static readonly pb::MessageParser<PB_NotifyBroadcastUserMessage> _parser = new pb::MessageParser<PB_NotifyBroadcastUserMessage>(() => new PB_NotifyBroadcastUserMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyBroadcastUserMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[153]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastUserMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastUserMessage(PB_NotifyBroadcastUserMessage other) : this() {
    nickname_ = other.nickname_;
    content_ = other.content_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastUserMessage Clone() {
    return new PB_NotifyBroadcastUserMessage(this);
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 1;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyBroadcastUserMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyBroadcastUserMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Nickname != other.Nickname) return false;
    if (Content != other.Content) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Nickname.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Nickname);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Content);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyBroadcastUserMessage other) {
    if (other == null) {
      return;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Nickname = input.ReadString();
          break;
        }
        case 18: {
          Content = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetBankMessageResponse : pb::IMessage<PB_GetBankMessageResponse> {
  private static readonly pb::MessageParser<PB_GetBankMessageResponse> _parser = new pb::MessageParser<PB_GetBankMessageResponse>(() => new PB_GetBankMessageResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetBankMessageResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[154]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetBankMessageResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetBankMessageResponse(PB_GetBankMessageResponse other) : this() {
    result_ = other.result_;
    messages_ = other.messages_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetBankMessageResponse Clone() {
    return new PB_GetBankMessageResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "messages" field.</summary>
  public const int MessagesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_BankMessage> _repeated_messages_codec
      = pb::FieldCodec.ForMessage(18, global::PB_BankMessage.Parser);
  private readonly pbc::RepeatedField<global::PB_BankMessage> messages_ = new pbc::RepeatedField<global::PB_BankMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_BankMessage> Messages {
    get { return messages_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetBankMessageResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetBankMessageResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!messages_.Equals(other.messages_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= messages_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    messages_.WriteTo(output, _repeated_messages_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += messages_.CalculateSize(_repeated_messages_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetBankMessageResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    messages_.Add(other.messages_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          messages_.AddEntriesFrom(input, _repeated_messages_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_BankMessage : pb::IMessage<PB_BankMessage> {
  private static readonly pb::MessageParser<PB_BankMessage> _parser = new pb::MessageParser<PB_BankMessage>(() => new PB_BankMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_BankMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[155]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankMessage(PB_BankMessage other) : this() {
    type_ = other.type_;
    userId_ = other.userId_;
    nickname_ = other.nickname_;
    giftGold_ = other.giftGold_;
    giftCount_ = other.giftCount_;
    charmChanged_ = other.charmChanged_;
    bankChanged_ = other.bankChanged_;
    dateTime_ = other.dateTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankMessage Clone() {
    return new PB_BankMessage(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private long userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gift_gold" field.</summary>
  public const int GiftGoldFieldNumber = 4;
  private long giftGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GiftGold {
    get { return giftGold_; }
    set {
      giftGold_ = value;
    }
  }

  /// <summary>Field number for the "gift_count" field.</summary>
  public const int GiftCountFieldNumber = 5;
  private int giftCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GiftCount {
    get { return giftCount_; }
    set {
      giftCount_ = value;
    }
  }

  /// <summary>Field number for the "charm_changed" field.</summary>
  public const int CharmChangedFieldNumber = 6;
  private long charmChanged_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CharmChanged {
    get { return charmChanged_; }
    set {
      charmChanged_ = value;
    }
  }

  /// <summary>Field number for the "bank_changed" field.</summary>
  public const int BankChangedFieldNumber = 7;
  private long bankChanged_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BankChanged {
    get { return bankChanged_; }
    set {
      bankChanged_ = value;
    }
  }

  /// <summary>Field number for the "date_time" field.</summary>
  public const int DateTimeFieldNumber = 8;
  private long dateTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DateTime {
    get { return dateTime_; }
    set {
      dateTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_BankMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_BankMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (UserId != other.UserId) return false;
    if (Nickname != other.Nickname) return false;
    if (GiftGold != other.GiftGold) return false;
    if (GiftCount != other.GiftCount) return false;
    if (CharmChanged != other.CharmChanged) return false;
    if (BankChanged != other.BankChanged) return false;
    if (DateTime != other.DateTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (GiftGold != 0L) hash ^= GiftGold.GetHashCode();
    if (GiftCount != 0) hash ^= GiftCount.GetHashCode();
    if (CharmChanged != 0L) hash ^= CharmChanged.GetHashCode();
    if (BankChanged != 0L) hash ^= BankChanged.GetHashCode();
    if (DateTime != 0L) hash ^= DateTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (UserId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(UserId);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (GiftGold != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(GiftGold);
    }
    if (GiftCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GiftCount);
    }
    if (CharmChanged != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(CharmChanged);
    }
    if (BankChanged != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(BankChanged);
    }
    if (DateTime != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(DateTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (UserId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (GiftGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiftGold);
    }
    if (GiftCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftCount);
    }
    if (CharmChanged != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharmChanged);
    }
    if (BankChanged != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BankChanged);
    }
    if (DateTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DateTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_BankMessage other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.GiftGold != 0L) {
      GiftGold = other.GiftGold;
    }
    if (other.GiftCount != 0) {
      GiftCount = other.GiftCount;
    }
    if (other.CharmChanged != 0L) {
      CharmChanged = other.CharmChanged;
    }
    if (other.BankChanged != 0L) {
      BankChanged = other.BankChanged;
    }
    if (other.DateTime != 0L) {
      DateTime = other.DateTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt64();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 32: {
          GiftGold = input.ReadInt64();
          break;
        }
        case 40: {
          GiftCount = input.ReadInt32();
          break;
        }
        case 48: {
          CharmChanged = input.ReadInt64();
          break;
        }
        case 56: {
          BankChanged = input.ReadInt64();
          break;
        }
        case 64: {
          DateTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyBankMessage : pb::IMessage<PB_NotifyBankMessage> {
  private static readonly pb::MessageParser<PB_NotifyBankMessage> _parser = new pb::MessageParser<PB_NotifyBankMessage>(() => new PB_NotifyBankMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyBankMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[156]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBankMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBankMessage(PB_NotifyBankMessage other) : this() {
    Msg = other.msg_ != null ? other.Msg.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBankMessage Clone() {
    return new PB_NotifyBankMessage(this);
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 1;
  private global::PB_BankMessage msg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_BankMessage Msg {
    get { return msg_; }
    set {
      msg_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyBankMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyBankMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Msg, other.Msg)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (msg_ != null) hash ^= Msg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (msg_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Msg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (msg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyBankMessage other) {
    if (other == null) {
      return;
    }
    if (other.msg_ != null) {
      if (msg_ == null) {
        msg_ = new global::PB_BankMessage();
      }
      Msg.MergeFrom(other.Msg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (msg_ == null) {
            msg_ = new global::PB_BankMessage();
          }
          input.ReadMessage(msg_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ExchangeCharmRequest : pb::IMessage<PB_ExchangeCharmRequest> {
  private static readonly pb::MessageParser<PB_ExchangeCharmRequest> _parser = new pb::MessageParser<PB_ExchangeCharmRequest>(() => new PB_ExchangeCharmRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ExchangeCharmRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[157]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ExchangeCharmRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ExchangeCharmRequest(PB_ExchangeCharmRequest other) : this() {
    charm_ = other.charm_;
    password_ = other.password_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ExchangeCharmRequest Clone() {
    return new PB_ExchangeCharmRequest(this);
  }

  /// <summary>Field number for the "charm" field.</summary>
  public const int CharmFieldNumber = 1;
  private long charm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Charm {
    get { return charm_; }
    set {
      charm_ = value;
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ExchangeCharmRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ExchangeCharmRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Charm != other.Charm) return false;
    if (Password != other.Password) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Charm != 0L) hash ^= Charm.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Charm != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Charm);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Charm != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Charm);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ExchangeCharmRequest other) {
    if (other == null) {
      return;
    }
    if (other.Charm != 0L) {
      Charm = other.Charm;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Charm = input.ReadInt64();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ExchangeCharmResponse : pb::IMessage<PB_ExchangeCharmResponse> {
  private static readonly pb::MessageParser<PB_ExchangeCharmResponse> _parser = new pb::MessageParser<PB_ExchangeCharmResponse>(() => new PB_ExchangeCharmResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ExchangeCharmResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[158]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ExchangeCharmResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ExchangeCharmResponse(PB_ExchangeCharmResponse other) : this() {
    result_ = other.result_;
    charm_ = other.charm_;
    bankGold_ = other.bankGold_;
    errMsg_ = other.errMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ExchangeCharmResponse Clone() {
    return new PB_ExchangeCharmResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "charm" field.</summary>
  public const int CharmFieldNumber = 2;
  private long charm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Charm {
    get { return charm_; }
    set {
      charm_ = value;
    }
  }

  /// <summary>Field number for the "bank_gold" field.</summary>
  public const int BankGoldFieldNumber = 3;
  private long bankGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BankGold {
    get { return bankGold_; }
    set {
      bankGold_ = value;
    }
  }

  /// <summary>Field number for the "err_msg" field.</summary>
  public const int ErrMsgFieldNumber = 4;
  private string errMsg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ExchangeCharmResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ExchangeCharmResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Charm != other.Charm) return false;
    if (BankGold != other.BankGold) return false;
    if (ErrMsg != other.ErrMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Charm != 0L) hash ^= Charm.GetHashCode();
    if (BankGold != 0L) hash ^= BankGold.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Charm != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Charm);
    }
    if (BankGold != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(BankGold);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ErrMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Charm != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Charm);
    }
    if (BankGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BankGold);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ExchangeCharmResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Charm != 0L) {
      Charm = other.Charm;
    }
    if (other.BankGold != 0L) {
      BankGold = other.BankGold;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Charm = input.ReadInt64();
          break;
        }
        case 24: {
          BankGold = input.ReadInt64();
          break;
        }
        case 34: {
          ErrMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_BankAccessRequest : pb::IMessage<PB_BankAccessRequest> {
  private static readonly pb::MessageParser<PB_BankAccessRequest> _parser = new pb::MessageParser<PB_BankAccessRequest>(() => new PB_BankAccessRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_BankAccessRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[159]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankAccessRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankAccessRequest(PB_BankAccessRequest other) : this() {
    gold_ = other.gold_;
    pswd_ = other.pswd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankAccessRequest Clone() {
    return new PB_BankAccessRequest(this);
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 1;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "pswd" field.</summary>
  public const int PswdFieldNumber = 2;
  private string pswd_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pswd {
    get { return pswd_; }
    set {
      pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_BankAccessRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_BankAccessRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gold != other.Gold) return false;
    if (Pswd != other.Pswd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Gold != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Gold);
    }
    if (Pswd.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Pswd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    if (Pswd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_BankAccessRequest other) {
    if (other == null) {
      return;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    if (other.Pswd.Length != 0) {
      Pswd = other.Pswd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Gold = input.ReadInt64();
          break;
        }
        case 18: {
          Pswd = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_BankAccessResponse : pb::IMessage<PB_BankAccessResponse> {
  private static readonly pb::MessageParser<PB_BankAccessResponse> _parser = new pb::MessageParser<PB_BankAccessResponse>(() => new PB_BankAccessResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_BankAccessResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[160]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankAccessResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankAccessResponse(PB_BankAccessResponse other) : this() {
    result_ = other.result_;
    gold_ = other.gold_;
    errMsg_ = other.errMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_BankAccessResponse Clone() {
    return new PB_BankAccessResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 2;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "err_msg" field.</summary>
  public const int ErrMsgFieldNumber = 3;
  private string errMsg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_BankAccessResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_BankAccessResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Gold != other.Gold) return false;
    if (ErrMsg != other.ErrMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Gold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Gold);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ErrMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_BankAccessResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Gold = input.ReadInt64();
          break;
        }
        case 26: {
          ErrMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GiveCharmRequest : pb::IMessage<PB_GiveCharmRequest> {
  private static readonly pb::MessageParser<PB_GiveCharmRequest> _parser = new pb::MessageParser<PB_GiveCharmRequest>(() => new PB_GiveCharmRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GiveCharmRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[161]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveCharmRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveCharmRequest(PB_GiveCharmRequest other) : this() {
    userId_ = other.userId_;
    giftGold_ = other.giftGold_;
    giftCount_ = other.giftCount_;
    pswd_ = other.pswd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveCharmRequest Clone() {
    return new PB_GiveCharmRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private long userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "gift_gold" field.</summary>
  public const int GiftGoldFieldNumber = 2;
  private long giftGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GiftGold {
    get { return giftGold_; }
    set {
      giftGold_ = value;
    }
  }

  /// <summary>Field number for the "gift_count" field.</summary>
  public const int GiftCountFieldNumber = 3;
  private int giftCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GiftCount {
    get { return giftCount_; }
    set {
      giftCount_ = value;
    }
  }

  /// <summary>Field number for the "pswd" field.</summary>
  public const int PswdFieldNumber = 4;
  private string pswd_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pswd {
    get { return pswd_; }
    set {
      pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GiveCharmRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GiveCharmRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (GiftGold != other.GiftGold) return false;
    if (GiftCount != other.GiftCount) return false;
    if (Pswd != other.Pswd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (GiftGold != 0L) hash ^= GiftGold.GetHashCode();
    if (GiftCount != 0) hash ^= GiftCount.GetHashCode();
    if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(UserId);
    }
    if (GiftGold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(GiftGold);
    }
    if (GiftCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GiftCount);
    }
    if (Pswd.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Pswd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (GiftGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiftGold);
    }
    if (GiftCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftCount);
    }
    if (Pswd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GiveCharmRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.GiftGold != 0L) {
      GiftGold = other.GiftGold;
    }
    if (other.GiftCount != 0) {
      GiftCount = other.GiftCount;
    }
    if (other.Pswd.Length != 0) {
      Pswd = other.Pswd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt64();
          break;
        }
        case 16: {
          GiftGold = input.ReadInt64();
          break;
        }
        case 24: {
          GiftCount = input.ReadInt32();
          break;
        }
        case 34: {
          Pswd = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GiveCharmResponse : pb::IMessage<PB_GiveCharmResponse> {
  private static readonly pb::MessageParser<PB_GiveCharmResponse> _parser = new pb::MessageParser<PB_GiveCharmResponse>(() => new PB_GiveCharmResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GiveCharmResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[162]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveCharmResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveCharmResponse(PB_GiveCharmResponse other) : this() {
    result_ = other.result_;
    goldDec_ = other.goldDec_;
    charmInc_ = other.charmInc_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GiveCharmResponse Clone() {
    return new PB_GiveCharmResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "gold_dec" field.</summary>
  public const int GoldDecFieldNumber = 2;
  private long goldDec_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GoldDec {
    get { return goldDec_; }
    set {
      goldDec_ = value;
    }
  }

  /// <summary>Field number for the "charm_inc" field.</summary>
  public const int CharmIncFieldNumber = 3;
  private long charmInc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CharmInc {
    get { return charmInc_; }
    set {
      charmInc_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GiveCharmResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GiveCharmResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (GoldDec != other.GoldDec) return false;
    if (CharmInc != other.CharmInc) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (GoldDec != 0L) hash ^= GoldDec.GetHashCode();
    if (CharmInc != 0L) hash ^= CharmInc.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (GoldDec != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(GoldDec);
    }
    if (CharmInc != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(CharmInc);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (GoldDec != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GoldDec);
    }
    if (CharmInc != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharmInc);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GiveCharmResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.GoldDec != 0L) {
      GoldDec = other.GoldDec;
    }
    if (other.CharmInc != 0L) {
      CharmInc = other.CharmInc;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          GoldDec = input.ReadInt64();
          break;
        }
        case 24: {
          CharmInc = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SetBankPswdRequest : pb::IMessage<PB_SetBankPswdRequest> {
  private static readonly pb::MessageParser<PB_SetBankPswdRequest> _parser = new pb::MessageParser<PB_SetBankPswdRequest>(() => new PB_SetBankPswdRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SetBankPswdRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[163]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SetBankPswdRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SetBankPswdRequest(PB_SetBankPswdRequest other) : this() {
    password_ = other.password_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SetBankPswdRequest Clone() {
    return new PB_SetBankPswdRequest(this);
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 1;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SetBankPswdRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SetBankPswdRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Password != other.Password) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Password.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Password);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SetBankPswdRequest other) {
    if (other == null) {
      return;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SetBankPswdResponse : pb::IMessage<PB_SetBankPswdResponse> {
  private static readonly pb::MessageParser<PB_SetBankPswdResponse> _parser = new pb::MessageParser<PB_SetBankPswdResponse>(() => new PB_SetBankPswdResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SetBankPswdResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[164]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SetBankPswdResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SetBankPswdResponse(PB_SetBankPswdResponse other) : this() {
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SetBankPswdResponse Clone() {
    return new PB_SetBankPswdResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SetBankPswdResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SetBankPswdResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SetBankPswdResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyGiveCharm : pb::IMessage<PB_NotifyGiveCharm> {
  private static readonly pb::MessageParser<PB_NotifyGiveCharm> _parser = new pb::MessageParser<PB_NotifyGiveCharm>(() => new PB_NotifyGiveCharm());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyGiveCharm> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[165]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyGiveCharm() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyGiveCharm(PB_NotifyGiveCharm other) : this() {
    Msg = other.msg_ != null ? other.Msg.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyGiveCharm Clone() {
    return new PB_NotifyGiveCharm(this);
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 1;
  private global::PB_BankMessage msg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_BankMessage Msg {
    get { return msg_; }
    set {
      msg_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyGiveCharm);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyGiveCharm other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Msg, other.Msg)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (msg_ != null) hash ^= Msg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (msg_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Msg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (msg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyGiveCharm other) {
    if (other == null) {
      return;
    }
    if (other.msg_ != null) {
      if (msg_ == null) {
        msg_ = new global::PB_BankMessage();
      }
      Msg.MergeFrom(other.Msg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (msg_ == null) {
            msg_ = new global::PB_BankMessage();
          }
          input.ReadMessage(msg_);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CLLoginPasswdRequest : pb::IMessage<PB_CLLoginPasswdRequest> {
  private static readonly pb::MessageParser<PB_CLLoginPasswdRequest> _parser = new pb::MessageParser<PB_CLLoginPasswdRequest>(() => new PB_CLLoginPasswdRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CLLoginPasswdRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[166]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLLoginPasswdRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLLoginPasswdRequest(PB_CLLoginPasswdRequest other) : this() {
    accounts_ = other.accounts_;
    passwd_ = other.passwd_;
    machineSerial_ = other.machineSerial_;
    deviecType_ = other.deviecType_;
    versionNumber_ = other.versionNumber_;
    channelNumber_ = other.channelNumber_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLLoginPasswdRequest Clone() {
    return new PB_CLLoginPasswdRequest(this);
  }

  /// <summary>Field number for the "accounts" field.</summary>
  public const int AccountsFieldNumber = 1;
  private string accounts_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Accounts {
    get { return accounts_; }
    set {
      accounts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "passwd" field.</summary>
  public const int PasswdFieldNumber = 2;
  private string passwd_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Passwd {
    get { return passwd_; }
    set {
      passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "machine_serial" field.</summary>
  public const int MachineSerialFieldNumber = 3;
  private string machineSerial_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineSerial {
    get { return machineSerial_; }
    set {
      machineSerial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviec_type" field.</summary>
  public const int DeviecTypeFieldNumber = 4;
  private int deviecType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DeviecType {
    get { return deviecType_; }
    set {
      deviecType_ = value;
    }
  }

  /// <summary>Field number for the "version_number" field.</summary>
  public const int VersionNumberFieldNumber = 5;
  private long versionNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VersionNumber {
    get { return versionNumber_; }
    set {
      versionNumber_ = value;
    }
  }

  /// <summary>Field number for the "channel_number" field.</summary>
  public const int ChannelNumberFieldNumber = 6;
  private long channelNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChannelNumber {
    get { return channelNumber_; }
    set {
      channelNumber_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CLLoginPasswdRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CLLoginPasswdRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Accounts != other.Accounts) return false;
    if (Passwd != other.Passwd) return false;
    if (MachineSerial != other.MachineSerial) return false;
    if (DeviecType != other.DeviecType) return false;
    if (VersionNumber != other.VersionNumber) return false;
    if (ChannelNumber != other.ChannelNumber) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Accounts.Length != 0) hash ^= Accounts.GetHashCode();
    if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
    if (MachineSerial.Length != 0) hash ^= MachineSerial.GetHashCode();
    if (DeviecType != 0) hash ^= DeviecType.GetHashCode();
    if (VersionNumber != 0L) hash ^= VersionNumber.GetHashCode();
    if (ChannelNumber != 0L) hash ^= ChannelNumber.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Accounts.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Accounts);
    }
    if (Passwd.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Passwd);
    }
    if (MachineSerial.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MachineSerial);
    }
    if (DeviecType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(DeviecType);
    }
    if (VersionNumber != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(VersionNumber);
    }
    if (ChannelNumber != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(ChannelNumber);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Accounts.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Accounts);
    }
    if (Passwd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
    }
    if (MachineSerial.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineSerial);
    }
    if (DeviecType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviecType);
    }
    if (VersionNumber != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VersionNumber);
    }
    if (ChannelNumber != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChannelNumber);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CLLoginPasswdRequest other) {
    if (other == null) {
      return;
    }
    if (other.Accounts.Length != 0) {
      Accounts = other.Accounts;
    }
    if (other.Passwd.Length != 0) {
      Passwd = other.Passwd;
    }
    if (other.MachineSerial.Length != 0) {
      MachineSerial = other.MachineSerial;
    }
    if (other.DeviecType != 0) {
      DeviecType = other.DeviecType;
    }
    if (other.VersionNumber != 0L) {
      VersionNumber = other.VersionNumber;
    }
    if (other.ChannelNumber != 0L) {
      ChannelNumber = other.ChannelNumber;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Accounts = input.ReadString();
          break;
        }
        case 18: {
          Passwd = input.ReadString();
          break;
        }
        case 26: {
          MachineSerial = input.ReadString();
          break;
        }
        case 32: {
          DeviecType = input.ReadInt32();
          break;
        }
        case 40: {
          VersionNumber = input.ReadInt64();
          break;
        }
        case 48: {
          ChannelNumber = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CLLoginTokenRequest : pb::IMessage<PB_CLLoginTokenRequest> {
  private static readonly pb::MessageParser<PB_CLLoginTokenRequest> _parser = new pb::MessageParser<PB_CLLoginTokenRequest>(() => new PB_CLLoginTokenRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CLLoginTokenRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[167]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLLoginTokenRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLLoginTokenRequest(PB_CLLoginTokenRequest other) : this() {
    userId_ = other.userId_;
    token_ = other.token_;
    tokenType_ = other.tokenType_;
    machineSerial_ = other.machineSerial_;
    deviecType_ = other.deviecType_;
    versionNumber_ = other.versionNumber_;
    channelNumber_ = other.channelNumber_;
    username_ = other.username_;
    avatar_ = other.avatar_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLLoginTokenRequest Clone() {
    return new PB_CLLoginTokenRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private long userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 2;
  private string token_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Token {
    get { return token_; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "token_type" field.</summary>
  public const int TokenTypeFieldNumber = 3;
  private int tokenType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TokenType {
    get { return tokenType_; }
    set {
      tokenType_ = value;
    }
  }

  /// <summary>Field number for the "machine_serial" field.</summary>
  public const int MachineSerialFieldNumber = 4;
  private string machineSerial_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineSerial {
    get { return machineSerial_; }
    set {
      machineSerial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviec_type" field.</summary>
  public const int DeviecTypeFieldNumber = 5;
  private int deviecType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DeviecType {
    get { return deviecType_; }
    set {
      deviecType_ = value;
    }
  }

  /// <summary>Field number for the "version_number" field.</summary>
  public const int VersionNumberFieldNumber = 6;
  private long versionNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VersionNumber {
    get { return versionNumber_; }
    set {
      versionNumber_ = value;
    }
  }

  /// <summary>Field number for the "channel_number" field.</summary>
  public const int ChannelNumberFieldNumber = 7;
  private long channelNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChannelNumber {
    get { return channelNumber_; }
    set {
      channelNumber_ = value;
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 8;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 9;
  private string avatar_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CLLoginTokenRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CLLoginTokenRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Token != other.Token) return false;
    if (TokenType != other.TokenType) return false;
    if (MachineSerial != other.MachineSerial) return false;
    if (DeviecType != other.DeviecType) return false;
    if (VersionNumber != other.VersionNumber) return false;
    if (ChannelNumber != other.ChannelNumber) return false;
    if (Username != other.Username) return false;
    if (Avatar != other.Avatar) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (Token.Length != 0) hash ^= Token.GetHashCode();
    if (TokenType != 0) hash ^= TokenType.GetHashCode();
    if (MachineSerial.Length != 0) hash ^= MachineSerial.GetHashCode();
    if (DeviecType != 0) hash ^= DeviecType.GetHashCode();
    if (VersionNumber != 0L) hash ^= VersionNumber.GetHashCode();
    if (ChannelNumber != 0L) hash ^= ChannelNumber.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(UserId);
    }
    if (Token.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Token);
    }
    if (TokenType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TokenType);
    }
    if (MachineSerial.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(MachineSerial);
    }
    if (DeviecType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(DeviecType);
    }
    if (VersionNumber != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(VersionNumber);
    }
    if (ChannelNumber != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(ChannelNumber);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Username);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Avatar);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (Token.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
    }
    if (TokenType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenType);
    }
    if (MachineSerial.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineSerial);
    }
    if (DeviecType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviecType);
    }
    if (VersionNumber != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VersionNumber);
    }
    if (ChannelNumber != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChannelNumber);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CLLoginTokenRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.Token.Length != 0) {
      Token = other.Token;
    }
    if (other.TokenType != 0) {
      TokenType = other.TokenType;
    }
    if (other.MachineSerial.Length != 0) {
      MachineSerial = other.MachineSerial;
    }
    if (other.DeviecType != 0) {
      DeviecType = other.DeviecType;
    }
    if (other.VersionNumber != 0L) {
      VersionNumber = other.VersionNumber;
    }
    if (other.ChannelNumber != 0L) {
      ChannelNumber = other.ChannelNumber;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt64();
          break;
        }
        case 18: {
          Token = input.ReadString();
          break;
        }
        case 24: {
          TokenType = input.ReadInt32();
          break;
        }
        case 34: {
          MachineSerial = input.ReadString();
          break;
        }
        case 40: {
          DeviecType = input.ReadInt32();
          break;
        }
        case 48: {
          VersionNumber = input.ReadInt64();
          break;
        }
        case 56: {
          ChannelNumber = input.ReadInt64();
          break;
        }
        case 66: {
          Username = input.ReadString();
          break;
        }
        case 74: {
          Avatar = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CLGiveGiftRequest : pb::IMessage<PB_CLGiveGiftRequest> {
  private static readonly pb::MessageParser<PB_CLGiveGiftRequest> _parser = new pb::MessageParser<PB_CLGiveGiftRequest>(() => new PB_CLGiveGiftRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CLGiveGiftRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[168]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLGiveGiftRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLGiveGiftRequest(PB_CLGiveGiftRequest other) : this() {
    giveType_ = other.giveType_;
    Gift = other.gift_ != null ? other.Gift.Clone() : null;
    toGameId_ = other.toGameId_;
    secondPasswd_ = other.secondPasswd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLGiveGiftRequest Clone() {
    return new PB_CLGiveGiftRequest(this);
  }

  /// <summary>Field number for the "give_type" field.</summary>
  public const int GiveTypeFieldNumber = 1;
  private int giveType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GiveType {
    get { return giveType_; }
    set {
      giveType_ = value;
    }
  }

  /// <summary>Field number for the "gift" field.</summary>
  public const int GiftFieldNumber = 2;
  private global::PB_Property gift_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Gift {
    get { return gift_; }
    set {
      gift_ = value;
    }
  }

  /// <summary>Field number for the "to_game_id" field.</summary>
  public const int ToGameIdFieldNumber = 3;
  private int toGameId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToGameId {
    get { return toGameId_; }
    set {
      toGameId_ = value;
    }
  }

  /// <summary>Field number for the "second_passwd" field.</summary>
  public const int SecondPasswdFieldNumber = 4;
  private pb::ByteString secondPasswd_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString SecondPasswd {
    get { return secondPasswd_; }
    set {
      secondPasswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CLGiveGiftRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CLGiveGiftRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GiveType != other.GiveType) return false;
    if (!object.Equals(Gift, other.Gift)) return false;
    if (ToGameId != other.ToGameId) return false;
    if (SecondPasswd != other.SecondPasswd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GiveType != 0) hash ^= GiveType.GetHashCode();
    if (gift_ != null) hash ^= Gift.GetHashCode();
    if (ToGameId != 0) hash ^= ToGameId.GetHashCode();
    if (SecondPasswd.Length != 0) hash ^= SecondPasswd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GiveType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GiveType);
    }
    if (gift_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Gift);
    }
    if (ToGameId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ToGameId);
    }
    if (SecondPasswd.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(SecondPasswd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GiveType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiveType);
    }
    if (gift_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gift);
    }
    if (ToGameId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToGameId);
    }
    if (SecondPasswd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondPasswd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CLGiveGiftRequest other) {
    if (other == null) {
      return;
    }
    if (other.GiveType != 0) {
      GiveType = other.GiveType;
    }
    if (other.gift_ != null) {
      if (gift_ == null) {
        gift_ = new global::PB_Property();
      }
      Gift.MergeFrom(other.Gift);
    }
    if (other.ToGameId != 0) {
      ToGameId = other.ToGameId;
    }
    if (other.SecondPasswd.Length != 0) {
      SecondPasswd = other.SecondPasswd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GiveType = input.ReadInt32();
          break;
        }
        case 18: {
          if (gift_ == null) {
            gift_ = new global::PB_Property();
          }
          input.ReadMessage(gift_);
          break;
        }
        case 24: {
          ToGameId = input.ReadInt32();
          break;
        }
        case 34: {
          SecondPasswd = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_CLGiveGiftResponse : pb::IMessage<PB_CLGiveGiftResponse> {
  private static readonly pb::MessageParser<PB_CLGiveGiftResponse> _parser = new pb::MessageParser<PB_CLGiveGiftResponse>(() => new PB_CLGiveGiftResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_CLGiveGiftResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[169]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLGiveGiftResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLGiveGiftResponse(PB_CLGiveGiftResponse other) : this() {
    result_ = other.result_;
    errorMsg_ = other.errorMsg_;
    giveType_ = other.giveType_;
    Gift = other.gift_ != null ? other.Gift.Clone() : null;
    currentCount_ = other.currentCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_CLGiveGiftResponse Clone() {
    return new PB_CLGiveGiftResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "error_msg" field.</summary>
  public const int ErrorMsgFieldNumber = 2;
  private string errorMsg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMsg {
    get { return errorMsg_; }
    set {
      errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "give_type" field.</summary>
  public const int GiveTypeFieldNumber = 3;
  private int giveType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GiveType {
    get { return giveType_; }
    set {
      giveType_ = value;
    }
  }

  /// <summary>Field number for the "gift" field.</summary>
  public const int GiftFieldNumber = 4;
  private global::PB_Property gift_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Gift {
    get { return gift_; }
    set {
      gift_ = value;
    }
  }

  /// <summary>Field number for the "current_count" field.</summary>
  public const int CurrentCountFieldNumber = 5;
  private long currentCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CurrentCount {
    get { return currentCount_; }
    set {
      currentCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_CLGiveGiftResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_CLGiveGiftResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (ErrorMsg != other.ErrorMsg) return false;
    if (GiveType != other.GiveType) return false;
    if (!object.Equals(Gift, other.Gift)) return false;
    if (CurrentCount != other.CurrentCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
    if (GiveType != 0) hash ^= GiveType.GetHashCode();
    if (gift_ != null) hash ^= Gift.GetHashCode();
    if (CurrentCount != 0L) hash ^= CurrentCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (ErrorMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMsg);
    }
    if (GiveType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GiveType);
    }
    if (gift_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Gift);
    }
    if (CurrentCount != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(CurrentCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (ErrorMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
    }
    if (GiveType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiveType);
    }
    if (gift_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gift);
    }
    if (CurrentCount != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_CLGiveGiftResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.ErrorMsg.Length != 0) {
      ErrorMsg = other.ErrorMsg;
    }
    if (other.GiveType != 0) {
      GiveType = other.GiveType;
    }
    if (other.gift_ != null) {
      if (gift_ == null) {
        gift_ = new global::PB_Property();
      }
      Gift.MergeFrom(other.Gift);
    }
    if (other.CurrentCount != 0L) {
      CurrentCount = other.CurrentCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          ErrorMsg = input.ReadString();
          break;
        }
        case 24: {
          GiveType = input.ReadInt32();
          break;
        }
        case 34: {
          if (gift_ == null) {
            gift_ = new global::PB_Property();
          }
          input.ReadMessage(gift_);
          break;
        }
        case 40: {
          CurrentCount = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ReloadAssetInfoResponse : pb::IMessage<PB_ReloadAssetInfoResponse> {
  private static readonly pb::MessageParser<PB_ReloadAssetInfoResponse> _parser = new pb::MessageParser<PB_ReloadAssetInfoResponse>(() => new PB_ReloadAssetInfoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ReloadAssetInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[170]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ReloadAssetInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ReloadAssetInfoResponse(PB_ReloadAssetInfoResponse other) : this() {
    result_ = other.result_;
    props_ = other.props_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ReloadAssetInfoResponse Clone() {
    return new PB_ReloadAssetInfoResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_PropertyEs> _repeated_props_codec
      = pb::FieldCodec.ForMessage(18, global::PB_PropertyEs.Parser);
  private readonly pbc::RepeatedField<global::PB_PropertyEs> props_ = new pbc::RepeatedField<global::PB_PropertyEs>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_PropertyEs> Props {
    get { return props_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ReloadAssetInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ReloadAssetInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!props_.Equals(other.props_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= props_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    props_.WriteTo(output, _repeated_props_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += props_.CalculateSize(_repeated_props_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ReloadAssetInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    props_.Add(other.props_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ScrollingNotice : pb::IMessage<PB_ScrollingNotice> {
  private static readonly pb::MessageParser<PB_ScrollingNotice> _parser = new pb::MessageParser<PB_ScrollingNotice>(() => new PB_ScrollingNotice());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ScrollingNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[171]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ScrollingNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ScrollingNotice(PB_ScrollingNotice other) : this() {
    content_ = other.content_;
    cycleInterval_ = other.cycleInterval_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ScrollingNotice Clone() {
    return new PB_ScrollingNotice(this);
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 1;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "cycle_interval" field.</summary>
  public const int CycleIntervalFieldNumber = 2;
  private int cycleInterval_;
  /// <summary>
  ///seconds
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CycleInterval {
    get { return cycleInterval_; }
    set {
      cycleInterval_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ScrollingNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ScrollingNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Content != other.Content) return false;
    if (CycleInterval != other.CycleInterval) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (CycleInterval != 0) hash ^= CycleInterval.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Content.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Content);
    }
    if (CycleInterval != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CycleInterval);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    if (CycleInterval != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CycleInterval);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ScrollingNotice other) {
    if (other == null) {
      return;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.CycleInterval != 0) {
      CycleInterval = other.CycleInterval;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Content = input.ReadString();
          break;
        }
        case 16: {
          CycleInterval = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyScrollingNoticesUpdate : pb::IMessage<PB_NotifyScrollingNoticesUpdate> {
  private static readonly pb::MessageParser<PB_NotifyScrollingNoticesUpdate> _parser = new pb::MessageParser<PB_NotifyScrollingNoticesUpdate>(() => new PB_NotifyScrollingNoticesUpdate());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyScrollingNoticesUpdate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[172]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyScrollingNoticesUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyScrollingNoticesUpdate(PB_NotifyScrollingNoticesUpdate other) : this() {
    notices_ = other.notices_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyScrollingNoticesUpdate Clone() {
    return new PB_NotifyScrollingNoticesUpdate(this);
  }

  /// <summary>Field number for the "notices" field.</summary>
  public const int NoticesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PB_ScrollingNotice> _repeated_notices_codec
      = pb::FieldCodec.ForMessage(10, global::PB_ScrollingNotice.Parser);
  private readonly pbc::RepeatedField<global::PB_ScrollingNotice> notices_ = new pbc::RepeatedField<global::PB_ScrollingNotice>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_ScrollingNotice> Notices {
    get { return notices_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyScrollingNoticesUpdate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyScrollingNoticesUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!notices_.Equals(other.notices_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= notices_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    notices_.WriteTo(output, _repeated_notices_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += notices_.CalculateSize(_repeated_notices_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyScrollingNoticesUpdate other) {
    if (other == null) {
      return;
    }
    notices_.Add(other.notices_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          notices_.AddEntriesFrom(input, _repeated_notices_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ExchangeDiamondRequest : pb::IMessage<ExchangeDiamondRequest> {
  private static readonly pb::MessageParser<ExchangeDiamondRequest> _parser = new pb::MessageParser<ExchangeDiamondRequest>(() => new ExchangeDiamondRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExchangeDiamondRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[173]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExchangeDiamondRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExchangeDiamondRequest(ExchangeDiamondRequest other) : this() {
    diamond_ = other.diamond_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExchangeDiamondRequest Clone() {
    return new ExchangeDiamondRequest(this);
  }

  /// <summary>Field number for the "diamond" field.</summary>
  public const int DiamondFieldNumber = 1;
  private long diamond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Diamond {
    get { return diamond_; }
    set {
      diamond_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExchangeDiamondRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExchangeDiamondRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Diamond != other.Diamond) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Diamond != 0L) hash ^= Diamond.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Diamond != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Diamond);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Diamond != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExchangeDiamondRequest other) {
    if (other == null) {
      return;
    }
    if (other.Diamond != 0L) {
      Diamond = other.Diamond;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Diamond = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class NotifyExchangeDiamond : pb::IMessage<NotifyExchangeDiamond> {
  private static readonly pb::MessageParser<NotifyExchangeDiamond> _parser = new pb::MessageParser<NotifyExchangeDiamond>(() => new NotifyExchangeDiamond());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NotifyExchangeDiamond> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[174]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyExchangeDiamond() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyExchangeDiamond(NotifyExchangeDiamond other) : this() {
    userId_ = other.userId_;
    diamond_ = other.diamond_;
    gold_ = other.gold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyExchangeDiamond Clone() {
    return new NotifyExchangeDiamond(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private long userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "diamond" field.</summary>
  public const int DiamondFieldNumber = 2;
  private long diamond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Diamond {
    get { return diamond_; }
    set {
      diamond_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 3;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NotifyExchangeDiamond);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NotifyExchangeDiamond other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Diamond != other.Diamond) return false;
    if (Gold != other.Gold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (Diamond != 0L) hash ^= Diamond.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(UserId);
    }
    if (Diamond != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Diamond);
    }
    if (Gold != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Gold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (Diamond != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NotifyExchangeDiamond other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.Diamond != 0L) {
      Diamond = other.Diamond;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt64();
          break;
        }
        case 16: {
          Diamond = input.ReadInt64();
          break;
        }
        case 24: {
          Gold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ExchangeDiamondResponse : pb::IMessage<ExchangeDiamondResponse> {
  private static readonly pb::MessageParser<ExchangeDiamondResponse> _parser = new pb::MessageParser<ExchangeDiamondResponse>(() => new ExchangeDiamondResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExchangeDiamondResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[175]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExchangeDiamondResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExchangeDiamondResponse(ExchangeDiamondResponse other) : this() {
    result_ = other.result_;
    diamond_ = other.diamond_;
    gold_ = other.gold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExchangeDiamondResponse Clone() {
    return new ExchangeDiamondResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "diamond" field.</summary>
  public const int DiamondFieldNumber = 2;
  private long diamond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Diamond {
    get { return diamond_; }
    set {
      diamond_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 3;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExchangeDiamondResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExchangeDiamondResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Diamond != other.Diamond) return false;
    if (Gold != other.Gold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Diamond != 0L) hash ^= Diamond.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Diamond != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Diamond);
    }
    if (Gold != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Gold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Diamond != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Diamond);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExchangeDiamondResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Diamond != 0L) {
      Diamond = other.Diamond;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Diamond = input.ReadInt64();
          break;
        }
        case 24: {
          Gold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class CLModifySecPasswdRequest : pb::IMessage<CLModifySecPasswdRequest> {
  private static readonly pb::MessageParser<CLModifySecPasswdRequest> _parser = new pb::MessageParser<CLModifySecPasswdRequest>(() => new CLModifySecPasswdRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLModifySecPasswdRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[176]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLModifySecPasswdRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLModifySecPasswdRequest(CLModifySecPasswdRequest other) : this() {
    userId_ = other.userId_;
    token_ = other.token_;
    tokenType_ = other.tokenType_;
    newPasswd_ = other.newPasswd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLModifySecPasswdRequest Clone() {
    return new CLModifySecPasswdRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private long userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 2;
  private string token_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Token {
    get { return token_; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "token_type" field.</summary>
  public const int TokenTypeFieldNumber = 3;
  private int tokenType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TokenType {
    get { return tokenType_; }
    set {
      tokenType_ = value;
    }
  }

  /// <summary>Field number for the "new_passwd" field.</summary>
  public const int NewPasswdFieldNumber = 4;
  private string newPasswd_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewPasswd {
    get { return newPasswd_; }
    set {
      newPasswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLModifySecPasswdRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLModifySecPasswdRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Token != other.Token) return false;
    if (TokenType != other.TokenType) return false;
    if (NewPasswd != other.NewPasswd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (Token.Length != 0) hash ^= Token.GetHashCode();
    if (TokenType != 0) hash ^= TokenType.GetHashCode();
    if (NewPasswd.Length != 0) hash ^= NewPasswd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(UserId);
    }
    if (Token.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Token);
    }
    if (TokenType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TokenType);
    }
    if (NewPasswd.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(NewPasswd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (Token.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
    }
    if (TokenType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TokenType);
    }
    if (NewPasswd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewPasswd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLModifySecPasswdRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.Token.Length != 0) {
      Token = other.Token;
    }
    if (other.TokenType != 0) {
      TokenType = other.TokenType;
    }
    if (other.NewPasswd.Length != 0) {
      NewPasswd = other.NewPasswd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt64();
          break;
        }
        case 18: {
          Token = input.ReadString();
          break;
        }
        case 24: {
          TokenType = input.ReadInt32();
          break;
        }
        case 34: {
          NewPasswd = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GetPayStateByNoRequest : pb::IMessage<GetPayStateByNoRequest> {
  private static readonly pb::MessageParser<GetPayStateByNoRequest> _parser = new pb::MessageParser<GetPayStateByNoRequest>(() => new GetPayStateByNoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetPayStateByNoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[177]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPayStateByNoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPayStateByNoRequest(GetPayStateByNoRequest other) : this() {
    tradeNumber_ = other.tradeNumber_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPayStateByNoRequest Clone() {
    return new GetPayStateByNoRequest(this);
  }

  /// <summary>Field number for the "trade_number" field.</summary>
  public const int TradeNumberFieldNumber = 1;
  private string tradeNumber_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TradeNumber {
    get { return tradeNumber_; }
    set {
      tradeNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetPayStateByNoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetPayStateByNoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TradeNumber != other.TradeNumber) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TradeNumber.Length != 0) hash ^= TradeNumber.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TradeNumber.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(TradeNumber);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TradeNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeNumber);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetPayStateByNoRequest other) {
    if (other == null) {
      return;
    }
    if (other.TradeNumber.Length != 0) {
      TradeNumber = other.TradeNumber;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          TradeNumber = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GetPayStateByNoResponse : pb::IMessage<GetPayStateByNoResponse> {
  private static readonly pb::MessageParser<GetPayStateByNoResponse> _parser = new pb::MessageParser<GetPayStateByNoResponse>(() => new GetPayStateByNoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetPayStateByNoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[178]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPayStateByNoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPayStateByNoResponse(GetPayStateByNoResponse other) : this() {
    result_ = other.result_;
    tradeNumber_ = other.tradeNumber_;
    state_ = other.state_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPayStateByNoResponse Clone() {
    return new GetPayStateByNoResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "trade_number" field.</summary>
  public const int TradeNumberFieldNumber = 2;
  private string tradeNumber_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TradeNumber {
    get { return tradeNumber_; }
    set {
      tradeNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 3;
  private int state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetPayStateByNoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetPayStateByNoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (TradeNumber != other.TradeNumber) return false;
    if (State != other.State) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TradeNumber.Length != 0) hash ^= TradeNumber.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (TradeNumber.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TradeNumber);
    }
    if (State != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(State);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TradeNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeNumber);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetPayStateByNoResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TradeNumber.Length != 0) {
      TradeNumber = other.TradeNumber;
    }
    if (other.State != 0) {
      State = other.State;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          TradeNumber = input.ReadString();
          break;
        }
        case 24: {
          State = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GetFirstPayRewardResponse : pb::IMessage<GetFirstPayRewardResponse> {
  private static readonly pb::MessageParser<GetFirstPayRewardResponse> _parser = new pb::MessageParser<GetFirstPayRewardResponse>(() => new GetFirstPayRewardResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetFirstPayRewardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[179]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFirstPayRewardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFirstPayRewardResponse(GetFirstPayRewardResponse other) : this() {
    result_ = other.result_;
    props_ = other.props_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFirstPayRewardResponse Clone() {
    return new GetFirstPayRewardResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_props_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> props_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Props {
    get { return props_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetFirstPayRewardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetFirstPayRewardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if(!props_.Equals(other.props_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= props_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    props_.WriteTo(output, _repeated_props_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += props_.CalculateSize(_repeated_props_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetFirstPayRewardResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    props_.Add(other.props_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CLLoginThailandRequest : pb::IMessage<CLLoginThailandRequest> {
  private static readonly pb::MessageParser<CLLoginThailandRequest> _parser = new pb::MessageParser<CLLoginThailandRequest>(() => new CLLoginThailandRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLLoginThailandRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[180]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLLoginThailandRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLLoginThailandRequest(CLLoginThailandRequest other) : this() {
    unionId_ = other.unionId_;
    machineSerial_ = other.machineSerial_;
    deviceType_ = other.deviceType_;
    versionNumber_ = other.versionNumber_;
    channelNumber_ = other.channelNumber_;
    nickname_ = other.nickname_;
    avatarUrl_ = other.avatarUrl_;
    gender_ = other.gender_;
    username_ = other.username_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLLoginThailandRequest Clone() {
    return new CLLoginThailandRequest(this);
  }

  /// <summary>Field number for the "union_id" field.</summary>
  public const int UnionIdFieldNumber = 1;
  private string unionId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UnionId {
    get { return unionId_; }
    set {
      unionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "machine_serial" field.</summary>
  public const int MachineSerialFieldNumber = 2;
  private string machineSerial_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineSerial {
    get { return machineSerial_; }
    set {
      machineSerial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "device_type" field.</summary>
  public const int DeviceTypeFieldNumber = 3;
  private int deviceType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "version_number" field.</summary>
  public const int VersionNumberFieldNumber = 4;
  private long versionNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VersionNumber {
    get { return versionNumber_; }
    set {
      versionNumber_ = value;
    }
  }

  /// <summary>Field number for the "channel_number" field.</summary>
  public const int ChannelNumberFieldNumber = 5;
  private long channelNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChannelNumber {
    get { return channelNumber_; }
    set {
      channelNumber_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 6;
  private string nickname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar_url" field.</summary>
  public const int AvatarUrlFieldNumber = 7;
  private string avatarUrl_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AvatarUrl {
    get { return avatarUrl_; }
    set {
      avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 8;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 9;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLLoginThailandRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLLoginThailandRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UnionId != other.UnionId) return false;
    if (MachineSerial != other.MachineSerial) return false;
    if (DeviceType != other.DeviceType) return false;
    if (VersionNumber != other.VersionNumber) return false;
    if (ChannelNumber != other.ChannelNumber) return false;
    if (Nickname != other.Nickname) return false;
    if (AvatarUrl != other.AvatarUrl) return false;
    if (Gender != other.Gender) return false;
    if (Username != other.Username) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UnionId.Length != 0) hash ^= UnionId.GetHashCode();
    if (MachineSerial.Length != 0) hash ^= MachineSerial.GetHashCode();
    if (DeviceType != 0) hash ^= DeviceType.GetHashCode();
    if (VersionNumber != 0L) hash ^= VersionNumber.GetHashCode();
    if (ChannelNumber != 0L) hash ^= ChannelNumber.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UnionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(UnionId);
    }
    if (MachineSerial.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MachineSerial);
    }
    if (DeviceType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(DeviceType);
    }
    if (VersionNumber != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(VersionNumber);
    }
    if (ChannelNumber != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(ChannelNumber);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Nickname);
    }
    if (AvatarUrl.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(AvatarUrl);
    }
    if (Gender != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Gender);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Username);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UnionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionId);
    }
    if (MachineSerial.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineSerial);
    }
    if (DeviceType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceType);
    }
    if (VersionNumber != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VersionNumber);
    }
    if (ChannelNumber != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChannelNumber);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (AvatarUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
    }
    if (Gender != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLLoginThailandRequest other) {
    if (other == null) {
      return;
    }
    if (other.UnionId.Length != 0) {
      UnionId = other.UnionId;
    }
    if (other.MachineSerial.Length != 0) {
      MachineSerial = other.MachineSerial;
    }
    if (other.DeviceType != 0) {
      DeviceType = other.DeviceType;
    }
    if (other.VersionNumber != 0L) {
      VersionNumber = other.VersionNumber;
    }
    if (other.ChannelNumber != 0L) {
      ChannelNumber = other.ChannelNumber;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.AvatarUrl.Length != 0) {
      AvatarUrl = other.AvatarUrl;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          UnionId = input.ReadString();
          break;
        }
        case 18: {
          MachineSerial = input.ReadString();
          break;
        }
        case 24: {
          DeviceType = input.ReadInt32();
          break;
        }
        case 32: {
          VersionNumber = input.ReadInt64();
          break;
        }
        case 40: {
          ChannelNumber = input.ReadInt64();
          break;
        }
        case 50: {
          Nickname = input.ReadString();
          break;
        }
        case 58: {
          AvatarUrl = input.ReadString();
          break;
        }
        case 64: {
          Gender = input.ReadInt32();
          break;
        }
        case 74: {
          Username = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CLLoginThailandResponse : pb::IMessage<CLLoginThailandResponse> {
  private static readonly pb::MessageParser<CLLoginThailandResponse> _parser = new pb::MessageParser<CLLoginThailandResponse>(() => new CLLoginThailandResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLLoginThailandResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[181]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLLoginThailandResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLLoginThailandResponse(CLLoginThailandResponse other) : this() {
    Res = other.res_ != null ? other.Res.Clone() : null;
    token_ = other.token_;
    account_ = other.account_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLLoginThailandResponse Clone() {
    return new CLLoginThailandResponse(this);
  }

  /// <summary>Field number for the "res" field.</summary>
  public const int ResFieldNumber = 1;
  private global::PB_LoginResponse res_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_LoginResponse Res {
    get { return res_; }
    set {
      res_ = value;
    }
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 2;
  private pb::ByteString token_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Token {
    get { return token_; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 3;
  private pb::ByteString account_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLLoginThailandResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLLoginThailandResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Res, other.Res)) return false;
    if (Token != other.Token) return false;
    if (Account != other.Account) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (res_ != null) hash ^= Res.GetHashCode();
    if (Token.Length != 0) hash ^= Token.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (res_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Res);
    }
    if (Token.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Token);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Account);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (res_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Res);
    }
    if (Token.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLLoginThailandResponse other) {
    if (other == null) {
      return;
    }
    if (other.res_ != null) {
      if (res_ == null) {
        res_ = new global::PB_LoginResponse();
      }
      Res.MergeFrom(other.Res);
    }
    if (other.Token.Length != 0) {
      Token = other.Token;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (res_ == null) {
            res_ = new global::PB_LoginResponse();
          }
          input.ReadMessage(res_);
          break;
        }
        case 18: {
          Token = input.ReadBytes();
          break;
        }
        case 26: {
          Account = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class ReturnRobotRequest : pb::IMessage<ReturnRobotRequest> {
  private static readonly pb::MessageParser<ReturnRobotRequest> _parser = new pb::MessageParser<ReturnRobotRequest>(() => new ReturnRobotRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReturnRobotRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[182]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReturnRobotRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReturnRobotRequest(ReturnRobotRequest other) : this() {
    userId_ = other.userId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReturnRobotRequest Clone() {
    return new ReturnRobotRequest(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReturnRobotRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReturnRobotRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReturnRobotRequest other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GetRobotResponse : pb::IMessage<GetRobotResponse> {
  private static readonly pb::MessageParser<GetRobotResponse> _parser = new pb::MessageParser<GetRobotResponse>(() => new GetRobotResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetRobotResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[183]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRobotResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRobotResponse(GetRobotResponse other) : this() {
    result_ = other.result_;
    User = other.user_ != null ? other.User.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRobotResponse Clone() {
    return new GetRobotResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 2;
  private global::OtherUserInfo user_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OtherUserInfo User {
    get { return user_; }
    set {
      user_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetRobotResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetRobotResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!object.Equals(User, other.User)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (user_ != null) hash ^= User.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (user_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(User);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (user_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetRobotResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.user_ != null) {
      if (user_ == null) {
        user_ = new global::OtherUserInfo();
      }
      User.MergeFrom(other.User);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          if (user_ == null) {
            user_ = new global::OtherUserInfo();
          }
          input.ReadMessage(user_);
          break;
        }
      }
    }
  }

}

public sealed partial class NotifyOtherPurchaseProperty : pb::IMessage<NotifyOtherPurchaseProperty> {
  private static readonly pb::MessageParser<NotifyOtherPurchaseProperty> _parser = new pb::MessageParser<NotifyOtherPurchaseProperty>(() => new NotifyOtherPurchaseProperty());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NotifyOtherPurchaseProperty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[184]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyOtherPurchaseProperty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyOtherPurchaseProperty(NotifyOtherPurchaseProperty other) : this() {
    userId_ = other.userId_;
    Property = other.property_ != null ? other.Property.Clone() : null;
    diamondCost_ = other.diamondCost_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyOtherPurchaseProperty Clone() {
    return new NotifyOtherPurchaseProperty(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 2;
  private global::PB_Property property_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_Property Property {
    get { return property_; }
    set {
      property_ = value;
    }
  }

  /// <summary>Field number for the "diamond_cost" field.</summary>
  public const int DiamondCostFieldNumber = 3;
  private long diamondCost_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DiamondCost {
    get { return diamondCost_; }
    set {
      diamondCost_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NotifyOtherPurchaseProperty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NotifyOtherPurchaseProperty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (!object.Equals(Property, other.Property)) return false;
    if (DiamondCost != other.DiamondCost) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (property_ != null) hash ^= Property.GetHashCode();
    if (DiamondCost != 0L) hash ^= DiamondCost.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (property_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Property);
    }
    if (DiamondCost != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(DiamondCost);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (property_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
    }
    if (DiamondCost != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiamondCost);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NotifyOtherPurchaseProperty other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.property_ != null) {
      if (property_ == null) {
        property_ = new global::PB_Property();
      }
      Property.MergeFrom(other.Property);
    }
    if (other.DiamondCost != 0L) {
      DiamondCost = other.DiamondCost;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 18: {
          if (property_ == null) {
            property_ = new global::PB_Property();
          }
          input.ReadMessage(property_);
          break;
        }
        case 24: {
          DiamondCost = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ConversionCodetRequest : pb::IMessage<PB_ConversionCodetRequest> {
  private static readonly pb::MessageParser<PB_ConversionCodetRequest> _parser = new pb::MessageParser<PB_ConversionCodetRequest>(() => new PB_ConversionCodetRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ConversionCodetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[185]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConversionCodetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConversionCodetRequest(PB_ConversionCodetRequest other) : this() {
    conversionCodetMsg_ = other.conversionCodetMsg_;
    userID_ = other.userID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConversionCodetRequest Clone() {
    return new PB_ConversionCodetRequest(this);
  }

  /// <summary>Field number for the "ConversionCodet_msg" field.</summary>
  public const int ConversionCodetMsgFieldNumber = 1;
  private pb::ByteString conversionCodetMsg_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ConversionCodetMsg {
    get { return conversionCodetMsg_; }
    set {
      conversionCodetMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 2;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ConversionCodetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ConversionCodetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConversionCodetMsg != other.ConversionCodetMsg) return false;
    if (UserID != other.UserID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConversionCodetMsg.Length != 0) hash ^= ConversionCodetMsg.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConversionCodetMsg.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ConversionCodetMsg);
    }
    if (UserID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConversionCodetMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConversionCodetMsg);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ConversionCodetRequest other) {
    if (other == null) {
      return;
    }
    if (other.ConversionCodetMsg.Length != 0) {
      ConversionCodetMsg = other.ConversionCodetMsg;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          ConversionCodetMsg = input.ReadBytes();
          break;
        }
        case 16: {
          UserID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ConversionCodetResponse : pb::IMessage<PB_ConversionCodetResponse> {
  private static readonly pb::MessageParser<PB_ConversionCodetResponse> _parser = new pb::MessageParser<PB_ConversionCodetResponse>(() => new PB_ConversionCodetResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ConversionCodetResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[186]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConversionCodetResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConversionCodetResponse(PB_ConversionCodetResponse other) : this() {
    errCode_ = other.errCode_;
    propID_ = other.propID_;
    count_ = other.count_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConversionCodetResponse Clone() {
    return new PB_ConversionCodetResponse(this);
  }

  /// <summary>Field number for the "errCode" field.</summary>
  public const int ErrCodeFieldNumber = 1;
  private int errCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ErrCode {
    get { return errCode_; }
    set {
      errCode_ = value;
    }
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 2;
  private int propID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 3;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ConversionCodetResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ConversionCodetResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ErrCode != other.ErrCode) return false;
    if (PropID != other.PropID) return false;
    if (Count != other.Count) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
    if (PropID != 0) hash ^= PropID.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ErrCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ErrCode);
    }
    if (PropID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PropID);
    }
    if (Count != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Count);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ErrCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrCode);
    }
    if (PropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ConversionCodetResponse other) {
    if (other == null) {
      return;
    }
    if (other.ErrCode != 0) {
      ErrCode = other.ErrCode;
    }
    if (other.PropID != 0) {
      PropID = other.PropID;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ErrCode = input.ReadInt32();
          break;
        }
        case 16: {
          PropID = input.ReadInt32();
          break;
        }
        case 24: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ConvertFormalAccount : pb::IMessage<PB_ConvertFormalAccount> {
  private static readonly pb::MessageParser<PB_ConvertFormalAccount> _parser = new pb::MessageParser<PB_ConvertFormalAccount>(() => new PB_ConvertFormalAccount());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ConvertFormalAccount> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[187]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConvertFormalAccount() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConvertFormalAccount(PB_ConvertFormalAccount other) : this() {
    userID_ = other.userID_;
    code_ = other.code_;
    mobile_ = other.mobile_;
    pwd_ = other.pwd_;
    token_ = other.token_;
    propID_ = other.propID_;
    propCount_ = other.propCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ConvertFormalAccount Clone() {
    return new PB_ConvertFormalAccount(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "mobile" field.</summary>
  public const int MobileFieldNumber = 3;
  private string mobile_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mobile {
    get { return mobile_; }
    set {
      mobile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pwd" field.</summary>
  public const int PwdFieldNumber = 4;
  private string pwd_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pwd {
    get { return pwd_; }
    set {
      pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 5;
  private string token_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Token {
    get { return token_; }
    set {
      token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 6;
  private int propID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "propCount" field.</summary>
  public const int PropCountFieldNumber = 7;
  private int propCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropCount {
    get { return propCount_; }
    set {
      propCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ConvertFormalAccount);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ConvertFormalAccount other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Code != other.Code) return false;
    if (Mobile != other.Mobile) return false;
    if (Pwd != other.Pwd) return false;
    if (Token != other.Token) return false;
    if (PropID != other.PropID) return false;
    if (PropCount != other.PropCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Mobile.Length != 0) hash ^= Mobile.GetHashCode();
    if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
    if (Token.Length != 0) hash ^= Token.GetHashCode();
    if (PropID != 0) hash ^= PropID.GetHashCode();
    if (PropCount != 0) hash ^= PropCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (Code.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Code);
    }
    if (Mobile.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Mobile);
    }
    if (Pwd.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Pwd);
    }
    if (Token.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Token);
    }
    if (PropID != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(PropID);
    }
    if (PropCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(PropCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (Mobile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mobile);
    }
    if (Pwd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
    }
    if (Token.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
    }
    if (PropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
    }
    if (PropCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ConvertFormalAccount other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Mobile.Length != 0) {
      Mobile = other.Mobile;
    }
    if (other.Pwd.Length != 0) {
      Pwd = other.Pwd;
    }
    if (other.Token.Length != 0) {
      Token = other.Token;
    }
    if (other.PropID != 0) {
      PropID = other.PropID;
    }
    if (other.PropCount != 0) {
      PropCount = other.PropCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 18: {
          Code = input.ReadString();
          break;
        }
        case 26: {
          Mobile = input.ReadString();
          break;
        }
        case 34: {
          Pwd = input.ReadString();
          break;
        }
        case 42: {
          Token = input.ReadString();
          break;
        }
        case 48: {
          PropID = input.ReadInt32();
          break;
        }
        case 56: {
          PropCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SystemReward : pb::IMessage<PB_SystemReward> {
  private static readonly pb::MessageParser<PB_SystemReward> _parser = new pb::MessageParser<PB_SystemReward>(() => new PB_SystemReward());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SystemReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[188]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SystemReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SystemReward(PB_SystemReward other) : this() {
    resultCode_ = other.resultCode_;
    propID_ = other.propID_;
    propCount_ = other.propCount_;
    msg_ = other.msg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SystemReward Clone() {
    return new PB_SystemReward(this);
  }

  /// <summary>Field number for the "resultCode" field.</summary>
  public const int ResultCodeFieldNumber = 1;
  private int resultCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResultCode {
    get { return resultCode_; }
    set {
      resultCode_ = value;
    }
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 2;
  private int propID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "propCount" field.</summary>
  public const int PropCountFieldNumber = 3;
  private int propCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropCount {
    get { return propCount_; }
    set {
      propCount_ = value;
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 4;
  private string msg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SystemReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SystemReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ResultCode != other.ResultCode) return false;
    if (PropID != other.PropID) return false;
    if (PropCount != other.PropCount) return false;
    if (Msg != other.Msg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
    if (PropID != 0) hash ^= PropID.GetHashCode();
    if (PropCount != 0) hash ^= PropCount.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResultCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ResultCode);
    }
    if (PropID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PropID);
    }
    if (PropCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PropCount);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Msg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResultCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
    }
    if (PropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
    }
    if (PropCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropCount);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SystemReward other) {
    if (other == null) {
      return;
    }
    if (other.ResultCode != 0) {
      ResultCode = other.ResultCode;
    }
    if (other.PropID != 0) {
      PropID = other.PropID;
    }
    if (other.PropCount != 0) {
      PropCount = other.PropCount;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ResultCode = input.ReadInt32();
          break;
        }
        case 16: {
          PropID = input.ReadInt32();
          break;
        }
        case 24: {
          PropCount = input.ReadInt32();
          break;
        }
        case 34: {
          Msg = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_ModifyNick : pb::IMessage<PB_ModifyNick> {
  private static readonly pb::MessageParser<PB_ModifyNick> _parser = new pb::MessageParser<PB_ModifyNick>(() => new PB_ModifyNick());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_ModifyNick> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[189]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ModifyNick() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ModifyNick(PB_ModifyNick other) : this() {
    userID_ = other.userID_;
    loginType_ = other.loginType_;
    propID_ = other.propID_;
    propCount_ = other.propCount_;
    modifyNick_ = other.modifyNick_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_ModifyNick Clone() {
    return new PB_ModifyNick(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "loginType" field.</summary>
  public const int LoginTypeFieldNumber = 2;
  private int loginType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LoginType {
    get { return loginType_; }
    set {
      loginType_ = value;
    }
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 3;
  private int propID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "propCount" field.</summary>
  public const int PropCountFieldNumber = 4;
  private int propCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropCount {
    get { return propCount_; }
    set {
      propCount_ = value;
    }
  }

  /// <summary>Field number for the "modifyNick" field.</summary>
  public const int ModifyNickFieldNumber = 5;
  private string modifyNick_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ModifyNick {
    get { return modifyNick_; }
    set {
      modifyNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_ModifyNick);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_ModifyNick other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (LoginType != other.LoginType) return false;
    if (PropID != other.PropID) return false;
    if (PropCount != other.PropCount) return false;
    if (ModifyNick != other.ModifyNick) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (LoginType != 0) hash ^= LoginType.GetHashCode();
    if (PropID != 0) hash ^= PropID.GetHashCode();
    if (PropCount != 0) hash ^= PropCount.GetHashCode();
    if (ModifyNick.Length != 0) hash ^= ModifyNick.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (LoginType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LoginType);
    }
    if (PropID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PropID);
    }
    if (PropCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PropCount);
    }
    if (ModifyNick.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ModifyNick);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (LoginType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginType);
    }
    if (PropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
    }
    if (PropCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropCount);
    }
    if (ModifyNick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifyNick);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_ModifyNick other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.LoginType != 0) {
      LoginType = other.LoginType;
    }
    if (other.PropID != 0) {
      PropID = other.PropID;
    }
    if (other.PropCount != 0) {
      PropCount = other.PropCount;
    }
    if (other.ModifyNick.Length != 0) {
      ModifyNick = other.ModifyNick;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          LoginType = input.ReadInt32();
          break;
        }
        case 24: {
          PropID = input.ReadInt32();
          break;
        }
        case 32: {
          PropCount = input.ReadInt32();
          break;
        }
        case 42: {
          ModifyNick = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_GetHelpGodlReward : pb::IMessage<PB_GetHelpGodlReward> {
  private static readonly pb::MessageParser<PB_GetHelpGodlReward> _parser = new pb::MessageParser<PB_GetHelpGodlReward>(() => new PB_GetHelpGodlReward());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_GetHelpGodlReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[190]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetHelpGodlReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetHelpGodlReward(PB_GetHelpGodlReward other) : this() {
    userID_ = other.userID_;
    taskID_ = other.taskID_;
    propID_ = other.propID_;
    count_ = other.count_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_GetHelpGodlReward Clone() {
    return new PB_GetHelpGodlReward(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "taskID" field.</summary>
  public const int TaskIDFieldNumber = 2;
  private int taskID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TaskID {
    get { return taskID_; }
    set {
      taskID_ = value;
    }
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 3;
  private int propID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 4;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_GetHelpGodlReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_GetHelpGodlReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (TaskID != other.TaskID) return false;
    if (PropID != other.PropID) return false;
    if (Count != other.Count) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (TaskID != 0) hash ^= TaskID.GetHashCode();
    if (PropID != 0) hash ^= PropID.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (TaskID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TaskID);
    }
    if (PropID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PropID);
    }
    if (Count != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Count);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (TaskID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
    }
    if (PropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_GetHelpGodlReward other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.TaskID != 0) {
      TaskID = other.TaskID;
    }
    if (other.PropID != 0) {
      PropID = other.PropID;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          TaskID = input.ReadInt32();
          break;
        }
        case 24: {
          PropID = input.ReadInt32();
          break;
        }
        case 32: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_HelpGoldTaskData : pb::IMessage<PB_HelpGoldTaskData> {
  private static readonly pb::MessageParser<PB_HelpGoldTaskData> _parser = new pb::MessageParser<PB_HelpGoldTaskData>(() => new PB_HelpGoldTaskData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_HelpGoldTaskData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[191]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_HelpGoldTaskData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_HelpGoldTaskData(PB_HelpGoldTaskData other) : this() {
    resultCode_ = other.resultCode_;
    taskID_ = other.taskID_;
    nValue_ = other.nValue_;
    propID_ = other.propID_;
    count_ = other.count_;
    dec_ = other.dec_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_HelpGoldTaskData Clone() {
    return new PB_HelpGoldTaskData(this);
  }

  /// <summary>Field number for the "resultCode" field.</summary>
  public const int ResultCodeFieldNumber = 1;
  private int resultCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResultCode {
    get { return resultCode_; }
    set {
      resultCode_ = value;
    }
  }

  /// <summary>Field number for the "taskID" field.</summary>
  public const int TaskIDFieldNumber = 2;
  private int taskID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TaskID {
    get { return taskID_; }
    set {
      taskID_ = value;
    }
  }

  /// <summary>Field number for the "nValue" field.</summary>
  public const int NValueFieldNumber = 3;
  private int nValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NValue {
    get { return nValue_; }
    set {
      nValue_ = value;
    }
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 4;
  private int propID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 5;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "dec" field.</summary>
  public const int DecFieldNumber = 6;
  private string dec_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Dec {
    get { return dec_; }
    set {
      dec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_HelpGoldTaskData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_HelpGoldTaskData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ResultCode != other.ResultCode) return false;
    if (TaskID != other.TaskID) return false;
    if (NValue != other.NValue) return false;
    if (PropID != other.PropID) return false;
    if (Count != other.Count) return false;
    if (Dec != other.Dec) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
    if (TaskID != 0) hash ^= TaskID.GetHashCode();
    if (NValue != 0) hash ^= NValue.GetHashCode();
    if (PropID != 0) hash ^= PropID.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Dec.Length != 0) hash ^= Dec.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResultCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ResultCode);
    }
    if (TaskID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TaskID);
    }
    if (NValue != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NValue);
    }
    if (PropID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PropID);
    }
    if (Count != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Count);
    }
    if (Dec.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Dec);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResultCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
    }
    if (TaskID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
    }
    if (NValue != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NValue);
    }
    if (PropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (Dec.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Dec);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_HelpGoldTaskData other) {
    if (other == null) {
      return;
    }
    if (other.ResultCode != 0) {
      ResultCode = other.ResultCode;
    }
    if (other.TaskID != 0) {
      TaskID = other.TaskID;
    }
    if (other.NValue != 0) {
      NValue = other.NValue;
    }
    if (other.PropID != 0) {
      PropID = other.PropID;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Dec.Length != 0) {
      Dec = other.Dec;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ResultCode = input.ReadInt32();
          break;
        }
        case 16: {
          TaskID = input.ReadInt32();
          break;
        }
        case 24: {
          NValue = input.ReadInt32();
          break;
        }
        case 32: {
          PropID = input.ReadInt32();
          break;
        }
        case 40: {
          Count = input.ReadInt32();
          break;
        }
        case 50: {
          Dec = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_RetroactiveReques : pb::IMessage<PB_RetroactiveReques> {
  private static readonly pb::MessageParser<PB_RetroactiveReques> _parser = new pb::MessageParser<PB_RetroactiveReques>(() => new PB_RetroactiveReques());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_RetroactiveReques> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[192]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RetroactiveReques() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RetroactiveReques(PB_RetroactiveReques other) : this() {
    userID_ = other.userID_;
    retroactiveType_ = other.retroactiveType_;
    reDay_ = other.reDay_;
    propID_ = other.propID_;
    propCount_ = other.propCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RetroactiveReques Clone() {
    return new PB_RetroactiveReques(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "RetroactiveType" field.</summary>
  public const int RetroactiveTypeFieldNumber = 2;
  private int retroactiveType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RetroactiveType {
    get { return retroactiveType_; }
    set {
      retroactiveType_ = value;
    }
  }

  /// <summary>Field number for the "reDay" field.</summary>
  public const int ReDayFieldNumber = 3;
  private int reDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ReDay {
    get { return reDay_; }
    set {
      reDay_ = value;
    }
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 4;
  private int propID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "propCount" field.</summary>
  public const int PropCountFieldNumber = 5;
  private int propCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropCount {
    get { return propCount_; }
    set {
      propCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_RetroactiveReques);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_RetroactiveReques other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (RetroactiveType != other.RetroactiveType) return false;
    if (ReDay != other.ReDay) return false;
    if (PropID != other.PropID) return false;
    if (PropCount != other.PropCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RetroactiveType != 0) hash ^= RetroactiveType.GetHashCode();
    if (ReDay != 0) hash ^= ReDay.GetHashCode();
    if (PropID != 0) hash ^= PropID.GetHashCode();
    if (PropCount != 0) hash ^= PropCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (RetroactiveType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RetroactiveType);
    }
    if (ReDay != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ReDay);
    }
    if (PropID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PropID);
    }
    if (PropCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PropCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (RetroactiveType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetroactiveType);
    }
    if (ReDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReDay);
    }
    if (PropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
    }
    if (PropCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_RetroactiveReques other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RetroactiveType != 0) {
      RetroactiveType = other.RetroactiveType;
    }
    if (other.ReDay != 0) {
      ReDay = other.ReDay;
    }
    if (other.PropID != 0) {
      PropID = other.PropID;
    }
    if (other.PropCount != 0) {
      PropCount = other.PropCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          RetroactiveType = input.ReadInt32();
          break;
        }
        case 24: {
          ReDay = input.ReadInt32();
          break;
        }
        case 32: {
          PropID = input.ReadInt32();
          break;
        }
        case 40: {
          PropCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_SignRetroactiveResponse : pb::IMessage<PB_SignRetroactiveResponse> {
  private static readonly pb::MessageParser<PB_SignRetroactiveResponse> _parser = new pb::MessageParser<PB_SignRetroactiveResponse>(() => new PB_SignRetroactiveResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_SignRetroactiveResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[193]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignRetroactiveResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignRetroactiveResponse(PB_SignRetroactiveResponse other) : this() {
    result_ = other.result_;
    SignIn = other.signIn_ != null ? other.SignIn.Clone() : null;
    property_ = other.property_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_SignRetroactiveResponse Clone() {
    return new PB_SignRetroactiveResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "sign_in" field.</summary>
  public const int SignInFieldNumber = 2;
  private global::PB_SignIn signIn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PB_SignIn SignIn {
    get { return signIn_; }
    set {
      signIn_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_property_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> property_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Property {
    get { return property_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_SignRetroactiveResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_SignRetroactiveResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!object.Equals(SignIn, other.SignIn)) return false;
    if(!property_.Equals(other.property_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (signIn_ != null) hash ^= SignIn.GetHashCode();
    hash ^= property_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (signIn_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SignIn);
    }
    property_.WriteTo(output, _repeated_property_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (signIn_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignIn);
    }
    size += property_.CalculateSize(_repeated_property_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_SignRetroactiveResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.signIn_ != null) {
      if (signIn_ == null) {
        signIn_ = new global::PB_SignIn();
      }
      SignIn.MergeFrom(other.SignIn);
    }
    property_.Add(other.property_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          if (signIn_ == null) {
            signIn_ = new global::PB_SignIn();
          }
          input.ReadMessage(signIn_);
          break;
        }
        case 26: {
          property_.AddEntriesFrom(input, _repeated_property_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GetBindPhoneState : pb::IMessage<GetBindPhoneState> {
  private static readonly pb::MessageParser<GetBindPhoneState> _parser = new pb::MessageParser<GetBindPhoneState>(() => new GetBindPhoneState());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetBindPhoneState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[194]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetBindPhoneState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetBindPhoneState(GetBindPhoneState other) : this() {
    isBindPhone_ = other.isBindPhone_;
    strPhoneNum_ = other.strPhoneNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetBindPhoneState Clone() {
    return new GetBindPhoneState(this);
  }

  /// <summary>Field number for the "isBindPhone" field.</summary>
  public const int IsBindPhoneFieldNumber = 1;
  private int isBindPhone_;
  /// <summary>
  ///是否绑定手机号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsBindPhone {
    get { return isBindPhone_; }
    set {
      isBindPhone_ = value;
    }
  }

  /// <summary>Field number for the "strPhoneNum" field.</summary>
  public const int StrPhoneNumFieldNumber = 2;
  private string strPhoneNum_ = "";
  /// <summary>
  ///手机号码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StrPhoneNum {
    get { return strPhoneNum_; }
    set {
      strPhoneNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetBindPhoneState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetBindPhoneState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsBindPhone != other.IsBindPhone) return false;
    if (StrPhoneNum != other.StrPhoneNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsBindPhone != 0) hash ^= IsBindPhone.GetHashCode();
    if (StrPhoneNum.Length != 0) hash ^= StrPhoneNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsBindPhone != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(IsBindPhone);
    }
    if (StrPhoneNum.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(StrPhoneNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsBindPhone != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBindPhone);
    }
    if (StrPhoneNum.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StrPhoneNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetBindPhoneState other) {
    if (other == null) {
      return;
    }
    if (other.IsBindPhone != 0) {
      IsBindPhone = other.IsBindPhone;
    }
    if (other.StrPhoneNum.Length != 0) {
      StrPhoneNum = other.StrPhoneNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          IsBindPhone = input.ReadInt32();
          break;
        }
        case 18: {
          StrPhoneNum = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class usePropTime : pb::IMessage<usePropTime> {
  private static readonly pb::MessageParser<usePropTime> _parser = new pb::MessageParser<usePropTime>(() => new usePropTime());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<usePropTime> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[195]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public usePropTime() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public usePropTime(usePropTime other) : this() {
    propID_ = other.propID_;
    propType_ = other.propType_;
    useTime_ = other.useTime_;
    remainTime_ = other.remainTime_;
    nPropTime_ = other.nPropTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public usePropTime Clone() {
    return new usePropTime(this);
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 1;
  private int propID_;
  /// <summary>
  ///道具ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "propType" field.</summary>
  public const int PropTypeFieldNumber = 2;
  private int propType_;
  /// <summary>
  ///道具类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropType {
    get { return propType_; }
    set {
      propType_ = value;
    }
  }

  /// <summary>Field number for the "useTime" field.</summary>
  public const int UseTimeFieldNumber = 3;
  private long useTime_;
  /// <summary>
  ///道具使用时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UseTime {
    get { return useTime_; }
    set {
      useTime_ = value;
    }
  }

  /// <summary>Field number for the "remainTime" field.</summary>
  public const int RemainTimeFieldNumber = 4;
  private long remainTime_;
  /// <summary>
  ///道具剩余时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RemainTime {
    get { return remainTime_; }
    set {
      remainTime_ = value;
    }
  }

  /// <summary>Field number for the "nPropTime" field.</summary>
  public const int NPropTimeFieldNumber = 5;
  private int nPropTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NPropTime {
    get { return nPropTime_; }
    set {
      nPropTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as usePropTime);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(usePropTime other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropID != other.PropID) return false;
    if (PropType != other.PropType) return false;
    if (UseTime != other.UseTime) return false;
    if (RemainTime != other.RemainTime) return false;
    if (NPropTime != other.NPropTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropID != 0) hash ^= PropID.GetHashCode();
    if (PropType != 0) hash ^= PropType.GetHashCode();
    if (UseTime != 0L) hash ^= UseTime.GetHashCode();
    if (RemainTime != 0L) hash ^= RemainTime.GetHashCode();
    if (NPropTime != 0) hash ^= NPropTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PropID);
    }
    if (PropType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PropType);
    }
    if (UseTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(UseTime);
    }
    if (RemainTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(RemainTime);
    }
    if (NPropTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(NPropTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
    }
    if (PropType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropType);
    }
    if (UseTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UseTime);
    }
    if (RemainTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainTime);
    }
    if (NPropTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPropTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(usePropTime other) {
    if (other == null) {
      return;
    }
    if (other.PropID != 0) {
      PropID = other.PropID;
    }
    if (other.PropType != 0) {
      PropType = other.PropType;
    }
    if (other.UseTime != 0L) {
      UseTime = other.UseTime;
    }
    if (other.RemainTime != 0L) {
      RemainTime = other.RemainTime;
    }
    if (other.NPropTime != 0) {
      NPropTime = other.NPropTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PropID = input.ReadInt32();
          break;
        }
        case 16: {
          PropType = input.ReadInt32();
          break;
        }
        case 24: {
          UseTime = input.ReadInt64();
          break;
        }
        case 32: {
          RemainTime = input.ReadInt64();
          break;
        }
        case 40: {
          NPropTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class UsePropTimeArray : pb::IMessage<UsePropTimeArray> {
  private static readonly pb::MessageParser<UsePropTimeArray> _parser = new pb::MessageParser<UsePropTimeArray>(() => new UsePropTimeArray());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UsePropTimeArray> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[196]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeArray() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeArray(UsePropTimeArray other) : this() {
    useProp_ = other.useProp_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeArray Clone() {
    return new UsePropTimeArray(this);
  }

  /// <summary>Field number for the "useProp" field.</summary>
  public const int UsePropFieldNumber = 1;
  private static readonly pb::FieldCodec<global::usePropTime> _repeated_useProp_codec
      = pb::FieldCodec.ForMessage(10, global::usePropTime.Parser);
  private readonly pbc::RepeatedField<global::usePropTime> useProp_ = new pbc::RepeatedField<global::usePropTime>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::usePropTime> UseProp {
    get { return useProp_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UsePropTimeArray);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UsePropTimeArray other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!useProp_.Equals(other.useProp_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= useProp_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    useProp_.WriteTo(output, _repeated_useProp_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += useProp_.CalculateSize(_repeated_useProp_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UsePropTimeArray other) {
    if (other == null) {
      return;
    }
    useProp_.Add(other.useProp_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          useProp_.AddEntriesFrom(input, _repeated_useProp_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class UsePropTimeEx : pb::IMessage<UsePropTimeEx> {
  private static readonly pb::MessageParser<UsePropTimeEx> _parser = new pb::MessageParser<UsePropTimeEx>(() => new UsePropTimeEx());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UsePropTimeEx> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[197]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeEx() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeEx(UsePropTimeEx other) : this() {
    userID_ = other.userID_;
    resultCode_ = other.resultCode_;
    UseProp = other.useProp_ != null ? other.UseProp.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeEx Clone() {
    return new UsePropTimeEx(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "resultCode" field.</summary>
  public const int ResultCodeFieldNumber = 2;
  private int resultCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResultCode {
    get { return resultCode_; }
    set {
      resultCode_ = value;
    }
  }

  /// <summary>Field number for the "useProp" field.</summary>
  public const int UsePropFieldNumber = 3;
  private global::usePropTime useProp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::usePropTime UseProp {
    get { return useProp_; }
    set {
      useProp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UsePropTimeEx);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UsePropTimeEx other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (ResultCode != other.ResultCode) return false;
    if (!object.Equals(UseProp, other.UseProp)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
    if (useProp_ != null) hash ^= UseProp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (ResultCode != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ResultCode);
    }
    if (useProp_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(UseProp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (ResultCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
    }
    if (useProp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseProp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UsePropTimeEx other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.ResultCode != 0) {
      ResultCode = other.ResultCode;
    }
    if (other.useProp_ != null) {
      if (useProp_ == null) {
        useProp_ = new global::usePropTime();
      }
      UseProp.MergeFrom(other.UseProp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          ResultCode = input.ReadInt32();
          break;
        }
        case 26: {
          if (useProp_ == null) {
            useProp_ = new global::usePropTime();
          }
          input.ReadMessage(useProp_);
          break;
        }
      }
    }
  }

}

public sealed partial class UsePropTimeExResponse : pb::IMessage<UsePropTimeExResponse> {
  private static readonly pb::MessageParser<UsePropTimeExResponse> _parser = new pb::MessageParser<UsePropTimeExResponse>(() => new UsePropTimeExResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UsePropTimeExResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[198]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeExResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeExResponse(UsePropTimeExResponse other) : this() {
    userID_ = other.userID_;
    resultCode_ = other.resultCode_;
    UseProp = other.useProp_ != null ? other.UseProp.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UsePropTimeExResponse Clone() {
    return new UsePropTimeExResponse(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "resultCode" field.</summary>
  public const int ResultCodeFieldNumber = 2;
  private int resultCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResultCode {
    get { return resultCode_; }
    set {
      resultCode_ = value;
    }
  }

  /// <summary>Field number for the "useProp" field.</summary>
  public const int UsePropFieldNumber = 3;
  private global::usePropTime useProp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::usePropTime UseProp {
    get { return useProp_; }
    set {
      useProp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UsePropTimeExResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UsePropTimeExResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (ResultCode != other.ResultCode) return false;
    if (!object.Equals(UseProp, other.UseProp)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
    if (useProp_ != null) hash ^= UseProp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (ResultCode != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ResultCode);
    }
    if (useProp_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(UseProp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (ResultCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
    }
    if (useProp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseProp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UsePropTimeExResponse other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.ResultCode != 0) {
      ResultCode = other.ResultCode;
    }
    if (other.useProp_ != null) {
      if (useProp_ == null) {
        useProp_ = new global::usePropTime();
      }
      UseProp.MergeFrom(other.UseProp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          ResultCode = input.ReadInt32();
          break;
        }
        case 26: {
          if (useProp_ == null) {
            useProp_ = new global::usePropTime();
          }
          input.ReadMessage(useProp_);
          break;
        }
      }
    }
  }

}

public sealed partial class DelUsePropTimeEx : pb::IMessage<DelUsePropTimeEx> {
  private static readonly pb::MessageParser<DelUsePropTimeEx> _parser = new pb::MessageParser<DelUsePropTimeEx>(() => new DelUsePropTimeEx());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DelUsePropTimeEx> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[199]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DelUsePropTimeEx() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DelUsePropTimeEx(DelUsePropTimeEx other) : this() {
    userID_ = other.userID_;
    resultCode_ = other.resultCode_;
    delPropID_ = other.delPropID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DelUsePropTimeEx Clone() {
    return new DelUsePropTimeEx(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private int userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "resultCode" field.</summary>
  public const int ResultCodeFieldNumber = 2;
  private int resultCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResultCode {
    get { return resultCode_; }
    set {
      resultCode_ = value;
    }
  }

  /// <summary>Field number for the "delPropID" field.</summary>
  public const int DelPropIDFieldNumber = 3;
  private int delPropID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DelPropID {
    get { return delPropID_; }
    set {
      delPropID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DelUsePropTimeEx);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DelUsePropTimeEx other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (ResultCode != other.ResultCode) return false;
    if (DelPropID != other.DelPropID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (ResultCode != 0) hash ^= ResultCode.GetHashCode();
    if (DelPropID != 0) hash ^= DelPropID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserID);
    }
    if (ResultCode != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ResultCode);
    }
    if (DelPropID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(DelPropID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
    }
    if (ResultCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCode);
    }
    if (DelPropID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelPropID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DelUsePropTimeEx other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.ResultCode != 0) {
      ResultCode = other.ResultCode;
    }
    if (other.DelPropID != 0) {
      DelPropID = other.DelPropID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadInt32();
          break;
        }
        case 16: {
          ResultCode = input.ReadInt32();
          break;
        }
        case 24: {
          DelPropID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_RewardStructure : pb::IMessage<PB_RewardStructure> {
  private static readonly pb::MessageParser<PB_RewardStructure> _parser = new pb::MessageParser<PB_RewardStructure>(() => new PB_RewardStructure());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_RewardStructure> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[200]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RewardStructure() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RewardStructure(PB_RewardStructure other) : this() {
    rewardType_ = other.rewardType_;
    taskID_ = other.taskID_;
    taskValue_ = other.taskValue_;
    rewardPro_ = other.rewardPro_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RewardStructure Clone() {
    return new PB_RewardStructure(this);
  }

  /// <summary>Field number for the "RewardType" field.</summary>
  public const int RewardTypeFieldNumber = 1;
  private int rewardType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardType {
    get { return rewardType_; }
    set {
      rewardType_ = value;
    }
  }

  /// <summary>Field number for the "TaskID" field.</summary>
  public const int TaskIDFieldNumber = 2;
  private int taskID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TaskID {
    get { return taskID_; }
    set {
      taskID_ = value;
    }
  }

  /// <summary>Field number for the "TaskValue" field.</summary>
  public const int TaskValueFieldNumber = 3;
  private int taskValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TaskValue {
    get { return taskValue_; }
    set {
      taskValue_ = value;
    }
  }

  /// <summary>Field number for the "rewardPro" field.</summary>
  public const int RewardProFieldNumber = 4;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_rewardPro_codec
      = pb::FieldCodec.ForMessage(34, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> rewardPro_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> RewardPro {
    get { return rewardPro_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_RewardStructure);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_RewardStructure other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RewardType != other.RewardType) return false;
    if (TaskID != other.TaskID) return false;
    if (TaskValue != other.TaskValue) return false;
    if(!rewardPro_.Equals(other.rewardPro_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RewardType != 0) hash ^= RewardType.GetHashCode();
    if (TaskID != 0) hash ^= TaskID.GetHashCode();
    if (TaskValue != 0) hash ^= TaskValue.GetHashCode();
    hash ^= rewardPro_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RewardType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RewardType);
    }
    if (TaskID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TaskID);
    }
    if (TaskValue != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TaskValue);
    }
    rewardPro_.WriteTo(output, _repeated_rewardPro_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RewardType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardType);
    }
    if (TaskID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
    }
    if (TaskValue != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskValue);
    }
    size += rewardPro_.CalculateSize(_repeated_rewardPro_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_RewardStructure other) {
    if (other == null) {
      return;
    }
    if (other.RewardType != 0) {
      RewardType = other.RewardType;
    }
    if (other.TaskID != 0) {
      TaskID = other.TaskID;
    }
    if (other.TaskValue != 0) {
      TaskValue = other.TaskValue;
    }
    rewardPro_.Add(other.rewardPro_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RewardType = input.ReadInt32();
          break;
        }
        case 16: {
          TaskID = input.ReadInt32();
          break;
        }
        case 24: {
          TaskValue = input.ReadInt32();
          break;
        }
        case 34: {
          rewardPro_.AddEntriesFrom(input, _repeated_rewardPro_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PB_RewardAllData : pb::IMessage<PB_RewardAllData> {
  private static readonly pb::MessageParser<PB_RewardAllData> _parser = new pb::MessageParser<PB_RewardAllData>(() => new PB_RewardAllData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_RewardAllData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[201]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RewardAllData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RewardAllData(PB_RewardAllData other) : this() {
    reward_ = other.reward_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_RewardAllData Clone() {
    return new PB_RewardAllData(this);
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PB_RewardStructure> _repeated_reward_codec
      = pb::FieldCodec.ForMessage(10, global::PB_RewardStructure.Parser);
  private readonly pbc::RepeatedField<global::PB_RewardStructure> reward_ = new pbc::RepeatedField<global::PB_RewardStructure>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_RewardStructure> Reward {
    get { return reward_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_RewardAllData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_RewardAllData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!reward_.Equals(other.reward_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= reward_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    reward_.WriteTo(output, _repeated_reward_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += reward_.CalculateSize(_repeated_reward_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_RewardAllData other) {
    if (other == null) {
      return;
    }
    reward_.Add(other.reward_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          reward_.AddEntriesFrom(input, _repeated_reward_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DBGetMonthlyCardReward : pb::IMessage<DBGetMonthlyCardReward> {
  private static readonly pb::MessageParser<DBGetMonthlyCardReward> _parser = new pb::MessageParser<DBGetMonthlyCardReward>(() => new DBGetMonthlyCardReward());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DBGetMonthlyCardReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[202]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetMonthlyCardReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetMonthlyCardReward(DBGetMonthlyCardReward other) : this() {
    cannonmultiplemax_ = other.cannonmultiplemax_;
    draGonreward_ = other.draGonreward_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetMonthlyCardReward Clone() {
    return new DBGetMonthlyCardReward(this);
  }

  /// <summary>Field number for the "cannonmultiplemax" field.</summary>
  public const int CannonmultiplemaxFieldNumber = 1;
  private int cannonmultiplemax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cannonmultiplemax {
    get { return cannonmultiplemax_; }
    set {
      cannonmultiplemax_ = value;
    }
  }

  /// <summary>Field number for the "DraGonreward" field.</summary>
  public const int DraGonrewardFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_draGonreward_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> draGonreward_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> DraGonreward {
    get { return draGonreward_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DBGetMonthlyCardReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DBGetMonthlyCardReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cannonmultiplemax != other.Cannonmultiplemax) return false;
    if(!draGonreward_.Equals(other.draGonreward_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Cannonmultiplemax != 0) hash ^= Cannonmultiplemax.GetHashCode();
    hash ^= draGonreward_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Cannonmultiplemax != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Cannonmultiplemax);
    }
    draGonreward_.WriteTo(output, _repeated_draGonreward_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Cannonmultiplemax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cannonmultiplemax);
    }
    size += draGonreward_.CalculateSize(_repeated_draGonreward_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DBGetMonthlyCardReward other) {
    if (other == null) {
      return;
    }
    if (other.Cannonmultiplemax != 0) {
      Cannonmultiplemax = other.Cannonmultiplemax;
    }
    draGonreward_.Add(other.draGonreward_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Cannonmultiplemax = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          draGonreward_.AddEntriesFrom(input, _repeated_draGonreward_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DBTopUpMonthlyCardResponse : pb::IMessage<DBTopUpMonthlyCardResponse> {
  private static readonly pb::MessageParser<DBTopUpMonthlyCardResponse> _parser = new pb::MessageParser<DBTopUpMonthlyCardResponse>(() => new DBTopUpMonthlyCardResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DBTopUpMonthlyCardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[203]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBTopUpMonthlyCardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBTopUpMonthlyCardResponse(DBTopUpMonthlyCardResponse other) : this() {
    result_ = other.result_;
    totalRecharge_ = other.totalRecharge_;
    currentVip_ = other.currentVip_;
    cardType_ = other.cardType_;
    userid_ = other.userid_;
    cannonmultiplemax_ = other.cannonmultiplemax_;
    property_ = other.property_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBTopUpMonthlyCardResponse Clone() {
    return new DBTopUpMonthlyCardResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "total_recharge" field.</summary>
  public const int TotalRechargeFieldNumber = 2;
  private long totalRecharge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TotalRecharge {
    get { return totalRecharge_; }
    set {
      totalRecharge_ = value;
    }
  }

  /// <summary>Field number for the "current_vip" field.</summary>
  public const int CurrentVipFieldNumber = 3;
  private int currentVip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentVip {
    get { return currentVip_; }
    set {
      currentVip_ = value;
    }
  }

  /// <summary>Field number for the "cardType" field.</summary>
  public const int CardTypeFieldNumber = 4;
  private int cardType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardType {
    get { return cardType_; }
    set {
      cardType_ = value;
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 5;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "cannonmultiplemax" field.</summary>
  public const int CannonmultiplemaxFieldNumber = 6;
  private int cannonmultiplemax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cannonmultiplemax {
    get { return cannonmultiplemax_; }
    set {
      cannonmultiplemax_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 7;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_property_codec
      = pb::FieldCodec.ForMessage(58, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> property_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Property {
    get { return property_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DBTopUpMonthlyCardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DBTopUpMonthlyCardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (TotalRecharge != other.TotalRecharge) return false;
    if (CurrentVip != other.CurrentVip) return false;
    if (CardType != other.CardType) return false;
    if (Userid != other.Userid) return false;
    if (Cannonmultiplemax != other.Cannonmultiplemax) return false;
    if(!property_.Equals(other.property_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TotalRecharge != 0L) hash ^= TotalRecharge.GetHashCode();
    if (CurrentVip != 0) hash ^= CurrentVip.GetHashCode();
    if (CardType != 0) hash ^= CardType.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Cannonmultiplemax != 0) hash ^= Cannonmultiplemax.GetHashCode();
    hash ^= property_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (TotalRecharge != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(TotalRecharge);
    }
    if (CurrentVip != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurrentVip);
    }
    if (CardType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CardType);
    }
    if (Userid != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Userid);
    }
    if (Cannonmultiplemax != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Cannonmultiplemax);
    }
    property_.WriteTo(output, _repeated_property_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TotalRecharge != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalRecharge);
    }
    if (CurrentVip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentVip);
    }
    if (CardType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Cannonmultiplemax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cannonmultiplemax);
    }
    size += property_.CalculateSize(_repeated_property_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DBTopUpMonthlyCardResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TotalRecharge != 0L) {
      TotalRecharge = other.TotalRecharge;
    }
    if (other.CurrentVip != 0) {
      CurrentVip = other.CurrentVip;
    }
    if (other.CardType != 0) {
      CardType = other.CardType;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Cannonmultiplemax != 0) {
      Cannonmultiplemax = other.Cannonmultiplemax;
    }
    property_.Add(other.property_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          TotalRecharge = input.ReadInt64();
          break;
        }
        case 24: {
          CurrentVip = input.ReadInt32();
          break;
        }
        case 32: {
          CardType = input.ReadInt32();
          break;
        }
        case 40: {
          Userid = input.ReadInt32();
          break;
        }
        case 48: {
          Cannonmultiplemax = input.ReadInt32();
          break;
        }
        case 58: {
          property_.AddEntriesFrom(input, _repeated_property_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DBGetPreferentialReward : pb::IMessage<DBGetPreferentialReward> {
  private static readonly pb::MessageParser<DBGetPreferentialReward> _parser = new pb::MessageParser<DBGetPreferentialReward>(() => new DBGetPreferentialReward());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DBGetPreferentialReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[204]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetPreferentialReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetPreferentialReward(DBGetPreferentialReward other) : this() {
    cannonmultiplemax_ = other.cannonmultiplemax_;
    draGonreward_ = other.draGonreward_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetPreferentialReward Clone() {
    return new DBGetPreferentialReward(this);
  }

  /// <summary>Field number for the "cannonmultiplemax" field.</summary>
  public const int CannonmultiplemaxFieldNumber = 1;
  private int cannonmultiplemax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cannonmultiplemax {
    get { return cannonmultiplemax_; }
    set {
      cannonmultiplemax_ = value;
    }
  }

  /// <summary>Field number for the "DraGonreward" field.</summary>
  public const int DraGonrewardFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_draGonreward_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> draGonreward_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///显示第几个界面
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> DraGonreward {
    get { return draGonreward_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DBGetPreferentialReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DBGetPreferentialReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cannonmultiplemax != other.Cannonmultiplemax) return false;
    if(!draGonreward_.Equals(other.draGonreward_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Cannonmultiplemax != 0) hash ^= Cannonmultiplemax.GetHashCode();
    hash ^= draGonreward_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Cannonmultiplemax != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Cannonmultiplemax);
    }
    draGonreward_.WriteTo(output, _repeated_draGonreward_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Cannonmultiplemax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cannonmultiplemax);
    }
    size += draGonreward_.CalculateSize(_repeated_draGonreward_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DBGetPreferentialReward other) {
    if (other == null) {
      return;
    }
    if (other.Cannonmultiplemax != 0) {
      Cannonmultiplemax = other.Cannonmultiplemax;
    }
    draGonreward_.Add(other.draGonreward_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Cannonmultiplemax = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          draGonreward_.AddEntriesFrom(input, _repeated_draGonreward_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DBGetPreferentialResponse : pb::IMessage<DBGetPreferentialResponse> {
  private static readonly pb::MessageParser<DBGetPreferentialResponse> _parser = new pb::MessageParser<DBGetPreferentialResponse>(() => new DBGetPreferentialResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DBGetPreferentialResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[205]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetPreferentialResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetPreferentialResponse(DBGetPreferentialResponse other) : this() {
    result_ = other.result_;
    totalRecharge_ = other.totalRecharge_;
    currentVip_ = other.currentVip_;
    cardType_ = other.cardType_;
    userid_ = other.userid_;
    cannonmultiplemax_ = other.cannonmultiplemax_;
    property_ = other.property_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DBGetPreferentialResponse Clone() {
    return new DBGetPreferentialResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///返回的结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "total_recharge" field.</summary>
  public const int TotalRechargeFieldNumber = 2;
  private long totalRecharge_;
  /// <summary>
  ///总计冲多少
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TotalRecharge {
    get { return totalRecharge_; }
    set {
      totalRecharge_ = value;
    }
  }

  /// <summary>Field number for the "current_vip" field.</summary>
  public const int CurrentVipFieldNumber = 3;
  private int currentVip_;
  /// <summary>
  ///当前VIP等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentVip {
    get { return currentVip_; }
    set {
      currentVip_ = value;
    }
  }

  /// <summary>Field number for the "cardType" field.</summary>
  public const int CardTypeFieldNumber = 4;
  private int cardType_;
  /// <summary>
  ///龙卡类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardType {
    get { return cardType_; }
    set {
      cardType_ = value;
    }
  }

  /// <summary>Field number for the "userid" field.</summary>
  public const int UseridFieldNumber = 5;
  private int userid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Userid {
    get { return userid_; }
    set {
      userid_ = value;
    }
  }

  /// <summary>Field number for the "cannonmultiplemax" field.</summary>
  public const int CannonmultiplemaxFieldNumber = 6;
  private int cannonmultiplemax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cannonmultiplemax {
    get { return cannonmultiplemax_; }
    set {
      cannonmultiplemax_ = value;
    }
  }

  /// <summary>Field number for the "property" field.</summary>
  public const int PropertyFieldNumber = 7;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_property_codec
      = pb::FieldCodec.ForMessage(58, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> property_ = new pbc::RepeatedField<global::PB_Property>();
  /// <summary>
  ///奖励的信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Property {
    get { return property_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DBGetPreferentialResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DBGetPreferentialResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (TotalRecharge != other.TotalRecharge) return false;
    if (CurrentVip != other.CurrentVip) return false;
    if (CardType != other.CardType) return false;
    if (Userid != other.Userid) return false;
    if (Cannonmultiplemax != other.Cannonmultiplemax) return false;
    if(!property_.Equals(other.property_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TotalRecharge != 0L) hash ^= TotalRecharge.GetHashCode();
    if (CurrentVip != 0) hash ^= CurrentVip.GetHashCode();
    if (CardType != 0) hash ^= CardType.GetHashCode();
    if (Userid != 0) hash ^= Userid.GetHashCode();
    if (Cannonmultiplemax != 0) hash ^= Cannonmultiplemax.GetHashCode();
    hash ^= property_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (TotalRecharge != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(TotalRecharge);
    }
    if (CurrentVip != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurrentVip);
    }
    if (CardType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CardType);
    }
    if (Userid != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Userid);
    }
    if (Cannonmultiplemax != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Cannonmultiplemax);
    }
    property_.WriteTo(output, _repeated_property_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TotalRecharge != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalRecharge);
    }
    if (CurrentVip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentVip);
    }
    if (CardType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
    }
    if (Userid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Userid);
    }
    if (Cannonmultiplemax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cannonmultiplemax);
    }
    size += property_.CalculateSize(_repeated_property_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DBGetPreferentialResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TotalRecharge != 0L) {
      TotalRecharge = other.TotalRecharge;
    }
    if (other.CurrentVip != 0) {
      CurrentVip = other.CurrentVip;
    }
    if (other.CardType != 0) {
      CardType = other.CardType;
    }
    if (other.Userid != 0) {
      Userid = other.Userid;
    }
    if (other.Cannonmultiplemax != 0) {
      Cannonmultiplemax = other.Cannonmultiplemax;
    }
    property_.Add(other.property_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          TotalRecharge = input.ReadInt64();
          break;
        }
        case 24: {
          CurrentVip = input.ReadInt32();
          break;
        }
        case 32: {
          CardType = input.ReadInt32();
          break;
        }
        case 40: {
          Userid = input.ReadInt32();
          break;
        }
        case 48: {
          Cannonmultiplemax = input.ReadInt32();
          break;
        }
        case 58: {
          property_.AddEntriesFrom(input, _repeated_property_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class useBuyCannonBottomInfo : pb::IMessage<useBuyCannonBottomInfo> {
  private static readonly pb::MessageParser<useBuyCannonBottomInfo> _parser = new pb::MessageParser<useBuyCannonBottomInfo>(() => new useBuyCannonBottomInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<useBuyCannonBottomInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[206]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public useBuyCannonBottomInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public useBuyCannonBottomInfo(useBuyCannonBottomInfo other) : this() {
    buyType_ = other.buyType_;
    gold_ = other.gold_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public useBuyCannonBottomInfo Clone() {
    return new useBuyCannonBottomInfo(this);
  }

  /// <summary>Field number for the "buyType" field.</summary>
  public const int BuyTypeFieldNumber = 1;
  private int buyType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuyType {
    get { return buyType_; }
    set {
      buyType_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 2;
  private long gold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as useBuyCannonBottomInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(useBuyCannonBottomInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuyType != other.BuyType) return false;
    if (Gold != other.Gold) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuyType != 0) hash ^= BuyType.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuyType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BuyType);
    }
    if (Gold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Gold);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuyType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyType);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(useBuyCannonBottomInfo other) {
    if (other == null) {
      return;
    }
    if (other.BuyType != 0) {
      BuyType = other.BuyType;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BuyType = input.ReadInt32();
          break;
        }
        case 16: {
          Gold = input.ReadInt64();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class EquipmentCannonBottom : pb::IMessage<EquipmentCannonBottom> {
  private static readonly pb::MessageParser<EquipmentCannonBottom> _parser = new pb::MessageParser<EquipmentCannonBottom>(() => new EquipmentCannonBottom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EquipmentCannonBottom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[207]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipmentCannonBottom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipmentCannonBottom(EquipmentCannonBottom other) : this() {
    equipmentType_ = other.equipmentType_;
    propID_ = other.propID_;
    result_ = other.result_;
    removeCannonBottom_ = other.removeCannonBottom_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipmentCannonBottom Clone() {
    return new EquipmentCannonBottom(this);
  }

  /// <summary>Field number for the "EquipmentType" field.</summary>
  public const int EquipmentTypeFieldNumber = 1;
  private int equipmentType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EquipmentType {
    get { return equipmentType_; }
    set {
      equipmentType_ = value;
    }
  }

  /// <summary>Field number for the "propID" field.</summary>
  public const int PropIDFieldNumber = 2;
  private long propID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropID {
    get { return propID_; }
    set {
      propID_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "remove_cannon_bottom" field.</summary>
  public const int RemoveCannonBottomFieldNumber = 4;
  private int removeCannonBottom_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RemoveCannonBottom {
    get { return removeCannonBottom_; }
    set {
      removeCannonBottom_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EquipmentCannonBottom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EquipmentCannonBottom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EquipmentType != other.EquipmentType) return false;
    if (PropID != other.PropID) return false;
    if (Result != other.Result) return false;
    if (RemoveCannonBottom != other.RemoveCannonBottom) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EquipmentType != 0) hash ^= EquipmentType.GetHashCode();
    if (PropID != 0L) hash ^= PropID.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RemoveCannonBottom != 0) hash ^= RemoveCannonBottom.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EquipmentType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EquipmentType);
    }
    if (PropID != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PropID);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (RemoveCannonBottom != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RemoveCannonBottom);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EquipmentType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipmentType);
    }
    if (PropID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropID);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RemoveCannonBottom != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemoveCannonBottom);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EquipmentCannonBottom other) {
    if (other == null) {
      return;
    }
    if (other.EquipmentType != 0) {
      EquipmentType = other.EquipmentType;
    }
    if (other.PropID != 0L) {
      PropID = other.PropID;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RemoveCannonBottom != 0) {
      RemoveCannonBottom = other.RemoveCannonBottom;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EquipmentType = input.ReadInt32();
          break;
        }
        case 16: {
          PropID = input.ReadInt64();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
        case 32: {
          RemoveCannonBottom = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Change_FenShenFish_ID : pb::IMessage<Change_FenShenFish_ID> {
  private static readonly pb::MessageParser<Change_FenShenFish_ID> _parser = new pb::MessageParser<Change_FenShenFish_ID>(() => new Change_FenShenFish_ID());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Change_FenShenFish_ID> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[208]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Change_FenShenFish_ID() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Change_FenShenFish_ID(Change_FenShenFish_ID other) : this() {
    id_ = other.id_;
    target_ = other.target_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Change_FenShenFish_ID Clone() {
    return new Change_FenShenFish_ID(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_target_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> target_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> Target {
    get { return target_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Change_FenShenFish_ID);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Change_FenShenFish_ID other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!target_.Equals(other.target_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= target_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    target_.WriteTo(output, _repeated_target_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    size += target_.CalculateSize(_repeated_target_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Change_FenShenFish_ID other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    target_.Add(other.target_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          target_.AddEntriesFrom(input, _repeated_target_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ManmonCount : pb::IMessage<ManmonCount> {
  private static readonly pb::MessageParser<ManmonCount> _parser = new pb::MessageParser<ManmonCount>(() => new ManmonCount());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ManmonCount> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[209]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ManmonCount() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ManmonCount(ManmonCount other) : this() {
    lUserID_ = other.lUserID_;
    nManmonCount_ = other.nManmonCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ManmonCount Clone() {
    return new ManmonCount(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "nManmonCount" field.</summary>
  public const int NManmonCountFieldNumber = 2;
  private int nManmonCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NManmonCount {
    get { return nManmonCount_; }
    set {
      nManmonCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ManmonCount);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ManmonCount other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (NManmonCount != other.NManmonCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (NManmonCount != 0) hash ^= NManmonCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (NManmonCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NManmonCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (NManmonCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NManmonCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ManmonCount other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.NManmonCount != 0) {
      NManmonCount = other.NManmonCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          NManmonCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GetManmonChipGold : pb::IMessage<GetManmonChipGold> {
  private static readonly pb::MessageParser<GetManmonChipGold> _parser = new pb::MessageParser<GetManmonChipGold>(() => new GetManmonChipGold());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetManmonChipGold> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[210]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetManmonChipGold() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetManmonChipGold(GetManmonChipGold other) : this() {
    lUserID_ = other.lUserID_;
    curGold_ = other.curGold_;
    nResult_ = other.nResult_;
    shipGold_ = other.shipGold_.Clone();
    nManmonCount_ = other.nManmonCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetManmonChipGold Clone() {
    return new GetManmonChipGold(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "curGold" field.</summary>
  public const int CurGoldFieldNumber = 2;
  private long curGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CurGold {
    get { return curGold_; }
    set {
      curGold_ = value;
    }
  }

  /// <summary>Field number for the "nResult" field.</summary>
  public const int NResultFieldNumber = 3;
  private int nResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NResult {
    get { return nResult_; }
    set {
      nResult_ = value;
    }
  }

  /// <summary>Field number for the "shipGold" field.</summary>
  public const int ShipGoldFieldNumber = 4;
  private static readonly pb::FieldCodec<long> _repeated_shipGold_codec
      = pb::FieldCodec.ForInt64(34);
  private readonly pbc::RepeatedField<long> shipGold_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> ShipGold {
    get { return shipGold_; }
  }

  /// <summary>Field number for the "nManmonCount" field.</summary>
  public const int NManmonCountFieldNumber = 5;
  private int nManmonCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NManmonCount {
    get { return nManmonCount_; }
    set {
      nManmonCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetManmonChipGold);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetManmonChipGold other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (CurGold != other.CurGold) return false;
    if (NResult != other.NResult) return false;
    if(!shipGold_.Equals(other.shipGold_)) return false;
    if (NManmonCount != other.NManmonCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (CurGold != 0L) hash ^= CurGold.GetHashCode();
    if (NResult != 0) hash ^= NResult.GetHashCode();
    hash ^= shipGold_.GetHashCode();
    if (NManmonCount != 0) hash ^= NManmonCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (CurGold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(CurGold);
    }
    if (NResult != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NResult);
    }
    shipGold_.WriteTo(output, _repeated_shipGold_codec);
    if (NManmonCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(NManmonCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (CurGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurGold);
    }
    if (NResult != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
    }
    size += shipGold_.CalculateSize(_repeated_shipGold_codec);
    if (NManmonCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NManmonCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetManmonChipGold other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.CurGold != 0L) {
      CurGold = other.CurGold;
    }
    if (other.NResult != 0) {
      NResult = other.NResult;
    }
    shipGold_.Add(other.shipGold_);
    if (other.NManmonCount != 0) {
      NManmonCount = other.NManmonCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          CurGold = input.ReadInt64();
          break;
        }
        case 24: {
          NResult = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          shipGold_.AddEntriesFrom(input, _repeated_shipGold_codec);
          break;
        }
        case 40: {
          NManmonCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ChipJettorGold : pb::IMessage<ChipJettorGold> {
  private static readonly pb::MessageParser<ChipJettorGold> _parser = new pb::MessageParser<ChipJettorGold>(() => new ChipJettorGold());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChipJettorGold> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[211]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChipJettorGold() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChipJettorGold(ChipJettorGold other) : this() {
    lUserID_ = other.lUserID_;
    selfGold_ = other.selfGold_;
    nWinGold_ = other.nWinGold_;
    chipIndex_ = other.chipIndex_;
    nResult_ = other.nResult_;
    nChaValue_ = other.nChaValue_;
    nTax_ = other.nTax_;
    showtime_ = other.showtime_;
    nManmonCount_ = other.nManmonCount_;
    nBeiShu_ = other.nBeiShu_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChipJettorGold Clone() {
    return new ChipJettorGold(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "selfGold" field.</summary>
  public const int SelfGoldFieldNumber = 2;
  private long selfGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SelfGold {
    get { return selfGold_; }
    set {
      selfGold_ = value;
    }
  }

  /// <summary>Field number for the "nWinGold" field.</summary>
  public const int NWinGoldFieldNumber = 3;
  private long nWinGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NWinGold {
    get { return nWinGold_; }
    set {
      nWinGold_ = value;
    }
  }

  /// <summary>Field number for the "chipIndex" field.</summary>
  public const int ChipIndexFieldNumber = 4;
  private int chipIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChipIndex {
    get { return chipIndex_; }
    set {
      chipIndex_ = value;
    }
  }

  /// <summary>Field number for the "nResult" field.</summary>
  public const int NResultFieldNumber = 5;
  private int nResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NResult {
    get { return nResult_; }
    set {
      nResult_ = value;
    }
  }

  /// <summary>Field number for the "nChaValue" field.</summary>
  public const int NChaValueFieldNumber = 6;
  private long nChaValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NChaValue {
    get { return nChaValue_; }
    set {
      nChaValue_ = value;
    }
  }

  /// <summary>Field number for the "nTax" field.</summary>
  public const int NTaxFieldNumber = 7;
  private long nTax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NTax {
    get { return nTax_; }
    set {
      nTax_ = value;
    }
  }

  /// <summary>Field number for the "showtime" field.</summary>
  public const int ShowtimeFieldNumber = 8;
  private int showtime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Showtime {
    get { return showtime_; }
    set {
      showtime_ = value;
    }
  }

  /// <summary>Field number for the "nManmonCount" field.</summary>
  public const int NManmonCountFieldNumber = 9;
  private int nManmonCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NManmonCount {
    get { return nManmonCount_; }
    set {
      nManmonCount_ = value;
    }
  }

  /// <summary>Field number for the "nBeiShu" field.</summary>
  public const int NBeiShuFieldNumber = 10;
  private double nBeiShu_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double NBeiShu {
    get { return nBeiShu_; }
    set {
      nBeiShu_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChipJettorGold);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChipJettorGold other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (SelfGold != other.SelfGold) return false;
    if (NWinGold != other.NWinGold) return false;
    if (ChipIndex != other.ChipIndex) return false;
    if (NResult != other.NResult) return false;
    if (NChaValue != other.NChaValue) return false;
    if (NTax != other.NTax) return false;
    if (Showtime != other.Showtime) return false;
    if (NManmonCount != other.NManmonCount) return false;
    if (NBeiShu != other.NBeiShu) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (SelfGold != 0L) hash ^= SelfGold.GetHashCode();
    if (NWinGold != 0L) hash ^= NWinGold.GetHashCode();
    if (ChipIndex != 0) hash ^= ChipIndex.GetHashCode();
    if (NResult != 0) hash ^= NResult.GetHashCode();
    if (NChaValue != 0L) hash ^= NChaValue.GetHashCode();
    if (NTax != 0L) hash ^= NTax.GetHashCode();
    if (Showtime != 0) hash ^= Showtime.GetHashCode();
    if (NManmonCount != 0) hash ^= NManmonCount.GetHashCode();
    if (NBeiShu != 0D) hash ^= NBeiShu.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (SelfGold != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SelfGold);
    }
    if (NWinGold != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(NWinGold);
    }
    if (ChipIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ChipIndex);
    }
    if (NResult != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(NResult);
    }
    if (NChaValue != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(NChaValue);
    }
    if (NTax != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(NTax);
    }
    if (Showtime != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Showtime);
    }
    if (NManmonCount != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(NManmonCount);
    }
    if (NBeiShu != 0D) {
      output.WriteRawTag(81);
      output.WriteDouble(NBeiShu);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (SelfGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfGold);
    }
    if (NWinGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NWinGold);
    }
    if (ChipIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChipIndex);
    }
    if (NResult != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
    }
    if (NChaValue != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NChaValue);
    }
    if (NTax != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NTax);
    }
    if (Showtime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Showtime);
    }
    if (NManmonCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NManmonCount);
    }
    if (NBeiShu != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChipJettorGold other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.SelfGold != 0L) {
      SelfGold = other.SelfGold;
    }
    if (other.NWinGold != 0L) {
      NWinGold = other.NWinGold;
    }
    if (other.ChipIndex != 0) {
      ChipIndex = other.ChipIndex;
    }
    if (other.NResult != 0) {
      NResult = other.NResult;
    }
    if (other.NChaValue != 0L) {
      NChaValue = other.NChaValue;
    }
    if (other.NTax != 0L) {
      NTax = other.NTax;
    }
    if (other.Showtime != 0) {
      Showtime = other.Showtime;
    }
    if (other.NManmonCount != 0) {
      NManmonCount = other.NManmonCount;
    }
    if (other.NBeiShu != 0D) {
      NBeiShu = other.NBeiShu;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          SelfGold = input.ReadInt64();
          break;
        }
        case 24: {
          NWinGold = input.ReadInt64();
          break;
        }
        case 32: {
          ChipIndex = input.ReadInt32();
          break;
        }
        case 40: {
          NResult = input.ReadInt32();
          break;
        }
        case 48: {
          NChaValue = input.ReadInt64();
          break;
        }
        case 56: {
          NTax = input.ReadInt64();
          break;
        }
        case 64: {
          Showtime = input.ReadInt32();
          break;
        }
        case 72: {
          NManmonCount = input.ReadInt32();
          break;
        }
        case 81: {
          NBeiShu = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class GetLongRewardPoolCount : pb::IMessage<GetLongRewardPoolCount> {
  private static readonly pb::MessageParser<GetLongRewardPoolCount> _parser = new pb::MessageParser<GetLongRewardPoolCount>(() => new GetLongRewardPoolCount());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetLongRewardPoolCount> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[212]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLongRewardPoolCount() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLongRewardPoolCount(GetLongRewardPoolCount other) : this() {
    lUserID_ = other.lUserID_;
    nResult_ = other.nResult_;
    nType_ = other.nType_;
    saveLongRewardPoolGold_ = other.saveLongRewardPoolGold_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLongRewardPoolCount Clone() {
    return new GetLongRewardPoolCount(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "nResult" field.</summary>
  public const int NResultFieldNumber = 2;
  private int nResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NResult {
    get { return nResult_; }
    set {
      nResult_ = value;
    }
  }

  /// <summary>Field number for the "nType" field.</summary>
  public const int NTypeFieldNumber = 3;
  private int nType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NType {
    get { return nType_; }
    set {
      nType_ = value;
    }
  }

  /// <summary>Field number for the "saveLongRewardPoolGold" field.</summary>
  public const int SaveLongRewardPoolGoldFieldNumber = 4;
  private static readonly pb::FieldCodec<long> _repeated_saveLongRewardPoolGold_codec
      = pb::FieldCodec.ForInt64(34);
  private readonly pbc::RepeatedField<long> saveLongRewardPoolGold_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SaveLongRewardPoolGold {
    get { return saveLongRewardPoolGold_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetLongRewardPoolCount);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetLongRewardPoolCount other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (NResult != other.NResult) return false;
    if (NType != other.NType) return false;
    if(!saveLongRewardPoolGold_.Equals(other.saveLongRewardPoolGold_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (NResult != 0) hash ^= NResult.GetHashCode();
    if (NType != 0) hash ^= NType.GetHashCode();
    hash ^= saveLongRewardPoolGold_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (NResult != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NResult);
    }
    if (NType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NType);
    }
    saveLongRewardPoolGold_.WriteTo(output, _repeated_saveLongRewardPoolGold_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (NResult != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
    }
    if (NType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NType);
    }
    size += saveLongRewardPoolGold_.CalculateSize(_repeated_saveLongRewardPoolGold_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetLongRewardPoolCount other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.NResult != 0) {
      NResult = other.NResult;
    }
    if (other.NType != 0) {
      NType = other.NType;
    }
    saveLongRewardPoolGold_.Add(other.saveLongRewardPoolGold_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          NResult = input.ReadInt32();
          break;
        }
        case 24: {
          NType = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          saveLongRewardPoolGold_.AddEntriesFrom(input, _repeated_saveLongRewardPoolGold_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GetManmonRewardInfo : pb::IMessage<GetManmonRewardInfo> {
  private static readonly pb::MessageParser<GetManmonRewardInfo> _parser = new pb::MessageParser<GetManmonRewardInfo>(() => new GetManmonRewardInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetManmonRewardInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[213]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetManmonRewardInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetManmonRewardInfo(GetManmonRewardInfo other) : this() {
    nResult_ = other.nResult_;
    saveManmonRewardInfo_ = other.saveManmonRewardInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetManmonRewardInfo Clone() {
    return new GetManmonRewardInfo(this);
  }

  /// <summary>Field number for the "nResult" field.</summary>
  public const int NResultFieldNumber = 1;
  private int nResult_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NResult {
    get { return nResult_; }
    set {
      nResult_ = value;
    }
  }

  /// <summary>Field number for the "saveManmonRewardInfo" field.</summary>
  public const int SaveManmonRewardInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_saveManmonRewardInfo_codec
      = pb::FieldCodec.ForMessage(18, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> saveManmonRewardInfo_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> SaveManmonRewardInfo {
    get { return saveManmonRewardInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetManmonRewardInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetManmonRewardInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NResult != other.NResult) return false;
    if(!saveManmonRewardInfo_.Equals(other.saveManmonRewardInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NResult != 0) hash ^= NResult.GetHashCode();
    hash ^= saveManmonRewardInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NResult != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NResult);
    }
    saveManmonRewardInfo_.WriteTo(output, _repeated_saveManmonRewardInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NResult != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResult);
    }
    size += saveManmonRewardInfo_.CalculateSize(_repeated_saveManmonRewardInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetManmonRewardInfo other) {
    if (other == null) {
      return;
    }
    if (other.NResult != 0) {
      NResult = other.NResult;
    }
    saveManmonRewardInfo_.Add(other.saveManmonRewardInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          NResult = input.ReadInt32();
          break;
        }
        case 18: {
          saveManmonRewardInfo_.AddEntriesFrom(input, _repeated_saveManmonRewardInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class LongLiuShuiGold : pb::IMessage<LongLiuShuiGold> {
  private static readonly pb::MessageParser<LongLiuShuiGold> _parser = new pb::MessageParser<LongLiuShuiGold>(() => new LongLiuShuiGold());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LongLiuShuiGold> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[214]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LongLiuShuiGold() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LongLiuShuiGold(LongLiuShuiGold other) : this() {
    lUserID_ = other.lUserID_;
    lLongLiuShui_ = other.lLongLiuShui_;
    lTimeData_ = other.lTimeData_;
    lManmonExp_ = other.lManmonExp_;
    nShengJiDuanWei_ = other.nShengJiDuanWei_;
    nIsUserTopUpState_ = other.nIsUserTopUpState_;
    nTwoSelectOneTopUpState_ = other.nTwoSelectOneTopUpState_;
    nThreeSelectOneTopUpdate_ = other.nThreeSelectOneTopUpdate_;
    nChangeCurDuanWei_ = other.nChangeCurDuanWei_;
    nCurRank_ = other.nCurRank_;
    nCurMax_ = other.nCurMax_;
    nSevenTaskID_ = other.nSevenTaskID_;
    nSevenTaskValue_ = other.nSevenTaskValue_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LongLiuShuiGold Clone() {
    return new LongLiuShuiGold(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "lLongLiuShui" field.</summary>
  public const int LLongLiuShuiFieldNumber = 2;
  private long lLongLiuShui_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LLongLiuShui {
    get { return lLongLiuShui_; }
    set {
      lLongLiuShui_ = value;
    }
  }

  /// <summary>Field number for the "lTimeData" field.</summary>
  public const int LTimeDataFieldNumber = 3;
  private long lTimeData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LTimeData {
    get { return lTimeData_; }
    set {
      lTimeData_ = value;
    }
  }

  /// <summary>Field number for the "lManmonExp" field.</summary>
  public const int LManmonExpFieldNumber = 4;
  private long lManmonExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LManmonExp {
    get { return lManmonExp_; }
    set {
      lManmonExp_ = value;
    }
  }

  /// <summary>Field number for the "nShengJiDuanWei" field.</summary>
  public const int NShengJiDuanWeiFieldNumber = 5;
  private int nShengJiDuanWei_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NShengJiDuanWei {
    get { return nShengJiDuanWei_; }
    set {
      nShengJiDuanWei_ = value;
    }
  }

  /// <summary>Field number for the "nIsUserTopUpState" field.</summary>
  public const int NIsUserTopUpStateFieldNumber = 6;
  private int nIsUserTopUpState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NIsUserTopUpState {
    get { return nIsUserTopUpState_; }
    set {
      nIsUserTopUpState_ = value;
    }
  }

  /// <summary>Field number for the "nTwoSelectOneTopUpState" field.</summary>
  public const int NTwoSelectOneTopUpStateFieldNumber = 7;
  private int nTwoSelectOneTopUpState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NTwoSelectOneTopUpState {
    get { return nTwoSelectOneTopUpState_; }
    set {
      nTwoSelectOneTopUpState_ = value;
    }
  }

  /// <summary>Field number for the "nThreeSelectOneTopUpdate" field.</summary>
  public const int NThreeSelectOneTopUpdateFieldNumber = 8;
  private int nThreeSelectOneTopUpdate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NThreeSelectOneTopUpdate {
    get { return nThreeSelectOneTopUpdate_; }
    set {
      nThreeSelectOneTopUpdate_ = value;
    }
  }

  /// <summary>Field number for the "nChangeCurDuanWei" field.</summary>
  public const int NChangeCurDuanWeiFieldNumber = 9;
  private int nChangeCurDuanWei_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NChangeCurDuanWei {
    get { return nChangeCurDuanWei_; }
    set {
      nChangeCurDuanWei_ = value;
    }
  }

  /// <summary>Field number for the "nCurRank" field.</summary>
  public const int NCurRankFieldNumber = 10;
  private int nCurRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NCurRank {
    get { return nCurRank_; }
    set {
      nCurRank_ = value;
    }
  }

  /// <summary>Field number for the "nCurMax" field.</summary>
  public const int NCurMaxFieldNumber = 11;
  private int nCurMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NCurMax {
    get { return nCurMax_; }
    set {
      nCurMax_ = value;
    }
  }

  /// <summary>Field number for the "nSevenTaskID" field.</summary>
  public const int NSevenTaskIDFieldNumber = 12;
  private int nSevenTaskID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NSevenTaskID {
    get { return nSevenTaskID_; }
    set {
      nSevenTaskID_ = value;
    }
  }

  /// <summary>Field number for the "nSevenTaskValue" field.</summary>
  public const int NSevenTaskValueFieldNumber = 13;
  private long nSevenTaskValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NSevenTaskValue {
    get { return nSevenTaskValue_; }
    set {
      nSevenTaskValue_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LongLiuShuiGold);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LongLiuShuiGold other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (LLongLiuShui != other.LLongLiuShui) return false;
    if (LTimeData != other.LTimeData) return false;
    if (LManmonExp != other.LManmonExp) return false;
    if (NShengJiDuanWei != other.NShengJiDuanWei) return false;
    if (NIsUserTopUpState != other.NIsUserTopUpState) return false;
    if (NTwoSelectOneTopUpState != other.NTwoSelectOneTopUpState) return false;
    if (NThreeSelectOneTopUpdate != other.NThreeSelectOneTopUpdate) return false;
    if (NChangeCurDuanWei != other.NChangeCurDuanWei) return false;
    if (NCurRank != other.NCurRank) return false;
    if (NCurMax != other.NCurMax) return false;
    if (NSevenTaskID != other.NSevenTaskID) return false;
    if (NSevenTaskValue != other.NSevenTaskValue) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (LLongLiuShui != 0L) hash ^= LLongLiuShui.GetHashCode();
    if (LTimeData != 0L) hash ^= LTimeData.GetHashCode();
    if (LManmonExp != 0L) hash ^= LManmonExp.GetHashCode();
    if (NShengJiDuanWei != 0) hash ^= NShengJiDuanWei.GetHashCode();
    if (NIsUserTopUpState != 0) hash ^= NIsUserTopUpState.GetHashCode();
    if (NTwoSelectOneTopUpState != 0) hash ^= NTwoSelectOneTopUpState.GetHashCode();
    if (NThreeSelectOneTopUpdate != 0) hash ^= NThreeSelectOneTopUpdate.GetHashCode();
    if (NChangeCurDuanWei != 0) hash ^= NChangeCurDuanWei.GetHashCode();
    if (NCurRank != 0) hash ^= NCurRank.GetHashCode();
    if (NCurMax != 0) hash ^= NCurMax.GetHashCode();
    if (NSevenTaskID != 0) hash ^= NSevenTaskID.GetHashCode();
    if (NSevenTaskValue != 0L) hash ^= NSevenTaskValue.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (LLongLiuShui != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(LLongLiuShui);
    }
    if (LTimeData != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(LTimeData);
    }
    if (LManmonExp != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(LManmonExp);
    }
    if (NShengJiDuanWei != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(NShengJiDuanWei);
    }
    if (NIsUserTopUpState != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(NIsUserTopUpState);
    }
    if (NTwoSelectOneTopUpState != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(NTwoSelectOneTopUpState);
    }
    if (NThreeSelectOneTopUpdate != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(NThreeSelectOneTopUpdate);
    }
    if (NChangeCurDuanWei != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(NChangeCurDuanWei);
    }
    if (NCurRank != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(NCurRank);
    }
    if (NCurMax != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(NCurMax);
    }
    if (NSevenTaskID != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(NSevenTaskID);
    }
    if (NSevenTaskValue != 0L) {
      output.WriteRawTag(104);
      output.WriteInt64(NSevenTaskValue);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (LLongLiuShui != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LLongLiuShui);
    }
    if (LTimeData != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LTimeData);
    }
    if (LManmonExp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LManmonExp);
    }
    if (NShengJiDuanWei != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NShengJiDuanWei);
    }
    if (NIsUserTopUpState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NIsUserTopUpState);
    }
    if (NTwoSelectOneTopUpState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NTwoSelectOneTopUpState);
    }
    if (NThreeSelectOneTopUpdate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NThreeSelectOneTopUpdate);
    }
    if (NChangeCurDuanWei != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NChangeCurDuanWei);
    }
    if (NCurRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCurRank);
    }
    if (NCurMax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCurMax);
    }
    if (NSevenTaskID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NSevenTaskID);
    }
    if (NSevenTaskValue != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NSevenTaskValue);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LongLiuShuiGold other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.LLongLiuShui != 0L) {
      LLongLiuShui = other.LLongLiuShui;
    }
    if (other.LTimeData != 0L) {
      LTimeData = other.LTimeData;
    }
    if (other.LManmonExp != 0L) {
      LManmonExp = other.LManmonExp;
    }
    if (other.NShengJiDuanWei != 0) {
      NShengJiDuanWei = other.NShengJiDuanWei;
    }
    if (other.NIsUserTopUpState != 0) {
      NIsUserTopUpState = other.NIsUserTopUpState;
    }
    if (other.NTwoSelectOneTopUpState != 0) {
      NTwoSelectOneTopUpState = other.NTwoSelectOneTopUpState;
    }
    if (other.NThreeSelectOneTopUpdate != 0) {
      NThreeSelectOneTopUpdate = other.NThreeSelectOneTopUpdate;
    }
    if (other.NChangeCurDuanWei != 0) {
      NChangeCurDuanWei = other.NChangeCurDuanWei;
    }
    if (other.NCurRank != 0) {
      NCurRank = other.NCurRank;
    }
    if (other.NCurMax != 0) {
      NCurMax = other.NCurMax;
    }
    if (other.NSevenTaskID != 0) {
      NSevenTaskID = other.NSevenTaskID;
    }
    if (other.NSevenTaskValue != 0L) {
      NSevenTaskValue = other.NSevenTaskValue;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          LLongLiuShui = input.ReadInt64();
          break;
        }
        case 24: {
          LTimeData = input.ReadInt64();
          break;
        }
        case 32: {
          LManmonExp = input.ReadInt64();
          break;
        }
        case 40: {
          NShengJiDuanWei = input.ReadInt32();
          break;
        }
        case 48: {
          NIsUserTopUpState = input.ReadInt32();
          break;
        }
        case 56: {
          NTwoSelectOneTopUpState = input.ReadInt32();
          break;
        }
        case 64: {
          NThreeSelectOneTopUpdate = input.ReadInt32();
          break;
        }
        case 72: {
          NChangeCurDuanWei = input.ReadInt32();
          break;
        }
        case 80: {
          NCurRank = input.ReadInt32();
          break;
        }
        case 88: {
          NCurMax = input.ReadInt32();
          break;
        }
        case 96: {
          NSevenTaskID = input.ReadInt32();
          break;
        }
        case 104: {
          NSevenTaskValue = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class GetFishLuckyDrawResponse : pb::IMessage<GetFishLuckyDrawResponse> {
  private static readonly pb::MessageParser<GetFishLuckyDrawResponse> _parser = new pb::MessageParser<GetFishLuckyDrawResponse>(() => new GetFishLuckyDrawResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetFishLuckyDrawResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[215]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFishLuckyDrawResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFishLuckyDrawResponse(GetFishLuckyDrawResponse other) : this() {
    result_ = other.result_;
    type_ = other.type_;
    prop_ = other.prop_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFishLuckyDrawResponse Clone() {
    return new GetFishLuckyDrawResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "prop" field.</summary>
  public const int PropFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_PropertyEx> _repeated_prop_codec
      = pb::FieldCodec.ForMessage(26, global::PB_PropertyEx.Parser);
  private readonly pbc::RepeatedField<global::PB_PropertyEx> prop_ = new pbc::RepeatedField<global::PB_PropertyEx>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_PropertyEx> Prop {
    get { return prop_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetFishLuckyDrawResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetFishLuckyDrawResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Type != other.Type) return false;
    if(!prop_.Equals(other.prop_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    hash ^= prop_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    prop_.WriteTo(output, _repeated_prop_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    size += prop_.CalculateSize(_repeated_prop_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetFishLuckyDrawResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    prop_.Add(other.prop_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          prop_.AddEntriesFrom(input, _repeated_prop_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class LongChangeLiuShuiTime : pb::IMessage<LongChangeLiuShuiTime> {
  private static readonly pb::MessageParser<LongChangeLiuShuiTime> _parser = new pb::MessageParser<LongChangeLiuShuiTime>(() => new LongChangeLiuShuiTime());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LongChangeLiuShuiTime> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[216]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LongChangeLiuShuiTime() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LongChangeLiuShuiTime(LongChangeLiuShuiTime other) : this() {
    lUserID_ = other.lUserID_;
    lDiamond_ = other.lDiamond_;
    nReuslt_ = other.nReuslt_;
    nTimeData_ = other.nTimeData_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LongChangeLiuShuiTime Clone() {
    return new LongChangeLiuShuiTime(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "lDiamond" field.</summary>
  public const int LDiamondFieldNumber = 2;
  private int lDiamond_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LDiamond {
    get { return lDiamond_; }
    set {
      lDiamond_ = value;
    }
  }

  /// <summary>Field number for the "nReuslt" field.</summary>
  public const int NReusltFieldNumber = 3;
  private int nReuslt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NReuslt {
    get { return nReuslt_; }
    set {
      nReuslt_ = value;
    }
  }

  /// <summary>Field number for the "nTimeData" field.</summary>
  public const int NTimeDataFieldNumber = 4;
  private long nTimeData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NTimeData {
    get { return nTimeData_; }
    set {
      nTimeData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LongChangeLiuShuiTime);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LongChangeLiuShuiTime other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (LDiamond != other.LDiamond) return false;
    if (NReuslt != other.NReuslt) return false;
    if (NTimeData != other.NTimeData) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (LDiamond != 0) hash ^= LDiamond.GetHashCode();
    if (NReuslt != 0) hash ^= NReuslt.GetHashCode();
    if (NTimeData != 0L) hash ^= NTimeData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (LDiamond != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LDiamond);
    }
    if (NReuslt != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NReuslt);
    }
    if (NTimeData != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(NTimeData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (LDiamond != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LDiamond);
    }
    if (NReuslt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NReuslt);
    }
    if (NTimeData != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NTimeData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LongChangeLiuShuiTime other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.LDiamond != 0) {
      LDiamond = other.LDiamond;
    }
    if (other.NReuslt != 0) {
      NReuslt = other.NReuslt;
    }
    if (other.NTimeData != 0L) {
      NTimeData = other.NTimeData;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          LDiamond = input.ReadInt32();
          break;
        }
        case 24: {
          NReuslt = input.ReadInt32();
          break;
        }
        case 32: {
          NTimeData = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class CancelSkill : pb::IMessage<CancelSkill> {
  private static readonly pb::MessageParser<CancelSkill> _parser = new pb::MessageParser<CancelSkill>(() => new CancelSkill());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CancelSkill> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[217]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelSkill() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelSkill(CancelSkill other) : this() {
    lUserID_ = other.lUserID_;
    nState_ = other.nState_;
    skillID_ = other.skillID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CancelSkill Clone() {
    return new CancelSkill(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "nState" field.</summary>
  public const int NStateFieldNumber = 2;
  private int nState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NState {
    get { return nState_; }
    set {
      nState_ = value;
    }
  }

  /// <summary>Field number for the "skillID" field.</summary>
  public const int SkillIDFieldNumber = 3;
  private int skillID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillID {
    get { return skillID_; }
    set {
      skillID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CancelSkill);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CancelSkill other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (NState != other.NState) return false;
    if (SkillID != other.SkillID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (NState != 0) hash ^= NState.GetHashCode();
    if (SkillID != 0) hash ^= SkillID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (NState != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NState);
    }
    if (SkillID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SkillID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (NState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NState);
    }
    if (SkillID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CancelSkill other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.NState != 0) {
      NState = other.NState;
    }
    if (other.SkillID != 0) {
      SkillID = other.SkillID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          NState = input.ReadInt32();
          break;
        }
        case 24: {
          SkillID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class UserRankInfo : pb::IMessage<UserRankInfo> {
  private static readonly pb::MessageParser<UserRankInfo> _parser = new pb::MessageParser<UserRankInfo>(() => new UserRankInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserRankInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[218]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRankInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRankInfo(UserRankInfo other) : this() {
    lUserID_ = other.lUserID_;
    nRank_ = other.nRank_;
    vip_ = other.vip_;
    longCard_ = other.longCard_;
    nGold_ = other.nGold_;
    rewardGold_ = other.rewardGold_;
    nickname_ = other.nickname_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRankInfo Clone() {
    return new UserRankInfo(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "nRank" field.</summary>
  public const int NRankFieldNumber = 2;
  private int nRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NRank {
    get { return nRank_; }
    set {
      nRank_ = value;
    }
  }

  /// <summary>Field number for the "vip" field.</summary>
  public const int VipFieldNumber = 3;
  private int vip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vip {
    get { return vip_; }
    set {
      vip_ = value;
    }
  }

  /// <summary>Field number for the "longCard" field.</summary>
  public const int LongCardFieldNumber = 4;
  private int longCard_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LongCard {
    get { return longCard_; }
    set {
      longCard_ = value;
    }
  }

  /// <summary>Field number for the "nGold" field.</summary>
  public const int NGoldFieldNumber = 5;
  private long nGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NGold {
    get { return nGold_; }
    set {
      nGold_ = value;
    }
  }

  /// <summary>Field number for the "rewardGold" field.</summary>
  public const int RewardGoldFieldNumber = 6;
  private long rewardGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RewardGold {
    get { return rewardGold_; }
    set {
      rewardGold_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 7;
  private pb::ByteString nickname_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserRankInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserRankInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (NRank != other.NRank) return false;
    if (Vip != other.Vip) return false;
    if (LongCard != other.LongCard) return false;
    if (NGold != other.NGold) return false;
    if (RewardGold != other.RewardGold) return false;
    if (Nickname != other.Nickname) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (NRank != 0) hash ^= NRank.GetHashCode();
    if (Vip != 0) hash ^= Vip.GetHashCode();
    if (LongCard != 0) hash ^= LongCard.GetHashCode();
    if (NGold != 0L) hash ^= NGold.GetHashCode();
    if (RewardGold != 0L) hash ^= RewardGold.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (NRank != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NRank);
    }
    if (Vip != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Vip);
    }
    if (LongCard != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LongCard);
    }
    if (NGold != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(NGold);
    }
    if (RewardGold != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(RewardGold);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(58);
      output.WriteBytes(Nickname);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (NRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NRank);
    }
    if (Vip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
    }
    if (LongCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongCard);
    }
    if (NGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NGold);
    }
    if (RewardGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RewardGold);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nickname);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserRankInfo other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.NRank != 0) {
      NRank = other.NRank;
    }
    if (other.Vip != 0) {
      Vip = other.Vip;
    }
    if (other.LongCard != 0) {
      LongCard = other.LongCard;
    }
    if (other.NGold != 0L) {
      NGold = other.NGold;
    }
    if (other.RewardGold != 0L) {
      RewardGold = other.RewardGold;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          NRank = input.ReadInt32();
          break;
        }
        case 24: {
          Vip = input.ReadInt32();
          break;
        }
        case 32: {
          LongCard = input.ReadInt32();
          break;
        }
        case 40: {
          NGold = input.ReadInt64();
          break;
        }
        case 48: {
          RewardGold = input.ReadInt64();
          break;
        }
        case 58: {
          Nickname = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class MamonMaxWinCount : pb::IMessage<MamonMaxWinCount> {
  private static readonly pb::MessageParser<MamonMaxWinCount> _parser = new pb::MessageParser<MamonMaxWinCount>(() => new MamonMaxWinCount());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MamonMaxWinCount> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[219]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MamonMaxWinCount() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MamonMaxWinCount(MamonMaxWinCount other) : this() {
    luserID_ = other.luserID_;
    maxwinCount_ = other.maxwinCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MamonMaxWinCount Clone() {
    return new MamonMaxWinCount(this);
  }

  /// <summary>Field number for the "luserID" field.</summary>
  public const int LuserIDFieldNumber = 1;
  private long luserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LuserID {
    get { return luserID_; }
    set {
      luserID_ = value;
    }
  }

  /// <summary>Field number for the "maxwinCount" field.</summary>
  public const int MaxwinCountFieldNumber = 2;
  private int maxwinCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxwinCount {
    get { return maxwinCount_; }
    set {
      maxwinCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MamonMaxWinCount);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MamonMaxWinCount other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LuserID != other.LuserID) return false;
    if (MaxwinCount != other.MaxwinCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LuserID != 0L) hash ^= LuserID.GetHashCode();
    if (MaxwinCount != 0) hash ^= MaxwinCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LuserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LuserID);
    }
    if (MaxwinCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MaxwinCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LuserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LuserID);
    }
    if (MaxwinCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxwinCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MamonMaxWinCount other) {
    if (other == null) {
      return;
    }
    if (other.LuserID != 0L) {
      LuserID = other.LuserID;
    }
    if (other.MaxwinCount != 0) {
      MaxwinCount = other.MaxwinCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LuserID = input.ReadInt64();
          break;
        }
        case 16: {
          MaxwinCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PropertyEx : pb::IMessage<PB_PropertyEx> {
  private static readonly pb::MessageParser<PB_PropertyEx> _parser = new pb::MessageParser<PB_PropertyEx>(() => new PB_PropertyEx());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PropertyEx> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[220]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PropertyEx() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PropertyEx(PB_PropertyEx other) : this() {
    propertyType_ = other.propertyType_;
    sum_ = other.sum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PropertyEx Clone() {
    return new PB_PropertyEx(this);
  }

  /// <summary>Field number for the "property_type" field.</summary>
  public const int PropertyTypeFieldNumber = 1;
  private int propertyType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropertyType {
    get { return propertyType_; }
    set {
      propertyType_ = value;
    }
  }

  /// <summary>Field number for the "sum" field.</summary>
  public const int SumFieldNumber = 2;
  private long sum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Sum {
    get { return sum_; }
    set {
      sum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PropertyEx);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PropertyEx other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropertyType != other.PropertyType) return false;
    if (Sum != other.Sum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropertyType != 0) hash ^= PropertyType.GetHashCode();
    if (Sum != 0L) hash ^= Sum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropertyType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PropertyType);
    }
    if (Sum != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Sum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropertyType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyType);
    }
    if (Sum != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PropertyEx other) {
    if (other == null) {
      return;
    }
    if (other.PropertyType != 0) {
      PropertyType = other.PropertyType;
    }
    if (other.Sum != 0L) {
      Sum = other.Sum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PropertyType = input.ReadInt32();
          break;
        }
        case 16: {
          Sum = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ChangeUserGold : pb::IMessage<ChangeUserGold> {
  private static readonly pb::MessageParser<ChangeUserGold> _parser = new pb::MessageParser<ChangeUserGold>(() => new ChangeUserGold());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeUserGold> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[221]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeUserGold() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeUserGold(ChangeUserGold other) : this() {
    lUserID_ = other.lUserID_;
    propertyID_ = other.propertyID_;
    lCount_ = other.lCount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeUserGold Clone() {
    return new ChangeUserGold(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private int lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "propertyID" field.</summary>
  public const int PropertyIDFieldNumber = 2;
  private int propertyID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropertyID {
    get { return propertyID_; }
    set {
      propertyID_ = value;
    }
  }

  /// <summary>Field number for the "lCount" field.</summary>
  public const int LCountFieldNumber = 3;
  private long lCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LCount {
    get { return lCount_; }
    set {
      lCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeUserGold);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeUserGold other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (PropertyID != other.PropertyID) return false;
    if (LCount != other.LCount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0) hash ^= LUserID.GetHashCode();
    if (PropertyID != 0) hash ^= PropertyID.GetHashCode();
    if (LCount != 0L) hash ^= LCount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LUserID);
    }
    if (PropertyID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PropertyID);
    }
    if (LCount != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(LCount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LUserID);
    }
    if (PropertyID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyID);
    }
    if (LCount != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LCount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeUserGold other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0) {
      LUserID = other.LUserID;
    }
    if (other.PropertyID != 0) {
      PropertyID = other.PropertyID;
    }
    if (other.LCount != 0L) {
      LCount = other.LCount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt32();
          break;
        }
        case 16: {
          PropertyID = input.ReadInt32();
          break;
        }
        case 24: {
          LCount = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_PropertyEs : pb::IMessage<PB_PropertyEs> {
  private static readonly pb::MessageParser<PB_PropertyEs> _parser = new pb::MessageParser<PB_PropertyEs>(() => new PB_PropertyEs());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_PropertyEs> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[222]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PropertyEs() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PropertyEs(PB_PropertyEs other) : this() {
    propertyType_ = other.propertyType_;
    sum_ = other.sum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_PropertyEs Clone() {
    return new PB_PropertyEs(this);
  }

  /// <summary>Field number for the "property_type" field.</summary>
  public const int PropertyTypeFieldNumber = 1;
  private int propertyType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PropertyType {
    get { return propertyType_; }
    set {
      propertyType_ = value;
    }
  }

  /// <summary>Field number for the "sum" field.</summary>
  public const int SumFieldNumber = 2;
  private long sum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Sum {
    get { return sum_; }
    set {
      sum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_PropertyEs);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_PropertyEs other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropertyType != other.PropertyType) return false;
    if (Sum != other.Sum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropertyType != 0) hash ^= PropertyType.GetHashCode();
    if (Sum != 0L) hash ^= Sum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropertyType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PropertyType);
    }
    if (Sum != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Sum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropertyType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyType);
    }
    if (Sum != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_PropertyEs other) {
    if (other == null) {
      return;
    }
    if (other.PropertyType != 0) {
      PropertyType = other.PropertyType;
    }
    if (other.Sum != 0L) {
      Sum = other.Sum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PropertyType = input.ReadInt32();
          break;
        }
        case 16: {
          Sum = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class NotifyBossRoomMatchInfo : pb::IMessage<NotifyBossRoomMatchInfo> {
  private static readonly pb::MessageParser<NotifyBossRoomMatchInfo> _parser = new pb::MessageParser<NotifyBossRoomMatchInfo>(() => new NotifyBossRoomMatchInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NotifyBossRoomMatchInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[223]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyBossRoomMatchInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyBossRoomMatchInfo(NotifyBossRoomMatchInfo other) : this() {
    nType_ = other.nType_;
    content_ = other.content_;
    selfGold_ = other.selfGold_;
    roomArrayID_ = other.roomArrayID_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyBossRoomMatchInfo Clone() {
    return new NotifyBossRoomMatchInfo(this);
  }

  /// <summary>Field number for the "nType" field.</summary>
  public const int NTypeFieldNumber = 1;
  private int nType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NType {
    get { return nType_; }
    set {
      nType_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private pb::ByteString content_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "selfGold" field.</summary>
  public const int SelfGoldFieldNumber = 3;
  private long selfGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SelfGold {
    get { return selfGold_; }
    set {
      selfGold_ = value;
    }
  }

  /// <summary>Field number for the "roomArrayID" field.</summary>
  public const int RoomArrayIDFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_roomArrayID_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> roomArrayID_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RoomArrayID {
    get { return roomArrayID_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NotifyBossRoomMatchInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NotifyBossRoomMatchInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NType != other.NType) return false;
    if (Content != other.Content) return false;
    if (SelfGold != other.SelfGold) return false;
    if(!roomArrayID_.Equals(other.roomArrayID_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NType != 0) hash ^= NType.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (SelfGold != 0L) hash ^= SelfGold.GetHashCode();
    hash ^= roomArrayID_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NType);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Content);
    }
    if (SelfGold != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(SelfGold);
    }
    roomArrayID_.WriteTo(output, _repeated_roomArrayID_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NType);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
    }
    if (SelfGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfGold);
    }
    size += roomArrayID_.CalculateSize(_repeated_roomArrayID_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NotifyBossRoomMatchInfo other) {
    if (other == null) {
      return;
    }
    if (other.NType != 0) {
      NType = other.NType;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.SelfGold != 0L) {
      SelfGold = other.SelfGold;
    }
    roomArrayID_.Add(other.roomArrayID_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          NType = input.ReadInt32();
          break;
        }
        case 18: {
          Content = input.ReadBytes();
          break;
        }
        case 24: {
          SelfGold = input.ReadInt64();
          break;
        }
        case 34:
        case 32: {
          roomArrayID_.AddEntriesFrom(input, _repeated_roomArrayID_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class NotifySignUp : pb::IMessage<NotifySignUp> {
  private static readonly pb::MessageParser<NotifySignUp> _parser = new pb::MessageParser<NotifySignUp>(() => new NotifySignUp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NotifySignUp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[224]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifySignUp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifySignUp(NotifySignUp other) : this() {
    nType_ = other.nType_;
    nRoomIndex_ = other.nRoomIndex_;
    nGameType_ = other.nGameType_;
    signUpGold_ = other.signUpGold_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifySignUp Clone() {
    return new NotifySignUp(this);
  }

  /// <summary>Field number for the "nType" field.</summary>
  public const int NTypeFieldNumber = 1;
  private int nType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NType {
    get { return nType_; }
    set {
      nType_ = value;
    }
  }

  /// <summary>Field number for the "nRoomIndex" field.</summary>
  public const int NRoomIndexFieldNumber = 2;
  private int nRoomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NRoomIndex {
    get { return nRoomIndex_; }
    set {
      nRoomIndex_ = value;
    }
  }

  /// <summary>Field number for the "nGameType" field.</summary>
  public const int NGameTypeFieldNumber = 3;
  private int nGameType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NGameType {
    get { return nGameType_; }
    set {
      nGameType_ = value;
    }
  }

  /// <summary>Field number for the "signUpGold" field.</summary>
  public const int SignUpGoldFieldNumber = 4;
  private long signUpGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SignUpGold {
    get { return signUpGold_; }
    set {
      signUpGold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NotifySignUp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NotifySignUp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NType != other.NType) return false;
    if (NRoomIndex != other.NRoomIndex) return false;
    if (NGameType != other.NGameType) return false;
    if (SignUpGold != other.SignUpGold) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NType != 0) hash ^= NType.GetHashCode();
    if (NRoomIndex != 0) hash ^= NRoomIndex.GetHashCode();
    if (NGameType != 0) hash ^= NGameType.GetHashCode();
    if (SignUpGold != 0L) hash ^= SignUpGold.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NType);
    }
    if (NRoomIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NRoomIndex);
    }
    if (NGameType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NGameType);
    }
    if (SignUpGold != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(SignUpGold);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NType);
    }
    if (NRoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NRoomIndex);
    }
    if (NGameType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NGameType);
    }
    if (SignUpGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SignUpGold);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NotifySignUp other) {
    if (other == null) {
      return;
    }
    if (other.NType != 0) {
      NType = other.NType;
    }
    if (other.NRoomIndex != 0) {
      NRoomIndex = other.NRoomIndex;
    }
    if (other.NGameType != 0) {
      NGameType = other.NGameType;
    }
    if (other.SignUpGold != 0L) {
      SignUpGold = other.SignUpGold;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          NType = input.ReadInt32();
          break;
        }
        case 16: {
          NRoomIndex = input.ReadInt32();
          break;
        }
        case 24: {
          NGameType = input.ReadInt32();
          break;
        }
        case 32: {
          SignUpGold = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class NotifyEnterBossRoomMessage : pb::IMessage<NotifyEnterBossRoomMessage> {
  private static readonly pb::MessageParser<NotifyEnterBossRoomMessage> _parser = new pb::MessageParser<NotifyEnterBossRoomMessage>(() => new NotifyEnterBossRoomMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NotifyEnterBossRoomMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[225]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyEnterBossRoomMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyEnterBossRoomMessage(NotifyEnterBossRoomMessage other) : this() {
    nType_ = other.nType_;
    nRoomIndex_ = other.nRoomIndex_;
    modifyNick_ = other.modifyNick_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NotifyEnterBossRoomMessage Clone() {
    return new NotifyEnterBossRoomMessage(this);
  }

  /// <summary>Field number for the "nType" field.</summary>
  public const int NTypeFieldNumber = 1;
  private int nType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NType {
    get { return nType_; }
    set {
      nType_ = value;
    }
  }

  /// <summary>Field number for the "nRoomIndex" field.</summary>
  public const int NRoomIndexFieldNumber = 2;
  private int nRoomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NRoomIndex {
    get { return nRoomIndex_; }
    set {
      nRoomIndex_ = value;
    }
  }

  /// <summary>Field number for the "modifyNick" field.</summary>
  public const int ModifyNickFieldNumber = 3;
  private pb::ByteString modifyNick_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ModifyNick {
    get { return modifyNick_; }
    set {
      modifyNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NotifyEnterBossRoomMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NotifyEnterBossRoomMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NType != other.NType) return false;
    if (NRoomIndex != other.NRoomIndex) return false;
    if (ModifyNick != other.ModifyNick) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NType != 0) hash ^= NType.GetHashCode();
    if (NRoomIndex != 0) hash ^= NRoomIndex.GetHashCode();
    if (ModifyNick.Length != 0) hash ^= ModifyNick.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NType);
    }
    if (NRoomIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NRoomIndex);
    }
    if (ModifyNick.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(ModifyNick);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NType);
    }
    if (NRoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NRoomIndex);
    }
    if (ModifyNick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ModifyNick);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NotifyEnterBossRoomMessage other) {
    if (other == null) {
      return;
    }
    if (other.NType != 0) {
      NType = other.NType;
    }
    if (other.NRoomIndex != 0) {
      NRoomIndex = other.NRoomIndex;
    }
    if (other.ModifyNick.Length != 0) {
      ModifyNick = other.ModifyNick;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          NType = input.ReadInt32();
          break;
        }
        case 16: {
          NRoomIndex = input.ReadInt32();
          break;
        }
        case 26: {
          ModifyNick = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class UserBossKillRankInfo : pb::IMessage<UserBossKillRankInfo> {
  private static readonly pb::MessageParser<UserBossKillRankInfo> _parser = new pb::MessageParser<UserBossKillRankInfo>(() => new UserBossKillRankInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserBossKillRankInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[226]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserBossKillRankInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserBossKillRankInfo(UserBossKillRankInfo other) : this() {
    lUserID_ = other.lUserID_;
    nRank_ = other.nRank_;
    vip_ = other.vip_;
    longCard_ = other.longCard_;
    nGold_ = other.nGold_;
    nickname_ = other.nickname_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserBossKillRankInfo Clone() {
    return new UserBossKillRankInfo(this);
  }

  /// <summary>Field number for the "lUserID" field.</summary>
  public const int LUserIDFieldNumber = 1;
  private long lUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LUserID {
    get { return lUserID_; }
    set {
      lUserID_ = value;
    }
  }

  /// <summary>Field number for the "nRank" field.</summary>
  public const int NRankFieldNumber = 2;
  private int nRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NRank {
    get { return nRank_; }
    set {
      nRank_ = value;
    }
  }

  /// <summary>Field number for the "vip" field.</summary>
  public const int VipFieldNumber = 3;
  private int vip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vip {
    get { return vip_; }
    set {
      vip_ = value;
    }
  }

  /// <summary>Field number for the "longCard" field.</summary>
  public const int LongCardFieldNumber = 4;
  private int longCard_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LongCard {
    get { return longCard_; }
    set {
      longCard_ = value;
    }
  }

  /// <summary>Field number for the "nGold" field.</summary>
  public const int NGoldFieldNumber = 5;
  private long nGold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NGold {
    get { return nGold_; }
    set {
      nGold_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 6;
  private pb::ByteString nickname_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserBossKillRankInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserBossKillRankInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LUserID != other.LUserID) return false;
    if (NRank != other.NRank) return false;
    if (Vip != other.Vip) return false;
    if (LongCard != other.LongCard) return false;
    if (NGold != other.NGold) return false;
    if (Nickname != other.Nickname) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LUserID != 0L) hash ^= LUserID.GetHashCode();
    if (NRank != 0) hash ^= NRank.GetHashCode();
    if (Vip != 0) hash ^= Vip.GetHashCode();
    if (LongCard != 0) hash ^= LongCard.GetHashCode();
    if (NGold != 0L) hash ^= NGold.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LUserID != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LUserID);
    }
    if (NRank != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NRank);
    }
    if (Vip != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Vip);
    }
    if (LongCard != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LongCard);
    }
    if (NGold != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(NGold);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(50);
      output.WriteBytes(Nickname);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LUserID != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LUserID);
    }
    if (NRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NRank);
    }
    if (Vip != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
    }
    if (LongCard != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongCard);
    }
    if (NGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NGold);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nickname);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserBossKillRankInfo other) {
    if (other == null) {
      return;
    }
    if (other.LUserID != 0L) {
      LUserID = other.LUserID;
    }
    if (other.NRank != 0) {
      NRank = other.NRank;
    }
    if (other.Vip != 0) {
      Vip = other.Vip;
    }
    if (other.LongCard != 0) {
      LongCard = other.LongCard;
    }
    if (other.NGold != 0L) {
      NGold = other.NGold;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LUserID = input.ReadInt64();
          break;
        }
        case 16: {
          NRank = input.ReadInt32();
          break;
        }
        case 24: {
          Vip = input.ReadInt32();
          break;
        }
        case 32: {
          LongCard = input.ReadInt32();
          break;
        }
        case 40: {
          NGold = input.ReadInt64();
          break;
        }
        case 50: {
          Nickname = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateBossMatchTime : pb::IMessage<UpdateBossMatchTime> {
  private static readonly pb::MessageParser<UpdateBossMatchTime> _parser = new pb::MessageParser<UpdateBossMatchTime>(() => new UpdateBossMatchTime());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateBossMatchTime> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[227]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateBossMatchTime() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateBossMatchTime(UpdateBossMatchTime other) : this() {
    chaTime_ = other.chaTime_;
    startTime_ = other.startTime_;
    endTime_ = other.endTime_;
    roomIndex_ = other.roomIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateBossMatchTime Clone() {
    return new UpdateBossMatchTime(this);
  }

  /// <summary>Field number for the "chaTime" field.</summary>
  public const int ChaTimeFieldNumber = 1;
  private long chaTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChaTime {
    get { return chaTime_; }
    set {
      chaTime_ = value;
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 2;
  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  /// <summary>Field number for the "roomIndex" field.</summary>
  public const int RoomIndexFieldNumber = 4;
  private int roomIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomIndex {
    get { return roomIndex_; }
    set {
      roomIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateBossMatchTime);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateBossMatchTime other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChaTime != other.ChaTime) return false;
    if (StartTime != other.StartTime) return false;
    if (EndTime != other.EndTime) return false;
    if (RoomIndex != other.RoomIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChaTime != 0L) hash ^= ChaTime.GetHashCode();
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (RoomIndex != 0) hash ^= RoomIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ChaTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ChaTime);
    }
    if (StartTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(StartTime);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(EndTime);
    }
    if (RoomIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoomIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChaTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChaTime);
    }
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (RoomIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateBossMatchTime other) {
    if (other == null) {
      return;
    }
    if (other.ChaTime != 0L) {
      ChaTime = other.ChaTime;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    if (other.RoomIndex != 0) {
      RoomIndex = other.RoomIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ChaTime = input.ReadInt64();
          break;
        }
        case 16: {
          StartTime = input.ReadInt64();
          break;
        }
        case 24: {
          EndTime = input.ReadInt64();
          break;
        }
        case 32: {
          RoomIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class UserRankInfoArray : pb::IMessage<UserRankInfoArray> {
  private static readonly pb::MessageParser<UserRankInfoArray> _parser = new pb::MessageParser<UserRankInfoArray>(() => new UserRankInfoArray());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserRankInfoArray> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[228]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRankInfoArray() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRankInfoArray(UserRankInfoArray other) : this() {
    rankInfoArray_ = other.rankInfoArray_.Clone();
    content_ = other.content_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserRankInfoArray Clone() {
    return new UserRankInfoArray(this);
  }

  /// <summary>Field number for the "rankInfoArray" field.</summary>
  public const int RankInfoArrayFieldNumber = 1;
  private static readonly pb::FieldCodec<global::UserRankInfo> _repeated_rankInfoArray_codec
      = pb::FieldCodec.ForMessage(10, global::UserRankInfo.Parser);
  private readonly pbc::RepeatedField<global::UserRankInfo> rankInfoArray_ = new pbc::RepeatedField<global::UserRankInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UserRankInfo> RankInfoArray {
    get { return rankInfoArray_; }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private pb::ByteString content_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserRankInfoArray);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserRankInfoArray other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rankInfoArray_.Equals(other.rankInfoArray_)) return false;
    if (Content != other.Content) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rankInfoArray_.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rankInfoArray_.WriteTo(output, _repeated_rankInfoArray_codec);
    if (Content.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Content);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rankInfoArray_.CalculateSize(_repeated_rankInfoArray_codec);
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserRankInfoArray other) {
    if (other == null) {
      return;
    }
    rankInfoArray_.Add(other.rankInfoArray_);
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          rankInfoArray_.AddEntriesFrom(input, _repeated_rankInfoArray_codec);
          break;
        }
        case 18: {
          Content = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class PaiWeiSaiRankInfo : pb::IMessage<PaiWeiSaiRankInfo> {
  private static readonly pb::MessageParser<PaiWeiSaiRankInfo> _parser = new pb::MessageParser<PaiWeiSaiRankInfo>(() => new PaiWeiSaiRankInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PaiWeiSaiRankInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[229]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PaiWeiSaiRankInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PaiWeiSaiRankInfo(PaiWeiSaiRankInfo other) : this() {
    result_ = other.result_;
    duanwei_ = other.duanwei_;
    nrank_ = other.nrank_;
    isTopUp_ = other.isTopUp_;
    monthCardtype_ = other.monthCardtype_;
    bossmatchdouble_ = other.bossmatchdouble_;
    shenyutime_ = other.shenyutime_;
    shangPaiMing_ = other.shangPaiMing_;
    lishizuigao_ = other.lishizuigao_;
    qiShu_ = other.qiShu_;
    beiqizuigao_ = other.beiqizuigao_;
    rank_ = other.rank_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PaiWeiSaiRankInfo Clone() {
    return new PaiWeiSaiRankInfo(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "duanwei" field.</summary>
  public const int DuanweiFieldNumber = 2;
  private int duanwei_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Duanwei {
    get { return duanwei_; }
    set {
      duanwei_ = value;
    }
  }

  /// <summary>Field number for the "nrank" field.</summary>
  public const int NrankFieldNumber = 3;
  private int nrank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Nrank {
    get { return nrank_; }
    set {
      nrank_ = value;
    }
  }

  /// <summary>Field number for the "isTopUp" field.</summary>
  public const int IsTopUpFieldNumber = 4;
  private int isTopUp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsTopUp {
    get { return isTopUp_; }
    set {
      isTopUp_ = value;
    }
  }

  /// <summary>Field number for the "monthCardtype" field.</summary>
  public const int MonthCardtypeFieldNumber = 5;
  private int monthCardtype_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MonthCardtype {
    get { return monthCardtype_; }
    set {
      monthCardtype_ = value;
    }
  }

  /// <summary>Field number for the "bossmatchdouble" field.</summary>
  public const int BossmatchdoubleFieldNumber = 6;
  private int bossmatchdouble_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Bossmatchdouble {
    get { return bossmatchdouble_; }
    set {
      bossmatchdouble_ = value;
    }
  }

  /// <summary>Field number for the "shenyutime" field.</summary>
  public const int ShenyutimeFieldNumber = 7;
  private long shenyutime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Shenyutime {
    get { return shenyutime_; }
    set {
      shenyutime_ = value;
    }
  }

  /// <summary>Field number for the "shangPaiMing" field.</summary>
  public const int ShangPaiMingFieldNumber = 8;
  private int shangPaiMing_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShangPaiMing {
    get { return shangPaiMing_; }
    set {
      shangPaiMing_ = value;
    }
  }

  /// <summary>Field number for the "lishizuigao" field.</summary>
  public const int LishizuigaoFieldNumber = 9;
  private int lishizuigao_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Lishizuigao {
    get { return lishizuigao_; }
    set {
      lishizuigao_ = value;
    }
  }

  /// <summary>Field number for the "qiShu" field.</summary>
  public const int QiShuFieldNumber = 10;
  private int qiShu_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QiShu {
    get { return qiShu_; }
    set {
      qiShu_ = value;
    }
  }

  /// <summary>Field number for the "beiqizuigao" field.</summary>
  public const int BeiqizuigaoFieldNumber = 11;
  private int beiqizuigao_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Beiqizuigao {
    get { return beiqizuigao_; }
    set {
      beiqizuigao_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 12;
  private static readonly pb::FieldCodec<global::PB_GameRank> _repeated_rank_codec
      = pb::FieldCodec.ForMessage(98, global::PB_GameRank.Parser);
  private readonly pbc::RepeatedField<global::PB_GameRank> rank_ = new pbc::RepeatedField<global::PB_GameRank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_GameRank> Rank {
    get { return rank_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PaiWeiSaiRankInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PaiWeiSaiRankInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Duanwei != other.Duanwei) return false;
    if (Nrank != other.Nrank) return false;
    if (IsTopUp != other.IsTopUp) return false;
    if (MonthCardtype != other.MonthCardtype) return false;
    if (Bossmatchdouble != other.Bossmatchdouble) return false;
    if (Shenyutime != other.Shenyutime) return false;
    if (ShangPaiMing != other.ShangPaiMing) return false;
    if (Lishizuigao != other.Lishizuigao) return false;
    if (QiShu != other.QiShu) return false;
    if (Beiqizuigao != other.Beiqizuigao) return false;
    if(!rank_.Equals(other.rank_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Duanwei != 0) hash ^= Duanwei.GetHashCode();
    if (Nrank != 0) hash ^= Nrank.GetHashCode();
    if (IsTopUp != 0) hash ^= IsTopUp.GetHashCode();
    if (MonthCardtype != 0) hash ^= MonthCardtype.GetHashCode();
    if (Bossmatchdouble != 0) hash ^= Bossmatchdouble.GetHashCode();
    if (Shenyutime != 0L) hash ^= Shenyutime.GetHashCode();
    if (ShangPaiMing != 0) hash ^= ShangPaiMing.GetHashCode();
    if (Lishizuigao != 0) hash ^= Lishizuigao.GetHashCode();
    if (QiShu != 0) hash ^= QiShu.GetHashCode();
    if (Beiqizuigao != 0) hash ^= Beiqizuigao.GetHashCode();
    hash ^= rank_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Duanwei != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Duanwei);
    }
    if (Nrank != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Nrank);
    }
    if (IsTopUp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(IsTopUp);
    }
    if (MonthCardtype != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(MonthCardtype);
    }
    if (Bossmatchdouble != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Bossmatchdouble);
    }
    if (Shenyutime != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(Shenyutime);
    }
    if (ShangPaiMing != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(ShangPaiMing);
    }
    if (Lishizuigao != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Lishizuigao);
    }
    if (QiShu != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(QiShu);
    }
    if (Beiqizuigao != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Beiqizuigao);
    }
    rank_.WriteTo(output, _repeated_rank_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Duanwei != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duanwei);
    }
    if (Nrank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nrank);
    }
    if (IsTopUp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsTopUp);
    }
    if (MonthCardtype != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonthCardtype);
    }
    if (Bossmatchdouble != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bossmatchdouble);
    }
    if (Shenyutime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Shenyutime);
    }
    if (ShangPaiMing != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShangPaiMing);
    }
    if (Lishizuigao != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lishizuigao);
    }
    if (QiShu != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QiShu);
    }
    if (Beiqizuigao != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Beiqizuigao);
    }
    size += rank_.CalculateSize(_repeated_rank_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PaiWeiSaiRankInfo other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Duanwei != 0) {
      Duanwei = other.Duanwei;
    }
    if (other.Nrank != 0) {
      Nrank = other.Nrank;
    }
    if (other.IsTopUp != 0) {
      IsTopUp = other.IsTopUp;
    }
    if (other.MonthCardtype != 0) {
      MonthCardtype = other.MonthCardtype;
    }
    if (other.Bossmatchdouble != 0) {
      Bossmatchdouble = other.Bossmatchdouble;
    }
    if (other.Shenyutime != 0L) {
      Shenyutime = other.Shenyutime;
    }
    if (other.ShangPaiMing != 0) {
      ShangPaiMing = other.ShangPaiMing;
    }
    if (other.Lishizuigao != 0) {
      Lishizuigao = other.Lishizuigao;
    }
    if (other.QiShu != 0) {
      QiShu = other.QiShu;
    }
    if (other.Beiqizuigao != 0) {
      Beiqizuigao = other.Beiqizuigao;
    }
    rank_.Add(other.rank_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Duanwei = input.ReadInt32();
          break;
        }
        case 24: {
          Nrank = input.ReadInt32();
          break;
        }
        case 32: {
          IsTopUp = input.ReadInt32();
          break;
        }
        case 40: {
          MonthCardtype = input.ReadInt32();
          break;
        }
        case 48: {
          Bossmatchdouble = input.ReadInt32();
          break;
        }
        case 56: {
          Shenyutime = input.ReadInt64();
          break;
        }
        case 64: {
          ShangPaiMing = input.ReadInt32();
          break;
        }
        case 72: {
          Lishizuigao = input.ReadInt32();
          break;
        }
        case 80: {
          QiShu = input.ReadInt32();
          break;
        }
        case 88: {
          Beiqizuigao = input.ReadInt32();
          break;
        }
        case 98: {
          rank_.AddEntriesFrom(input, _repeated_rank_codec);
          break;
        }
      }
    }
  }
}

public sealed partial class RongYuDianTangkInfo : pb::IMessage<RongYuDianTangkInfo> {
  private static readonly pb::MessageParser<RongYuDianTangkInfo> _parser = new pb::MessageParser<RongYuDianTangkInfo>(() => new RongYuDianTangkInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RongYuDianTangkInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[230]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RongYuDianTangkInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RongYuDianTangkInfo(RongYuDianTangkInfo other) : this() {
    result_ = other.result_;
    hotprizepool_ = other.hotprizepool_;
    rank_ = other.rank_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RongYuDianTangkInfo Clone() {
    return new RongYuDianTangkInfo(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "hotprizepool" field.</summary>
  public const int HotprizepoolFieldNumber = 2;
  private long hotprizepool_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Hotprizepool {
    get { return hotprizepool_; }
    set {
      hotprizepool_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_GameRank> _repeated_rank_codec
      = pb::FieldCodec.ForMessage(26, global::PB_GameRank.Parser);
  private readonly pbc::RepeatedField<global::PB_GameRank> rank_ = new pbc::RepeatedField<global::PB_GameRank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_GameRank> Rank {
    get { return rank_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RongYuDianTangkInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RongYuDianTangkInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Hotprizepool != other.Hotprizepool) return false;
    if(!rank_.Equals(other.rank_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Hotprizepool != 0L) hash ^= Hotprizepool.GetHashCode();
    hash ^= rank_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Hotprizepool != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Hotprizepool);
    }
    rank_.WriteTo(output, _repeated_rank_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Hotprizepool != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hotprizepool);
    }
    size += rank_.CalculateSize(_repeated_rank_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RongYuDianTangkInfo other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Hotprizepool != 0L) {
      Hotprizepool = other.Hotprizepool;
    }
    rank_.Add(other.rank_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Hotprizepool = input.ReadInt64();
          break;
        }
        case 26: {
          rank_.AddEntriesFrom(input, _repeated_rank_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GetPaiWeiSaiReward : pb::IMessage<GetPaiWeiSaiReward> {
  private static readonly pb::MessageParser<GetPaiWeiSaiReward> _parser = new pb::MessageParser<GetPaiWeiSaiReward>(() => new GetPaiWeiSaiReward());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetPaiWeiSaiReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[231]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPaiWeiSaiReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPaiWeiSaiReward(GetPaiWeiSaiReward other) : this() {
    rewardIndex_ = other.rewardIndex_;
    rewardState_ = other.rewardState_;
    curCatchFishNum_ = other.curCatchFishNum_;
    maxCatchFishNum_ = other.maxCatchFishNum_;
    rewardData_ = other.rewardData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPaiWeiSaiReward Clone() {
    return new GetPaiWeiSaiReward(this);
  }

  /// <summary>Field number for the "rewardIndex" field.</summary>
  public const int RewardIndexFieldNumber = 1;
  private int rewardIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardIndex {
    get { return rewardIndex_; }
    set {
      rewardIndex_ = value;
    }
  }

  /// <summary>Field number for the "rewardState" field.</summary>
  public const int RewardStateFieldNumber = 2;
  private int rewardState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardState {
    get { return rewardState_; }
    set {
      rewardState_ = value;
    }
  }

  /// <summary>Field number for the "curCatchFishNum" field.</summary>
  public const int CurCatchFishNumFieldNumber = 3;
  private int curCatchFishNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurCatchFishNum {
    get { return curCatchFishNum_; }
    set {
      curCatchFishNum_ = value;
    }
  }

  /// <summary>Field number for the "maxCatchFishNum" field.</summary>
  public const int MaxCatchFishNumFieldNumber = 4;
  private int maxCatchFishNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxCatchFishNum {
    get { return maxCatchFishNum_; }
    set {
      maxCatchFishNum_ = value;
    }
  }

  /// <summary>Field number for the "rewardData" field.</summary>
  public const int RewardDataFieldNumber = 5;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_rewardData_codec
      = pb::FieldCodec.ForMessage(42, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> rewardData_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> RewardData {
    get { return rewardData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetPaiWeiSaiReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetPaiWeiSaiReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RewardIndex != other.RewardIndex) return false;
    if (RewardState != other.RewardState) return false;
    if (CurCatchFishNum != other.CurCatchFishNum) return false;
    if (MaxCatchFishNum != other.MaxCatchFishNum) return false;
    if(!rewardData_.Equals(other.rewardData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RewardIndex != 0) hash ^= RewardIndex.GetHashCode();
    if (RewardState != 0) hash ^= RewardState.GetHashCode();
    if (CurCatchFishNum != 0) hash ^= CurCatchFishNum.GetHashCode();
    if (MaxCatchFishNum != 0) hash ^= MaxCatchFishNum.GetHashCode();
    hash ^= rewardData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RewardIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RewardIndex);
    }
    if (RewardState != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RewardState);
    }
    if (CurCatchFishNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurCatchFishNum);
    }
    if (MaxCatchFishNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(MaxCatchFishNum);
    }
    rewardData_.WriteTo(output, _repeated_rewardData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RewardIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardIndex);
    }
    if (RewardState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
    }
    if (CurCatchFishNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurCatchFishNum);
    }
    if (MaxCatchFishNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCatchFishNum);
    }
    size += rewardData_.CalculateSize(_repeated_rewardData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetPaiWeiSaiReward other) {
    if (other == null) {
      return;
    }
    if (other.RewardIndex != 0) {
      RewardIndex = other.RewardIndex;
    }
    if (other.RewardState != 0) {
      RewardState = other.RewardState;
    }
    if (other.CurCatchFishNum != 0) {
      CurCatchFishNum = other.CurCatchFishNum;
    }
    if (other.MaxCatchFishNum != 0) {
      MaxCatchFishNum = other.MaxCatchFishNum;
    }
    rewardData_.Add(other.rewardData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RewardIndex = input.ReadInt32();
          break;
        }
        case 16: {
          RewardState = input.ReadInt32();
          break;
        }
        case 24: {
          CurCatchFishNum = input.ReadInt32();
          break;
        }
        case 32: {
          MaxCatchFishNum = input.ReadInt32();
          break;
        }
        case 42: {
          rewardData_.AddEntriesFrom(input, _repeated_rewardData_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerPaiWeiSaiRewardInfo : pb::IMessage<PlayerPaiWeiSaiRewardInfo> {
  private static readonly pb::MessageParser<PlayerPaiWeiSaiRewardInfo> _parser = new pb::MessageParser<PlayerPaiWeiSaiRewardInfo>(() => new PlayerPaiWeiSaiRewardInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPaiWeiSaiRewardInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[232]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPaiWeiSaiRewardInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPaiWeiSaiRewardInfo(PlayerPaiWeiSaiRewardInfo other) : this() {
    rewardList_ = other.rewardList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPaiWeiSaiRewardInfo Clone() {
    return new PlayerPaiWeiSaiRewardInfo(this);
  }

  /// <summary>Field number for the "rewardList" field.</summary>
  public const int RewardListFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_rewardList_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> rewardList_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RewardList {
    get { return rewardList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPaiWeiSaiRewardInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPaiWeiSaiRewardInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rewardList_.Equals(other.rewardList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rewardList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rewardList_.WriteTo(output, _repeated_rewardList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rewardList_.CalculateSize(_repeated_rewardList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPaiWeiSaiRewardInfo other) {
    if (other == null) {
      return;
    }
    rewardList_.Add(other.rewardList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GetTopUpGiftBagStateNew : pb::IMessage<GetTopUpGiftBagStateNew> {
  private static readonly pb::MessageParser<GetTopUpGiftBagStateNew> _parser = new pb::MessageParser<GetTopUpGiftBagStateNew>(() => new GetTopUpGiftBagStateNew());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetTopUpGiftBagStateNew> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[233]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetTopUpGiftBagStateNew() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetTopUpGiftBagStateNew(GetTopUpGiftBagStateNew other) : this() {
    oneGiftBagState_ = other.oneGiftBagState_;
    twoSelectOneBagState_ = other.twoSelectOneBagState_;
    threeSelectOneBagState_ = other.threeSelectOneBagState_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetTopUpGiftBagStateNew Clone() {
    return new GetTopUpGiftBagStateNew(this);
  }

  /// <summary>Field number for the "one_giftBagState" field.</summary>
  public const int OneGiftBagStateFieldNumber = 1;
  private int oneGiftBagState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OneGiftBagState {
    get { return oneGiftBagState_; }
    set {
      oneGiftBagState_ = value;
    }
  }

  /// <summary>Field number for the "two_select_oneBagState" field.</summary>
  public const int TwoSelectOneBagStateFieldNumber = 2;
  private int twoSelectOneBagState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TwoSelectOneBagState {
    get { return twoSelectOneBagState_; }
    set {
      twoSelectOneBagState_ = value;
    }
  }

  /// <summary>Field number for the "three_select_oneBagState" field.</summary>
  public const int ThreeSelectOneBagStateFieldNumber = 3;
  private int threeSelectOneBagState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThreeSelectOneBagState {
    get { return threeSelectOneBagState_; }
    set {
      threeSelectOneBagState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetTopUpGiftBagStateNew);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetTopUpGiftBagStateNew other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OneGiftBagState != other.OneGiftBagState) return false;
    if (TwoSelectOneBagState != other.TwoSelectOneBagState) return false;
    if (ThreeSelectOneBagState != other.ThreeSelectOneBagState) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OneGiftBagState != 0) hash ^= OneGiftBagState.GetHashCode();
    if (TwoSelectOneBagState != 0) hash ^= TwoSelectOneBagState.GetHashCode();
    if (ThreeSelectOneBagState != 0) hash ^= ThreeSelectOneBagState.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OneGiftBagState != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OneGiftBagState);
    }
    if (TwoSelectOneBagState != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TwoSelectOneBagState);
    }
    if (ThreeSelectOneBagState != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ThreeSelectOneBagState);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OneGiftBagState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OneGiftBagState);
    }
    if (TwoSelectOneBagState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TwoSelectOneBagState);
    }
    if (ThreeSelectOneBagState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreeSelectOneBagState);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetTopUpGiftBagStateNew other) {
    if (other == null) {
      return;
    }
    if (other.OneGiftBagState != 0) {
      OneGiftBagState = other.OneGiftBagState;
    }
    if (other.TwoSelectOneBagState != 0) {
      TwoSelectOneBagState = other.TwoSelectOneBagState;
    }
    if (other.ThreeSelectOneBagState != 0) {
      ThreeSelectOneBagState = other.ThreeSelectOneBagState;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          OneGiftBagState = input.ReadInt32();
          break;
        }
        case 16: {
          TwoSelectOneBagState = input.ReadInt32();
          break;
        }
        case 24: {
          ThreeSelectOneBagState = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GetSevenDayReward : pb::IMessage<GetSevenDayReward> {
  private static readonly pb::MessageParser<GetSevenDayReward> _parser = new pb::MessageParser<GetSevenDayReward>(() => new GetSevenDayReward());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetSevenDayReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[234]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSevenDayReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSevenDayReward(GetSevenDayReward other) : this() {
    selectIndex_ = other.selectIndex_;
    userDay_ = other.userDay_;
    rewardPro_ = other.rewardPro_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSevenDayReward Clone() {
    return new GetSevenDayReward(this);
  }

  /// <summary>Field number for the "selectIndex" field.</summary>
  public const int SelectIndexFieldNumber = 1;
  private int selectIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SelectIndex {
    get { return selectIndex_; }
    set {
      selectIndex_ = value;
    }
  }

  /// <summary>Field number for the "userDay" field.</summary>
  public const int UserDayFieldNumber = 2;
  private int userDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserDay {
    get { return userDay_; }
    set {
      userDay_ = value;
    }
  }

  /// <summary>Field number for the "rewardPro" field.</summary>
  public const int RewardProFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PB_Property> _repeated_rewardPro_codec
      = pb::FieldCodec.ForMessage(26, global::PB_Property.Parser);
  private readonly pbc::RepeatedField<global::PB_Property> rewardPro_ = new pbc::RepeatedField<global::PB_Property>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PB_Property> RewardPro {
    get { return rewardPro_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetSevenDayReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetSevenDayReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SelectIndex != other.SelectIndex) return false;
    if (UserDay != other.UserDay) return false;
    if(!rewardPro_.Equals(other.rewardPro_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SelectIndex != 0) hash ^= SelectIndex.GetHashCode();
    if (UserDay != 0) hash ^= UserDay.GetHashCode();
    hash ^= rewardPro_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SelectIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SelectIndex);
    }
    if (UserDay != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserDay);
    }
    rewardPro_.WriteTo(output, _repeated_rewardPro_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SelectIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectIndex);
    }
    if (UserDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDay);
    }
    size += rewardPro_.CalculateSize(_repeated_rewardPro_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetSevenDayReward other) {
    if (other == null) {
      return;
    }
    if (other.SelectIndex != 0) {
      SelectIndex = other.SelectIndex;
    }
    if (other.UserDay != 0) {
      UserDay = other.UserDay;
    }
    rewardPro_.Add(other.rewardPro_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SelectIndex = input.ReadInt32();
          break;
        }
        case 16: {
          UserDay = input.ReadInt32();
          break;
        }
        case 26: {
          rewardPro_.AddEntriesFrom(input, _repeated_rewardPro_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class InitSevenDayInfo : pb::IMessage<InitSevenDayInfo> {
  private static readonly pb::MessageParser<InitSevenDayInfo> _parser = new pb::MessageParser<InitSevenDayInfo>(() => new InitSevenDayInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<InitSevenDayInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[235]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitSevenDayInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitSevenDayInfo(InitSevenDayInfo other) : this() {
    result_ = other.result_;
    curDay_ = other.curDay_;
    userDay_ = other.userDay_;
    userDayState_ = other.userDayState_;
    taskDay_ = other.taskDay_;
    taskValue_ = other.taskValue_;
    taskDayState_ = other.taskDayState_;
    userGiftDay_ = other.userGiftDay_;
    userGiftDyaState_ = other.userGiftDyaState_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public InitSevenDayInfo Clone() {
    return new InitSevenDayInfo(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "curDay" field.</summary>
  public const int CurDayFieldNumber = 2;
  private long curDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CurDay {
    get { return curDay_; }
    set {
      curDay_ = value;
    }
  }

  /// <summary>Field number for the "userDay" field.</summary>
  public const int UserDayFieldNumber = 3;
  private int userDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserDay {
    get { return userDay_; }
    set {
      userDay_ = value;
    }
  }

  /// <summary>Field number for the "userDayState" field.</summary>
  public const int UserDayStateFieldNumber = 4;
  private int userDayState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserDayState {
    get { return userDayState_; }
    set {
      userDayState_ = value;
    }
  }

  /// <summary>Field number for the "taskDay" field.</summary>
  public const int TaskDayFieldNumber = 5;
  private int taskDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TaskDay {
    get { return taskDay_; }
    set {
      taskDay_ = value;
    }
  }

  /// <summary>Field number for the "taskValue" field.</summary>
  public const int TaskValueFieldNumber = 6;
  private long taskValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskValue {
    get { return taskValue_; }
    set {
      taskValue_ = value;
    }
  }

  /// <summary>Field number for the "taskDayState" field.</summary>
  public const int TaskDayStateFieldNumber = 7;
  private int taskDayState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TaskDayState {
    get { return taskDayState_; }
    set {
      taskDayState_ = value;
    }
  }

  /// <summary>Field number for the "userGiftDay" field.</summary>
  public const int UserGiftDayFieldNumber = 8;
  private int userGiftDay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserGiftDay {
    get { return userGiftDay_; }
    set {
      userGiftDay_ = value;
    }
  }

  /// <summary>Field number for the "userGiftDyaState" field.</summary>
  public const int UserGiftDyaStateFieldNumber = 9;
  private int userGiftDyaState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserGiftDyaState {
    get { return userGiftDyaState_; }
    set {
      userGiftDyaState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as InitSevenDayInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(InitSevenDayInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (CurDay != other.CurDay) return false;
    if (UserDay != other.UserDay) return false;
    if (UserDayState != other.UserDayState) return false;
    if (TaskDay != other.TaskDay) return false;
    if (TaskValue != other.TaskValue) return false;
    if (TaskDayState != other.TaskDayState) return false;
    if (UserGiftDay != other.UserGiftDay) return false;
    if (UserGiftDyaState != other.UserGiftDyaState) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (CurDay != 0L) hash ^= CurDay.GetHashCode();
    if (UserDay != 0) hash ^= UserDay.GetHashCode();
    if (UserDayState != 0) hash ^= UserDayState.GetHashCode();
    if (TaskDay != 0) hash ^= TaskDay.GetHashCode();
    if (TaskValue != 0L) hash ^= TaskValue.GetHashCode();
    if (TaskDayState != 0) hash ^= TaskDayState.GetHashCode();
    if (UserGiftDay != 0) hash ^= UserGiftDay.GetHashCode();
    if (UserGiftDyaState != 0) hash ^= UserGiftDyaState.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (CurDay != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(CurDay);
    }
    if (UserDay != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(UserDay);
    }
    if (UserDayState != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UserDayState);
    }
    if (TaskDay != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TaskDay);
    }
    if (TaskValue != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(TaskValue);
    }
    if (TaskDayState != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(TaskDayState);
    }
    if (UserGiftDay != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(UserGiftDay);
    }
    if (UserGiftDyaState != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(UserGiftDyaState);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (CurDay != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurDay);
    }
    if (UserDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDay);
    }
    if (UserDayState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDayState);
    }
    if (TaskDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskDay);
    }
    if (TaskValue != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskValue);
    }
    if (TaskDayState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskDayState);
    }
    if (UserGiftDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserGiftDay);
    }
    if (UserGiftDyaState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserGiftDyaState);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(InitSevenDayInfo other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.CurDay != 0L) {
      CurDay = other.CurDay;
    }
    if (other.UserDay != 0) {
      UserDay = other.UserDay;
    }
    if (other.UserDayState != 0) {
      UserDayState = other.UserDayState;
    }
    if (other.TaskDay != 0) {
      TaskDay = other.TaskDay;
    }
    if (other.TaskValue != 0L) {
      TaskValue = other.TaskValue;
    }
    if (other.TaskDayState != 0) {
      TaskDayState = other.TaskDayState;
    }
    if (other.UserGiftDay != 0) {
      UserGiftDay = other.UserGiftDay;
    }
    if (other.UserGiftDyaState != 0) {
      UserGiftDyaState = other.UserGiftDyaState;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          CurDay = input.ReadInt64();
          break;
        }
        case 24: {
          UserDay = input.ReadInt32();
          break;
        }
        case 32: {
          UserDayState = input.ReadInt32();
          break;
        }
        case 40: {
          TaskDay = input.ReadInt32();
          break;
        }
        case 48: {
          TaskValue = input.ReadInt64();
          break;
        }
        case 56: {
          TaskDayState = input.ReadInt32();
          break;
        }
        case 64: {
          UserGiftDay = input.ReadInt32();
          break;
        }
        case 72: {
          UserGiftDyaState = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PB_NotifyBroadcastSevenDayinfo : pb::IMessage<PB_NotifyBroadcastSevenDayinfo> {
  private static readonly pb::MessageParser<PB_NotifyBroadcastSevenDayinfo> _parser = new pb::MessageParser<PB_NotifyBroadcastSevenDayinfo>(() => new PB_NotifyBroadcastSevenDayinfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PB_NotifyBroadcastSevenDayinfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[236]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastSevenDayinfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastSevenDayinfo(PB_NotifyBroadcastSevenDayinfo other) : this() {
    type_ = other.type_;
    content_ = other.content_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PB_NotifyBroadcastSevenDayinfo Clone() {
    return new PB_NotifyBroadcastSevenDayinfo(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PB_NotifyBroadcastSevenDayinfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PB_NotifyBroadcastSevenDayinfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Content != other.Content) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Content);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PB_NotifyBroadcastSevenDayinfo other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18: {
          Content = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GetHideButtonState : pb::IMessage<GetHideButtonState> {
  private static readonly pb::MessageParser<GetHideButtonState> _parser = new pb::MessageParser<GetHideButtonState>(() => new GetHideButtonState());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetHideButtonState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[237]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetHideButtonState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetHideButtonState(GetHideButtonState other) : this() {
    count_ = other.count_;
    nButtonStateArray_ = other.nButtonStateArray_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetHideButtonState Clone() {
    return new GetHideButtonState(this);
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 1;
  private long count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "nButtonStateArray" field.</summary>
  public const int NButtonStateArrayFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_nButtonStateArray_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> nButtonStateArray_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> NButtonStateArray {
    get { return nButtonStateArray_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetHideButtonState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetHideButtonState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Count != other.Count) return false;
    if(!nButtonStateArray_.Equals(other.nButtonStateArray_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Count != 0L) hash ^= Count.GetHashCode();
    hash ^= nButtonStateArray_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Count != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Count);
    }
    nButtonStateArray_.WriteTo(output, _repeated_nButtonStateArray_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Count != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
    }
    size += nButtonStateArray_.CalculateSize(_repeated_nButtonStateArray_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetHideButtonState other) {
    if (other == null) {
      return;
    }
    if (other.Count != 0L) {
      Count = other.Count;
    }
    nButtonStateArray_.Add(other.nButtonStateArray_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Count = input.ReadInt64();
          break;
        }
        case 18:
        case 16: {
          nButtonStateArray_.AddEntriesFrom(input, _repeated_nButtonStateArray_codec);
          break;
        }
      }
    }
  }

}


public sealed partial class InitUpLevelInfo : pb::IMessage<InitUpLevelInfo>
{
    private static readonly pb::MessageParser<InitUpLevelInfo> _parser = new pb::MessageParser<InitUpLevelInfo>(() => new InitUpLevelInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitUpLevelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[238]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitUpLevelInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitUpLevelInfo(InitUpLevelInfo other) : this()
    {
        taskID_ = other.taskID_;
        taskCurValue_ = other.taskCurValue_;
        taskMaxValue_ = other.taskMaxValue_;
        rewardState_ = other.rewardState_;
        showInfoMaxValue_ = other.showInfoMaxValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitUpLevelInfo Clone()
    {
        return new InitUpLevelInfo(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int TaskIDFieldNumber = 1;
    private int taskID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskID
    {
        get { return taskID_; }
        set
        {
            taskID_ = value;
        }
    }

    /// <summary>Field number for the "curDay" field.</summary>
    public const int TaskCurValueFieldNumber = 2;
    private int taskCurValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskCurValue
    {
        get { return taskCurValue_; }
        set
        {
            taskCurValue_ = value;
        }
    }

    /// <summary>Field number for the "userDay" field.</summary>
    public const int TaskMaxValueFieldNumber = 3;
    private int taskMaxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskMaxValue
    {
        get { return taskMaxValue_; }
        set
        {
            taskMaxValue_ = value;
        }
    }

    /// <summary>Field number for the "userDayState" field.</summary>
    public const int RewardStateFieldNumber = 4;
    private int rewardState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardState
    {
        get { return rewardState_; }
        set
        {
            rewardState_ = value;
        }
    }

    /// <summary>Field number for the "taskDay" field.</summary>
    public const long ShowInfoMaxValueFieldNumber = 5;
    private long showInfoMaxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShowInfoMaxValue
    {
        get { return showInfoMaxValue_; }
        set
        {
            showInfoMaxValue_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as InitUpLevelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitUpLevelInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (TaskID != other.TaskID) return false;
        if (TaskCurValue != other.TaskCurValue) return false;
        if (TaskMaxValue != other.TaskMaxValue) return false;
        if (RewardState != other.RewardState) return false;
        if (ShowInfoMaxValue != other.ShowInfoMaxValue) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (TaskID != 0) hash ^= TaskID.GetHashCode();
        if (TaskCurValue != 0) hash ^= TaskCurValue.GetHashCode();
        if (TaskMaxValue != 0) hash ^= TaskMaxValue.GetHashCode();
        if (RewardState != 0) hash ^= RewardState.GetHashCode();
        if (ShowInfoMaxValue != 0) hash ^= ShowInfoMaxValue.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (TaskID != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(TaskID);
        }
        if (TaskCurValue != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt32(TaskCurValue);
        }
        if (TaskMaxValue != 0)
        {
            output.WriteRawTag(24);
            output.WriteInt32(TaskMaxValue);
        }
        if (RewardState != 0)
        {
            output.WriteRawTag(32);
            output.WriteInt32(RewardState);
        }
        if (ShowInfoMaxValue != 0)
        {
            output.WriteRawTag(40);
            output.WriteInt64(ShowInfoMaxValue);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (TaskID != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
        }
        if (TaskCurValue != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskCurValue);
        }
        if (TaskMaxValue != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskMaxValue);
        }
        if (RewardState != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardState);
        }
        if (ShowInfoMaxValue != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShowInfoMaxValue);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitUpLevelInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.TaskID != 0)
        {
            TaskID = other.TaskID;
        }
        if (other.TaskCurValue != 0)
        {
            TaskCurValue = other.TaskCurValue;
        }
        if (other.TaskMaxValue != 0)
        {
            TaskMaxValue = other.TaskMaxValue;
        }
        if (other.RewardState != 0)
        {
            RewardState = other.RewardState;
        }
        if (other.ShowInfoMaxValue != 0)
        {
            ShowInfoMaxValue = other.ShowInfoMaxValue;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        TaskID = input.ReadInt32();
                        break;
                    }
                case 16:
                    {
                        TaskCurValue = input.ReadInt32();
                        break;
                    }
                case 24:
                    {
                        TaskMaxValue = input.ReadInt32();
                        break;
                    }
                case 32:
                    {
                        RewardState = input.ReadInt32();
                        break;
                    }
                case 40:
                    {
                        ShowInfoMaxValue = input.ReadInt64();
                        break;
                    }
            }
        }
    }
}

public sealed partial class SendUpLevelReward : pb::IMessage<SendUpLevelReward>
{
    private static readonly pb::MessageParser<SendUpLevelReward> _parser = new pb::MessageParser<SendUpLevelReward>(() => new SendUpLevelReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendUpLevelReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[239]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendUpLevelReward()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendUpLevelReward(SendUpLevelReward other) : this()
    {
        taskID_ = other.taskID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendUpLevelReward Clone()
    {
        return new SendUpLevelReward(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int TaskIDFieldNumber = 1;
    private int taskID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskID
    {
        get { return taskID_; }
        set
        {
            taskID_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as SendUpLevelReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendUpLevelReward other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (TaskID != other.TaskID) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (TaskID != 0) hash ^= TaskID.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (TaskID != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(TaskID);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (TaskID != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendUpLevelReward other)
    {
        if (other == null)
        {
            return;
        }
        if (other.TaskID != 0)
        {
            TaskID = other.TaskID;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        TaskID = input.ReadInt32();
                        break;
                    }
            }
        }
    }
}

public sealed partial class GetUpLevelReward : pb::IMessage<GetUpLevelReward>
{
    private static readonly pb::MessageParser<GetUpLevelReward> _parser = new pb::MessageParser<GetUpLevelReward>(() => new GetUpLevelReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUpLevelReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[240]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUpLevelReward()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUpLevelReward(GetUpLevelReward other) : this()
    {
        result_ = other.result_;
        taskID_ = other.taskID_;
        tasklevel_ = other.tasklevel_;
        gold_ = other.gold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUpLevelReward Clone()
    {
        return new GetUpLevelReward(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result
    {
        get { return result_; }
        set
        {
            result_ = value;
        }
    }
    public const int TaskIDFieldNumber = 2;
    private int taskID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskID
    {
        get { return taskID_; }
        set
        {
            taskID_ = value;
        }
    }
    public const int TaskLevelFieldNumber = 3;
    private int tasklevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskLevel
    {
        get { return tasklevel_; }
        set
        {
            tasklevel_ = value;
        }
    }
    public const long GoldFieldNumber = 4;
    private long gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold
    {
        get { return gold_; }
        set
        {
            gold_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as GetUpLevelReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUpLevelReward other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Result != other.Result) return false;
        if (TaskID != other.TaskID) return false;
        if (TaskLevel != other.TaskLevel) return false;
        if (Gold != other.Gold) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        
        if (Result != 0) hash ^= Result.GetHashCode();
        if (TaskID != 0) hash ^= TaskID.GetHashCode();
        if (TaskLevel != 0) hash ^= TaskLevel.GetHashCode();
        if (Gold != 0) hash ^= Gold.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Result != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(TaskID);
        }
        if (TaskID != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(TaskID);
        }
        if (TaskLevel != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(TaskID);
        }
        if (Gold != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(TaskID);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Result != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
        }
        if (TaskID != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
        }
        if (TaskLevel != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskLevel);
        }
        if (Gold != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUpLevelReward other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Result != 0)
        {
            Result = other.Result;
        }
        if (other.TaskID != 0)
        {
            TaskID = other.TaskID;
        }
        if (other.TaskLevel != 0)
        {
            TaskLevel = other.TaskLevel;
        }
        if (other.Gold != 0)
        {
            Gold = other.Gold;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        Result = input.ReadInt32();
                        break;
                    }
                case 16:
                    {
                        TaskID = input.ReadInt32();
                        break;
                    }
                case 24:
                    {
                        TaskLevel = input.ReadInt32();
                        break;
                    }
                case 32:
                    {
                        Gold = input.ReadInt64();
                        break;
                    }
            }
        }
    }
}


public sealed partial class DBGetUpLevelActivityInfo : pb::IMessage<DBGetUpLevelActivityInfo>
{
    private static readonly pb::MessageParser<DBGetUpLevelActivityInfo> _parser = new pb::MessageParser<DBGetUpLevelActivityInfo>(() => new DBGetUpLevelActivityInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBGetUpLevelActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[241]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBGetUpLevelActivityInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBGetUpLevelActivityInfo(DBGetUpLevelActivityInfo other) : this()
    {
        rewardPro_ = other.rewardPro_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBGetUpLevelActivityInfo Clone()
    {
        return new DBGetUpLevelActivityInfo(this);
    }

    /// <summary>Field number for the "rewardPro" field.</summary>
    public const int RewardProFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InitUpLevelInfo> _repeated_rewardPro_codec
        = pb::FieldCodec.ForMessage(26, global::InitUpLevelInfo.Parser);
    private readonly pbc::RepeatedField<global::InitUpLevelInfo> rewardPro_ = new pbc::RepeatedField<global::InitUpLevelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InitUpLevelInfo> Rewarduplevleinfo
    {
        get { return rewardPro_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as DBGetUpLevelActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBGetUpLevelActivityInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!rewardPro_.Equals(other.rewardPro_)) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= rewardPro_.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        rewardPro_.WriteTo(output, _repeated_rewardPro_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += rewardPro_.CalculateSize(_repeated_rewardPro_codec);
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBGetUpLevelActivityInfo other)
    {
        if (other == null)
        {
            return;
        }
        rewardPro_.Add(other.rewardPro_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        rewardPro_.AddEntriesFrom(input, _repeated_rewardPro_codec);
                        break;
                    }
            }
        }
    }

}

public sealed partial class PB_ConvertFormalBindAccount : pb::IMessage<PB_ConvertFormalBindAccount>
{
    private static readonly pb::MessageParser<PB_ConvertFormalBindAccount> _parser = new pb::MessageParser<PB_ConvertFormalBindAccount>(() => new PB_ConvertFormalBindAccount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_ConvertFormalBindAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[242]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ConvertFormalBindAccount()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ConvertFormalBindAccount(PB_ConvertFormalBindAccount other) : this()
    {
        result = other.result;
        lUserID = other.lUserID;
        strPhoneNum = other.strPhoneNum;
        strCode = other.strCode;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ConvertFormalBindAccount Clone()
    {
        return new PB_ConvertFormalBindAccount(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result
    {
        get { return result; }
        set
        {
            result = value;
        }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int UserIDFieldNumber = 2;
    private long lUserID;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID
    {
        get { return lUserID; }
        set
        {
            lUserID = value;
        }
    }

    /// <summary>Field number for the "mobile" field.</summary>
    public const int StrPhoneNumFieldNumber = 3;
    private string strPhoneNum = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrPhoneNum
    {
        get { return strPhoneNum; }
        set
        {
            strPhoneNum = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "pwd" field.</summary>
    public const int StrCodeFieldNumber = 4;
    private string strCode = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrCode
    {
        get { return strCode; }
        set
        {
            strCode = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_ConvertFormalBindAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_ConvertFormalBindAccount other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Result != other.Result) return false;
        if (UserID != other.UserID) return false;
        if (StrPhoneNum != other.StrPhoneNum) return false;
        if (StrCode != other.StrCode) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Result != 0) hash ^= Result.GetHashCode();
        if (UserID != 0) hash ^= UserID.GetHashCode();
        if (StrPhoneNum.Length != 0) hash ^= StrPhoneNum.GetHashCode();
        if (StrCode.Length != 0) hash ^= StrCode.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Result != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Result);
        }
        if (UserID != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt64(UserID);
        }
        if (StrPhoneNum.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(StrPhoneNum);
        }
        if (StrCode.Length != 0)
        {
            output.WriteRawTag(34);
            output.WriteString(StrCode);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Result != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
        }
        if (UserID != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
        }
        if (StrPhoneNum.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StrPhoneNum);
        }
        if (StrCode.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StrCode);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_ConvertFormalBindAccount other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Result != 0)
        {
            Result = other.Result;
        }
        if (other.UserID != 0)
        {
            UserID = other.UserID;
        }
        if (other.StrPhoneNum.Length != 0)
        {
            StrPhoneNum = other.StrPhoneNum;
        }
        if (other.StrCode.Length != 0)
        {
            StrCode = other.StrCode;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        Result = input.ReadInt32();
                        break;
                    }
                case 16:
                    {
                        UserID = input.ReadInt64();
                        break;
                    }
                case 26:
                    {
                        StrPhoneNum = input.ReadString();
                        break;
                    }
                case 34:
                    {
                        StrCode = input.ReadString();
                        break;
                    }
            }
        }
    }
}

public sealed partial class PB_PayInfo : pb::IMessage<PB_PayInfo>
{
    private static readonly pb::MessageParser<PB_PayInfo> _parser = new pb::MessageParser<PB_PayInfo>(() => new PB_PayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_PayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[243]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_PayInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_PayInfo(PB_PayInfo other) : this()
    {
        payPro_ = other.payPro_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_PayInfo Clone()
    {
        return new PB_PayInfo(this);
    }

    /// <summary>Field number for the "rewardPro" field.</summary>
    public const int PayProFieldNumber = 1;
    private static readonly pb::FieldCodec<global::InitPayInfo> _repeated_payPro_codec
        = pb::FieldCodec.ForMessage(26, global::InitPayInfo.Parser);
    private readonly pbc::RepeatedField<global::InitPayInfo> payPro_ = new pbc::RepeatedField<global::InitPayInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InitPayInfo> Payinfo
    {
        get { return payPro_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_PayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_PayInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (!payPro_.Equals(other.payPro_)) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        hash ^= payPro_.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        payPro_.WriteTo(output, _repeated_payPro_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        size += payPro_.CalculateSize(_repeated_payPro_codec);
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_PayInfo other)
    {
        if (other == null)
        {
            return;
        }
        payPro_.Add(other.payPro_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        payPro_.AddEntriesFrom(input, _repeated_payPro_codec);
                        break;
                    }
            }
        }
    }
}

public sealed partial class InitPayInfo : pb::IMessage<InitPayInfo>
{
    private static readonly pb::MessageParser<InitPayInfo> _parser = new pb::MessageParser<InitPayInfo>(() => new InitPayInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitPayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[244]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitPayInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitPayInfo(InitPayInfo other) : this()
    {
        changeNum_ = other.changeNum_;
        payType_ = other.payType_;
        id_ = other.id_;
        rmb_ = other.rmb_;
        addGold_ = other.addGold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitPayInfo Clone()
    {
        return new InitPayInfo(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ChangeNumFieldNumber = 1;
    private int changeNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeNum
    {
        get { return changeNum_; }
        set
        {
            changeNum_ = value;
        }
    }

    /// <summary>Field number for the "curDay" field.</summary>
    public const int PayTypeFieldNumber = 2;
    private int payType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PayType
    {
        get { return payType_; }
        set
        {
            payType_ = value;
        }
    }

    /// <summary>Field number for the "userDay" field.</summary>
    public const int IDFieldNumber = 3;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID
    {
        get { return id_; }
        set
        {
            id_ = value;
        }
    }

    /// <summary>Field number for the "userDayState" field.</summary>
    public const int RMBFieldNumber = 4;
    private int rmb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RMB
    {
        get { return rmb_; }
        set
        {
            rmb_ = value;
        }
    }

    /// <summary>Field number for the "taskDay" field.</summary>
    public const long AddGoldFieldNumber = 5;
    private long addGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AddGold
    {
        get { return addGold_; }
        set
        {
            addGold_ = value;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as InitPayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitPayInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (ChangeNum != other.ChangeNum) return false;
        if (PayType != other.PayType) return false;
        if (ID != other.ID) return false;
        if (RMB != other.RMB) return false;
        if (AddGold != other.AddGold) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (ChangeNum != 0) hash ^= ChangeNum.GetHashCode();
        if (PayType != 0) hash ^= PayType.GetHashCode();
        if (ID != 0) hash ^= ID.GetHashCode();
        if (RMB != 0) hash ^= RMB.GetHashCode();
        if (AddGold != 0) hash ^= AddGold.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (ChangeNum != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(ChangeNum);
        }
        if (PayType != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt32(PayType);
        }
        if (ID != 0)
        {
            output.WriteRawTag(24);
            output.WriteInt32(ID);
        }
        if (RMB != 0)
        {
            output.WriteRawTag(32);
            output.WriteInt32(RMB);
        }
        if (AddGold != 0)
        {
            output.WriteRawTag(40);
            output.WriteInt64(AddGold);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (ChangeNum != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeNum);
        }
        if (PayType != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PayType);
        }
        if (ID != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
        }
        if (RMB != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RMB);
        }
        if (AddGold != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddGold);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitPayInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.ChangeNum != 0)
        {
            ChangeNum = other.ChangeNum;
        }
        if (other.PayType != 0)
        {
            PayType = other.PayType;
        }
        if (other.ID != 0)
        {
            ID = other.ID;
        }
        if (other.RMB != 0)
        {
            RMB = other.RMB;
        }
        if (other.AddGold != 0)
        {
            AddGold = other.AddGold;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        ChangeNum = input.ReadInt32();
                        break;
                    }
                case 16:
                    {
                        PayType = input.ReadInt32();
                        break;
                    }
                case 24:
                    {
                        ID = input.ReadInt32();
                        break;
                    }
                case 32:
                    {
                        RMB = input.ReadInt32();
                        break;
                    }
                case 40:
                    {
                        AddGold = input.ReadInt64();
                        break;
                    }
            }
        }
    }
}

public sealed partial class InitPhoneAccountInfo : pb::IMessage<InitPhoneAccountInfo>
{
    private static readonly pb::MessageParser<InitPhoneAccountInfo> _parser = new pb::MessageParser<InitPhoneAccountInfo>(() => new InitPhoneAccountInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitPhoneAccountInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[245]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitPhoneAccountInfo()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitPhoneAccountInfo(InitPhoneAccountInfo other) : this()
    {
        result_ = other.result_;
        AccountType_ = other.AccountType_;
        userId_ = other.userId_;
        accountName_ = other.accountName_;
        strToken_ = other.strToken_;
        nickname = other.nickname;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitPhoneAccountInfo Clone()
    {
        return new InitPhoneAccountInfo(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result
    {
        get { return result_; }
        set
        {
            result_ = value;
        }
    }

    /// <summary>Field number for the "curDay" field.</summary>
    public const int AccountTypeFieldNumber = 2;
    private int AccountType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountType
    {
        get { return AccountType_; }
        set
        {
            AccountType_ = value;
        }
    }

    /// <summary>Field number for the "userDay" field.</summary>
    public const int UserIDFieldNumber = 3;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserID
    {
        get { return userId_; }
        set
        {
            userId_ = value;
        }
    }

    /// <summary>Field number for the "userDayState" field.</summary>
    public const int AccountNameFieldNumber = 4;
    private string accountName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName
    {
        get { return accountName_; }
        set
        {
            accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "taskDay" field.</summary>
    public const int StrTokenFieldNumber = 5;
    private string strToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrToken
    {
        get { return strToken_; }
        set
        {
            strToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    public const int NicknameFieldNumber = 6;
    private string nickname;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname
    {
        get { return nickname; }
        set
        {
            nickname = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as InitPhoneAccountInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitPhoneAccountInfo other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Result != other.Result) return false;
        if (AccountType != other.AccountType) return false;
        if (UserID != other.UserID) return false;
        if (AccountName != other.AccountName) return false;
        if (StrToken != other.StrToken) return false;
        if (Nickname != other.Nickname) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Result != 0) hash ^= Result.GetHashCode();
        if (AccountType != 0) hash ^= AccountType.GetHashCode();
        if (UserID != 0) hash ^= UserID.GetHashCode();
        if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
        if (StrToken.Length != 0) hash ^= StrToken.GetHashCode();
        if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Result != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Result);
        }
        if (AccountType != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt32(AccountType);
        }
        if (UserID != 0)
        {
            output.WriteRawTag(24);
            output.WriteInt32(UserID);
        }
        if (AccountName.Length != 0)
        {
            output.WriteRawTag(34);
            output.WriteString(AccountName);
        }
        if (StrToken.Length != 0)
        {
            output.WriteRawTag(42);
            output.WriteString(StrToken);
        }
        if (Nickname.Length != 0)
        {
            output.WriteRawTag(50);
            output.WriteString(Nickname);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Result != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
        }
        if (AccountType != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountType);
        }
        if (UserID != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
        }
        if (AccountName.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
        }
        if (StrToken.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StrToken);
        }
        if (Nickname.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitPhoneAccountInfo other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Result != 0)
        {
            Result = other.Result;
        }
        if (other.AccountType != 0)
        {
            AccountType = other.AccountType;
        }
        if (other.UserID != 0)
        {
            UserID = other.UserID;
        }
        if (other.AccountName.Length != 0)
        {
            AccountName = other.AccountName;
        }
        if (other.StrToken.Length != 0)
        {
            StrToken = other.StrToken;
        }
        if (other.Nickname.Length != 0)
        {
            Nickname = other.Nickname;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        Result = input.ReadInt32();
                        break;
                    }
                case 16:
                    {
                        AccountType = input.ReadInt32();
                        break;
                    }
                case 24:
                    {
                        UserID = input.ReadInt32();
                        break;
                    }
                case 34:
                    {
                        AccountName = input.ReadString();
                        break;
                    }
                case 42:
                    {
                        StrToken = input.ReadString();
                        break;
                    }
                case 50:
                    {
                        Nickname = input.ReadString();
                        break;
                    }
            }
        }
    }
}

public sealed partial class PB_PhoneLogin : pb::IMessage<PB_PhoneLogin>
{
    private static readonly pb::MessageParser<PB_PhoneLogin> _parser = new pb::MessageParser<PB_PhoneLogin>(() => new PB_PhoneLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_PhoneLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[246]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_PhoneLogin()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_PhoneLogin(PB_PhoneLogin other) : this()
    {
        result_ = other.result_;
        accountInfoArr_ = other.accountInfoArr_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_PhoneLogin Clone()
    {
        return new PB_PhoneLogin(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result
    {
        get { return result_; }
        set
        {
            result_ = value;
        }
    }

    /// <summary>Field number for the "AccountInfoArr" field.</summary>
    public const int AccountInfoArrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::InitPhoneAccountInfo> _repeated_accountInfoArr_codec
        = pb::FieldCodec.ForMessage(26, global::InitPhoneAccountInfo.Parser);
    private readonly pbc::RepeatedField<global::InitPhoneAccountInfo> accountInfoArr_ = new pbc::RepeatedField<global::InitPhoneAccountInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InitPhoneAccountInfo> AccountInfoArr
    {
        get { return accountInfoArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_PhoneLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_PhoneLogin other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Result != other.Result) return false;
        if (!accountInfoArr_.Equals(other.accountInfoArr_)) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Result != 0) hash ^= Result.GetHashCode();
        hash ^= accountInfoArr_.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Result != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Result);
        }
        accountInfoArr_.WriteTo(output, _repeated_accountInfoArr_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Result != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
        }
        size += accountInfoArr_.CalculateSize(_repeated_accountInfoArr_codec);
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_PhoneLogin other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Result != 0)
        {
            Result = other.Result;
        }
        accountInfoArr_.Add(other.accountInfoArr_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        Result = input.ReadInt32();
                        break;
                    }
                case 18:
                    {
                        accountInfoArr_.AddEntriesFrom(input, _repeated_accountInfoArr_codec);
                        break;
                    }
            }
        }
    }
}

public sealed partial class PB_GetIphonePassResp : pb::IMessage<PB_GetIphonePassResp>
{
    private static readonly pb::MessageParser<PB_GetIphonePassResp> _parser = new pb::MessageParser<PB_GetIphonePassResp>(() => new PB_GetIphonePassResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_GetIphonePassResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[247]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_GetIphonePassResp()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_GetIphonePassResp(PB_GetIphonePassResp other) : this()
    {
        result_ = other.result_;
        accountInfoArr_ = other.accountInfoArr_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_GetIphonePassResp Clone()
    {
        return new PB_GetIphonePassResp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result
    {
        get { return result_; }
        set
        {
            result_ = value;
        }
    }

    /// <summary>Field number for the "AccountInfoArr" field.</summary>
    public const int AccountInfoArrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::InitPhoneAccountInfo> _repeated_accountInfoArr_codec
        = pb::FieldCodec.ForMessage(26, global::InitPhoneAccountInfo.Parser);
    private readonly pbc::RepeatedField<global::InitPhoneAccountInfo> accountInfoArr_ = new pbc::RepeatedField<global::InitPhoneAccountInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::InitPhoneAccountInfo> AccountInfoArr
    {
        get { return accountInfoArr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_GetIphonePassResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_GetIphonePassResp other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Result != other.Result) return false;
        if (!accountInfoArr_.Equals(other.accountInfoArr_)) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Result != 0) hash ^= Result.GetHashCode();
        hash ^= accountInfoArr_.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Result != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Result);
        }
        accountInfoArr_.WriteTo(output, _repeated_accountInfoArr_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Result != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
        }
        size += accountInfoArr_.CalculateSize(_repeated_accountInfoArr_codec);
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_GetIphonePassResp other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Result != 0)
        {
            Result = other.Result;
        }
        accountInfoArr_.Add(other.accountInfoArr_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        Result = input.ReadInt32();
                        break;
                    }
                case 18:
                    {
                        accountInfoArr_.AddEntriesFrom(input, _repeated_accountInfoArr_codec);
                        break;
                    }
            }
        }
    }
}

public sealed partial class PB_AssociateAccountLogin : pb::IMessage<PB_AssociateAccountLogin>
{
    private static readonly pb::MessageParser<PB_AssociateAccountLogin> _parser = new pb::MessageParser<PB_AssociateAccountLogin>(() => new PB_AssociateAccountLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_AssociateAccountLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[248]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_AssociateAccountLogin()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_AssociateAccountLogin(PB_AssociateAccountLogin other) : this()
    {
        result_ = other.result_;
        AccountType_ = other.AccountType_;
        userId_ = other.userId_;
        accountName_ = other.accountName_;
        strToken_ = other.strToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_AssociateAccountLogin Clone()
    {
        return new PB_AssociateAccountLogin(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result
    {
        get { return result_; }
        set
        {
            result_ = value;
        }
    }

    /// <summary>Field number for the "curDay" field.</summary>
    public const int AccountTypeFieldNumber = 2;
    private int AccountType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountType
    {
        get { return AccountType_; }
        set
        {
            AccountType_ = value;
        }
    }

    /// <summary>Field number for the "userDay" field.</summary>
    public const int UserIDFieldNumber = 3;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserID
    {
        get { return userId_; }
        set
        {
            userId_ = value;
        }
    }

    /// <summary>Field number for the "userDayState" field.</summary>
    public const int AccountNameFieldNumber = 4;
    private string accountName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName
    {
        get { return accountName_; }
        set
        {
            accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "taskDay" field.</summary>
    public const int StrTokenFieldNumber = 5;
    private string strToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrToken
    {
        get { return strToken_; }
        set
        {
            strToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_AssociateAccountLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_AssociateAccountLogin other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Result != other.Result) return false;
        if (AccountType != other.AccountType) return false;
        if (UserID != other.UserID) return false;
        if (AccountName != other.AccountName) return false;
        if (StrToken != other.StrToken) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (Result != 0) hash ^= Result.GetHashCode();
        if (AccountType != 0) hash ^= AccountType.GetHashCode();
        if (UserID != 0) hash ^= UserID.GetHashCode();
        if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
        if (StrToken.Length != 0) hash ^= StrToken.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (Result != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(Result);
        }
        if (AccountType != 0)
        {
            output.WriteRawTag(16);
            output.WriteInt32(AccountType);
        }
        if (UserID != 0)
        {
            output.WriteRawTag(24);
            output.WriteInt32(UserID);
        }
        if (AccountName.Length != 0)
        {
            output.WriteRawTag(34);
            output.WriteString(AccountName);
        }
        if (StrToken.Length != 0)
        {
            output.WriteRawTag(42);
            output.WriteString(StrToken);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (Result != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
        }
        if (AccountType != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountType);
        }
        if (UserID != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
        }
        if (AccountName.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
        }
        if (StrToken.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StrToken);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_AssociateAccountLogin other)
    {
        if (other == null)
        {
            return;
        }
        if (other.Result != 0)
        {
            Result = other.Result;
        }
        if (other.AccountType != 0)
        {
            AccountType = other.AccountType;
        }
        if (other.UserID != 0)
        {
            UserID = other.UserID;
        }
        if (other.AccountName.Length != 0)
        {
            AccountName = other.AccountName;
        }
        if (other.StrToken.Length != 0)
        {
            StrToken = other.StrToken;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        Result = input.ReadInt32();
                        break;
                    }
                case 16:
                    {
                        AccountType = input.ReadInt32();
                        break;
                    }
                case 24:
                    {
                        UserID = input.ReadInt32();
                        break;
                    }
                case 34:
                    {
                        AccountName = input.ReadString();
                        break;
                    }
                case 42:
                    {
                        StrToken = input.ReadString();
                        break;
                    }
            }
        }
    }
}

public sealed partial class PB_ConvertFormalPhoneNumber : pb::IMessage<PB_ConvertFormalPhoneNumber>
{
    private static readonly pb::MessageParser<PB_ConvertFormalPhoneNumber> _parser = new pb::MessageParser<PB_ConvertFormalPhoneNumber>(() => new PB_ConvertFormalPhoneNumber());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_ConvertFormalPhoneNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[249]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ConvertFormalPhoneNumber()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ConvertFormalPhoneNumber(PB_ConvertFormalPhoneNumber other) : this()
    {
        strPhoneNum = other.strPhoneNum;
        strCode = other.strCode;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ConvertFormalPhoneNumber Clone()
    {
        return new PB_ConvertFormalPhoneNumber(this);
    }

    /// <summary>Field number for the "strPhoneNum" field.</summary>
    public const int StrPhoneNumFieldNumber = 1;
    private string strPhoneNum = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrPhoneNum
    {
        get { return strPhoneNum; }
        set
        {
            strPhoneNum = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "strCode" field.</summary>
    public const int StrCodeFieldNumber = 2;
    private string strCode = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrCode
    {
        get { return strCode; }
        set
        {
            strCode = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_ConvertFormalPhoneNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_ConvertFormalPhoneNumber other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (StrPhoneNum != other.StrPhoneNum) return false;
        if (StrCode != other.StrCode) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (StrPhoneNum.Length != 0) hash ^= StrPhoneNum.GetHashCode();
        if (StrCode.Length != 0) hash ^= StrCode.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (StrPhoneNum.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(StrPhoneNum);
        }
        if (StrCode.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(StrCode);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (StrPhoneNum.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StrPhoneNum);
        }
        if (StrCode.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StrCode);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_ConvertFormalPhoneNumber other)
    {
        if (other == null)
        {
            return;
        }
        if (other.StrPhoneNum.Length != 0)
        {
            StrPhoneNum = other.StrPhoneNum;
        }
        if (other.StrCode.Length != 0)
        {
            StrCode = other.StrCode;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        StrPhoneNum = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        StrCode = input.ReadString();
                        break;
                    }
            }
        }
    }
}

public sealed partial class PB_SetPhoneNumberPassword : pb::IMessage<PB_SetPhoneNumberPassword>
{
    private static readonly pb::MessageParser<PB_SetPhoneNumberPassword> _parser = new pb::MessageParser<PB_SetPhoneNumberPassword>(() => new PB_SetPhoneNumberPassword());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_SetPhoneNumberPassword> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[250]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_SetPhoneNumberPassword()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_SetPhoneNumberPassword(PB_SetPhoneNumberPassword other) : this()
    {
        strPhoneNum = other.strPhoneNum;
        pass = other.pass;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_SetPhoneNumberPassword Clone()
    {
        return new PB_SetPhoneNumberPassword(this);
    }

    /// <summary>Field number for the "strPhoneNum" field.</summary>
    public const int StrPhoneNumFieldNumber = 1;
    private string strPhoneNum = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrPhoneNum
    {
        get { return strPhoneNum; }
        set
        {
            strPhoneNum = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int StrCodeFieldNumber = 2;
    private string pass = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pass
    {
        get { return pass; }
        set
        {
            pass = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_SetPhoneNumberPassword);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_SetPhoneNumberPassword other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (StrPhoneNum != other.StrPhoneNum) return false;
        if (Pass != other.Pass) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (StrPhoneNum.Length != 0) hash ^= StrPhoneNum.GetHashCode();
        if (Pass.Length != 0) hash ^= Pass.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (StrPhoneNum.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(StrPhoneNum);
        }
        if (Pass.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Pass);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (StrPhoneNum.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StrPhoneNum);
        }
        if (Pass.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Pass);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_SetPhoneNumberPassword other)
    {
        if (other == null)
        {
            return;
        }
        if (other.StrPhoneNum.Length != 0)
        {
            StrPhoneNum = other.StrPhoneNum;
        }
        if (other.Pass.Length != 0)
        {
            Pass = other.Pass;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        StrPhoneNum = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        Pass = input.ReadString();
                        break;
                    }
            }
        }
    }
}

public sealed partial class PB_SetPhoneLoginPass : pb::IMessage<PB_SetPhoneLoginPass>
{
    private static readonly pb::MessageParser<PB_SetPhoneLoginPass> _parser = new pb::MessageParser<PB_SetPhoneLoginPass>(() => new PB_SetPhoneLoginPass());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_SetPhoneLoginPass> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[251]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_SetPhoneLoginPass()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_SetPhoneLoginPass(PB_SetPhoneLoginPass other) : this()
    {
        phoneNumber = other.phoneNumber;
        Password = other.Password;
        Nickname = other.Nickname;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_SetPhoneLoginPass Clone()
    {
        return new PB_SetPhoneLoginPass(this);
    }

    /// <summary>Field number for the "strPhoneNum" field.</summary>
    public const int PhoneNumberFieldNumber = 1;
    private string phoneNumber = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PhoneNumber
    {
        get { return phoneNumber; }
        set
        {
            phoneNumber = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password
    {
        get { return password; }
        set
        {
            password = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    public const int NicknameFieldNumber = 3;
    private string nickname = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname
    {
        get { return nickname; }
        set
        {
            nickname = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_SetPhoneLoginPass);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_SetPhoneLoginPass other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (PhoneNumber != other.PhoneNumber) return false;
        if (Password != other.Password) return false;
        if (Nickname != other.Nickname) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (PhoneNumber.Length != 0) hash ^= PhoneNumber.GetHashCode();
        if (Password.Length != 0) hash ^= Password.GetHashCode();
        if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (PhoneNumber.Length != 0)
        {
            output.WriteRawTag(10);
            output.WriteString(PhoneNumber);
        }
        if (Password.Length != 0)
        {
            output.WriteRawTag(18);
            output.WriteString(Password);
        }
        if (Nickname.Length != 0)
        {
            output.WriteRawTag(26);
            output.WriteString(Nickname);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (PhoneNumber.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNumber);
        }
        if (Password.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
        }
        if (Nickname.Length != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_SetPhoneLoginPass other)
    {
        if (other == null)
        {
            return;
        }
        if (other.PhoneNumber.Length != 0)
        {
            PhoneNumber = other.PhoneNumber;
        }
        if (other.Password.Length != 0)
        {
            Password = other.Password;
        }
        if (other.Nickname.Length != 0)
        {
            Nickname = other.Nickname;
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 10:
                    {
                        PhoneNumber = input.ReadString();
                        break;
                    }
                case 18:
                    {
                        Password = input.ReadString();
                        break;
                    }
                case 26:
                    {
                        Nickname = input.ReadString();
                        break;
                    }
            }
        }
    }
}

public sealed partial class PB_LoginAccountNickChoice : pb::IMessage<PB_LoginAccountNickChoice>
{
    private static readonly pb::MessageParser<PB_LoginAccountNickChoice> _parser = new pb::MessageParser<PB_LoginAccountNickChoice>(() => new PB_LoginAccountNickChoice());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_LoginAccountNickChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::FiProtoEntityReflection.Descriptor.MessageTypes[252]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_LoginAccountNickChoice()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_LoginAccountNickChoice(PB_LoginAccountNickChoice other) : this()
    {
        LanguageType = other.LanguageType;
        nickArray = other.NickArray.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_LoginAccountNickChoice Clone()
    {
        return new PB_LoginAccountNickChoice(this);
    }

    /// <summary>Field number for the "strPhoneNum" field.</summary>
    public const int LanguageTypeNumber = 1;
    private int languageType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LanguageType
    {
        get { return languageType; }
        set
        {
            languageType = value;
        }
    }
    public const int NickArrayFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_NickArray_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> nickArray = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NickArray
    {
        get { return nickArray; }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other)
    {
        return Equals(other as PB_LoginAccountNickChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_LoginAccountNickChoice other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (LanguageType != other.LanguageType) return false;
        if (!NickArray.Equals(other.NickArray)) return false;
        return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode()
    {
        int hash = 1;
        if (LanguageType != 0) hash ^= LanguageType.GetHashCode();
        hash ^= NickArray.GetHashCode();
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output)
    {
        if (LanguageType != 0)
        {
            output.WriteRawTag(8);
            output.WriteInt32(LanguageType);
        }
        output.WriteRawTag(18);
        NickArray.WriteTo(output, _repeated_NickArray_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize()
    {
        int size = 0;
        if (LanguageType != 0)
        {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LanguageType);
        }
        size += NickArray.CalculateSize(_repeated_NickArray_codec);
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_LoginAccountNickChoice other)
    {
        if (other == null)
        {
            return;
        }
        if (other.LanguageType != 0)
        {
            LanguageType = other.LanguageType;
        }
        NickArray.Add(other.NickArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    input.SkipLastField();
                    break;
                case 8:
                    {
                        LanguageType = input.ReadInt32();
                        break;
                    }
                case 18:
                    {
                        NickArray.AddEntriesFrom(input, _repeated_NickArray_codec);
                        break;
                    }
            }
        }
    }
}

#endregion


#endregion Designer generated code
